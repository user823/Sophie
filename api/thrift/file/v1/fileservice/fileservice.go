// Code generated by Kitex v0.8.0. DO NOT EDIT.

package fileservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	v1 "github.com/user823/Sophie/api/thrift/file/v1"
)

func serviceInfo() *kitex.ServiceInfo {
	return fileServiceServiceInfo
}

var fileServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FileService"
	handlerType := (*v1.FileService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Upload": kitex.NewMethodInfo(uploadHandler, newFileServiceUploadArgs, newFileServiceUploadResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "v1",
		"ServiceFilePath": `api/thrift/file/v1/file.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func uploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.FileServiceUploadArgs)
	realResult := result.(*v1.FileServiceUploadResult)
	success, err := handler.(v1.FileService).Upload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceUploadArgs() interface{} {
	return v1.NewFileServiceUploadArgs()
}

func newFileServiceUploadResult() interface{} {
	return v1.NewFileServiceUploadResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Upload(ctx context.Context, req *v1.UploadRequest) (r *v1.FileInfoResponse, err error) {
	var _args v1.FileServiceUploadArgs
	_args.Req = req
	var _result v1.FileServiceUploadResult
	if err = p.c.Call(ctx, "Upload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
