// Code generated by Kitex v0.8.0. DO NOT EDIT.

package genservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	v1 "github.com/user823/Sophie/api/thrift/gen/v1"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ListGenTables(ctx context.Context, req *v1.ListGenTablesRequest, callOptions ...callopt.Option) (r *v1.ListGenTablesResponse, err error)
	GetInfo(ctx context.Context, tableId int64, callOptions ...callopt.Option) (r *v1.GetInfoResponse, err error)
	DataList(ctx context.Context, req *v1.DataListRequest, callOptions ...callopt.Option) (r *v1.ListGenTablesResponse, err error)
	ColumnList(ctx context.Context, tableId int64, callOptions ...callopt.Option) (r *v1.ListGenTableColumnsResponse, err error)
	ImportTableSave(ctx context.Context, req *v1.ImportTableSaveRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	EditSave(ctx context.Context, req *v1.EditSaveRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	Remove(ctx context.Context, req *v1.RemoveRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	Preview(ctx context.Context, tableId int64, callOptions ...callopt.Option) (r *v1.PreviewResponse, err error)
	Download(ctx context.Context, tableName string, callOptions ...callopt.Option) (r *v1.DownloadResponse, err error)
	GenCode(ctx context.Context, tableName string, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	SynchDb(ctx context.Context, tableName string, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	BatchGenCode(ctx context.Context, tables string, callOptions ...callopt.Option) (r *v1.DownloadResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kGenServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kGenServiceClient struct {
	*kClient
}

func (p *kGenServiceClient) ListGenTables(ctx context.Context, req *v1.ListGenTablesRequest, callOptions ...callopt.Option) (r *v1.ListGenTablesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListGenTables(ctx, req)
}

func (p *kGenServiceClient) GetInfo(ctx context.Context, tableId int64, callOptions ...callopt.Option) (r *v1.GetInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetInfo(ctx, tableId)
}

func (p *kGenServiceClient) DataList(ctx context.Context, req *v1.DataListRequest, callOptions ...callopt.Option) (r *v1.ListGenTablesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DataList(ctx, req)
}

func (p *kGenServiceClient) ColumnList(ctx context.Context, tableId int64, callOptions ...callopt.Option) (r *v1.ListGenTableColumnsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ColumnList(ctx, tableId)
}

func (p *kGenServiceClient) ImportTableSave(ctx context.Context, req *v1.ImportTableSaveRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ImportTableSave(ctx, req)
}

func (p *kGenServiceClient) EditSave(ctx context.Context, req *v1.EditSaveRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EditSave(ctx, req)
}

func (p *kGenServiceClient) Remove(ctx context.Context, req *v1.RemoveRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Remove(ctx, req)
}

func (p *kGenServiceClient) Preview(ctx context.Context, tableId int64, callOptions ...callopt.Option) (r *v1.PreviewResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Preview(ctx, tableId)
}

func (p *kGenServiceClient) Download(ctx context.Context, tableName string, callOptions ...callopt.Option) (r *v1.DownloadResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Download(ctx, tableName)
}

func (p *kGenServiceClient) GenCode(ctx context.Context, tableName string, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GenCode(ctx, tableName)
}

func (p *kGenServiceClient) SynchDb(ctx context.Context, tableName string, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SynchDb(ctx, tableName)
}

func (p *kGenServiceClient) BatchGenCode(ctx context.Context, tables string, callOptions ...callopt.Option) (r *v1.DownloadResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGenCode(ctx, tables)
}
