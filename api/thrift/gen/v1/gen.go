// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package v1

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
	*p = BaseResp{}
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

func (p *BaseResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BaseResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BaseResp) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}
func (p *BaseResp) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *BaseResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BaseResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BaseResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BaseResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)

}

func (p *BaseResp) DeepEqual(ano *BaseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *BaseResp) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *BaseResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type PageInfo struct {
	PageNum       int64  `thrift:"pageNum,1" frugal:"1,default,i64" json:"pageNum"`
	PageSize      int64  `thrift:"pageSize,2" frugal:"2,default,i64" json:"pageSize"`
	OrderByColumn string `thrift:"orderByColumn,3" frugal:"3,default,string" json:"orderByColumn"`
	IsAsc         string `thrift:"isAsc,4" frugal:"4,default,string" json:"isAsc"`
}

func NewPageInfo() *PageInfo {
	return &PageInfo{}
}

func (p *PageInfo) InitDefault() {
	*p = PageInfo{}
}

func (p *PageInfo) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *PageInfo) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *PageInfo) GetOrderByColumn() (v string) {
	return p.OrderByColumn
}

func (p *PageInfo) GetIsAsc() (v string) {
	return p.IsAsc
}
func (p *PageInfo) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *PageInfo) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *PageInfo) SetOrderByColumn(val string) {
	p.OrderByColumn = val
}
func (p *PageInfo) SetIsAsc(val string) {
	p.IsAsc = val
}

var fieldIDToName_PageInfo = map[int16]string{
	1: "pageNum",
	2: "pageSize",
	3: "orderByColumn",
	4: "isAsc",
}

func (p *PageInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PageInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PageInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}
func (p *PageInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}
func (p *PageInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderByColumn = v
	}
	return nil
}
func (p *PageInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IsAsc = v
	}
	return nil
}

func (p *PageInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PageInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PageInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PageInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PageInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderByColumn", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderByColumn); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PageInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isAsc", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IsAsc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PageInfo(%+v)", *p)

}

func (p *PageInfo) DeepEqual(ano *PageInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrderByColumn) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsAsc) {
		return false
	}
	return true
}

func (p *PageInfo) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *PageInfo) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *PageInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.OrderByColumn, src) != 0 {
		return false
	}
	return true
}
func (p *PageInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.IsAsc, src) != 0 {
		return false
	}
	return true
}

type DateRange struct {
	BeginTime int64 `thrift:"beginTime,1" frugal:"1,default,i64" json:"beginTime"`
	EndTime   int64 `thrift:"endTime,2" frugal:"2,default,i64" json:"endTime"`
}

func NewDateRange() *DateRange {
	return &DateRange{}
}

func (p *DateRange) InitDefault() {
	*p = DateRange{}
}

func (p *DateRange) GetBeginTime() (v int64) {
	return p.BeginTime
}

func (p *DateRange) GetEndTime() (v int64) {
	return p.EndTime
}
func (p *DateRange) SetBeginTime(val int64) {
	p.BeginTime = val
}
func (p *DateRange) SetEndTime(val int64) {
	p.EndTime = val
}

var fieldIDToName_DateRange = map[int16]string{
	1: "beginTime",
	2: "endTime",
}

func (p *DateRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DateRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DateRange) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.BeginTime = v
	}
	return nil
}
func (p *DateRange) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *DateRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DateRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DateRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("beginTime", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BeginTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DateRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("endTime", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DateRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DateRange(%+v)", *p)

}

func (p *DateRange) DeepEqual(ano *DateRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BeginTime) {
		return false
	}
	if !p.Field2DeepEqual(ano.EndTime) {
		return false
	}
	return true
}

func (p *DateRange) Field1DeepEqual(src int64) bool {

	if p.BeginTime != src {
		return false
	}
	return true
}
func (p *DateRange) Field2DeepEqual(src int64) bool {

	if p.EndTime != src {
		return false
	}
	return true
}

type BaseInfo struct {
	CreateBy   string            `thrift:"createBy,1" frugal:"1,default,string" json:"createBy"`
	CreateTime int64             `thrift:"createTime,2" frugal:"2,default,i64" json:"createTime"`
	UpdateBy   string            `thrift:"updateBy,3" frugal:"3,default,string" json:"updateBy"`
	UpdateTime int64             `thrift:"updateTime,4" frugal:"4,default,i64" json:"updateTime"`
	Remark     string            `thrift:"remark,5" frugal:"5,default,string" json:"remark"`
	Params     map[string]string `thrift:"params,6" frugal:"6,default,map<string:string>" json:"params"`
}

func NewBaseInfo() *BaseInfo {
	return &BaseInfo{}
}

func (p *BaseInfo) InitDefault() {
	*p = BaseInfo{}
}

func (p *BaseInfo) GetCreateBy() (v string) {
	return p.CreateBy
}

func (p *BaseInfo) GetCreateTime() (v int64) {
	return p.CreateTime
}

func (p *BaseInfo) GetUpdateBy() (v string) {
	return p.UpdateBy
}

func (p *BaseInfo) GetUpdateTime() (v int64) {
	return p.UpdateTime
}

func (p *BaseInfo) GetRemark() (v string) {
	return p.Remark
}

func (p *BaseInfo) GetParams() (v map[string]string) {
	return p.Params
}
func (p *BaseInfo) SetCreateBy(val string) {
	p.CreateBy = val
}
func (p *BaseInfo) SetCreateTime(val int64) {
	p.CreateTime = val
}
func (p *BaseInfo) SetUpdateBy(val string) {
	p.UpdateBy = val
}
func (p *BaseInfo) SetUpdateTime(val int64) {
	p.UpdateTime = val
}
func (p *BaseInfo) SetRemark(val string) {
	p.Remark = val
}
func (p *BaseInfo) SetParams(val map[string]string) {
	p.Params = val
}

var fieldIDToName_BaseInfo = map[int16]string{
	1: "createBy",
	2: "createTime",
	3: "updateBy",
	4: "updateTime",
	5: "remark",
	6: "params",
}

func (p *BaseInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BaseInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BaseInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateBy = v
	}
	return nil
}
func (p *BaseInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}
func (p *BaseInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateBy = v
	}
	return nil
}
func (p *BaseInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}
func (p *BaseInfo) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = v
	}
	return nil
}
func (p *BaseInfo) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Params = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Params[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BaseInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BaseInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BaseInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createBy", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateBy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BaseInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createTime", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BaseInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updateBy", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateBy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BaseInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updateTime", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BaseInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BaseInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.MAP, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Params)); err != nil {
		return err
	}
	for k, v := range p.Params {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BaseInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseInfo(%+v)", *p)

}

func (p *BaseInfo) DeepEqual(ano *BaseInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CreateBy) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdateBy) {
		return false
	}
	if !p.Field4DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field6DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *BaseInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.CreateBy, src) != 0 {
		return false
	}
	return true
}
func (p *BaseInfo) Field2DeepEqual(src int64) bool {

	if p.CreateTime != src {
		return false
	}
	return true
}
func (p *BaseInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.UpdateBy, src) != 0 {
		return false
	}
	return true
}
func (p *BaseInfo) Field4DeepEqual(src int64) bool {

	if p.UpdateTime != src {
		return false
	}
	return true
}
func (p *BaseInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *BaseInfo) Field6DeepEqual(src map[string]string) bool {

	if len(p.Params) != len(src) {
		return false
	}
	for k, v := range p.Params {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type GenTable struct {
	BaseInfo       *BaseInfo         `thrift:"baseInfo,1" frugal:"1,default,BaseInfo" json:"baseInfo"`
	TableId        int64             `thrift:"tableId,2" frugal:"2,default,i64" json:"tableId"`
	TableName      *string           `thrift:"tableName,3,optional" frugal:"3,optional,string" json:"tableName,omitempty"`
	TableComment   *string           `thrift:"tableComment,4,optional" frugal:"4,optional,string" json:"tableComment,omitempty"`
	SubTableName   *string           `thrift:"subTableName,5,optional" frugal:"5,optional,string" json:"subTableName,omitempty"`
	SubTableFkName *string           `thrift:"subTableFkName,6,optional" frugal:"6,optional,string" json:"subTableFkName,omitempty"`
	ClassName      *string           `thrift:"className,7,optional" frugal:"7,optional,string" json:"className,omitempty"`
	TplCategory    *string           `thrift:"tplCategory,8,optional" frugal:"8,optional,string" json:"tplCategory,omitempty"`
	TplWebType     *string           `thrift:"tplWebType,9,optional" frugal:"9,optional,string" json:"tplWebType,omitempty"`
	PackageName    *string           `thrift:"packageName,10,optional" frugal:"10,optional,string" json:"packageName,omitempty"`
	ModuleName     *string           `thrift:"moduleName,11,optional" frugal:"11,optional,string" json:"moduleName,omitempty"`
	BusinessName   *string           `thrift:"businessName,12,optional" frugal:"12,optional,string" json:"businessName,omitempty"`
	FunctionName   *string           `thrift:"functionName,13,optional" frugal:"13,optional,string" json:"functionName,omitempty"`
	FunctionAuthor *string           `thrift:"functionAuthor,14,optional" frugal:"14,optional,string" json:"functionAuthor,omitempty"`
	GenType        *string           `thrift:"genType,15,optional" frugal:"15,optional,string" json:"genType,omitempty"`
	GenPath        *string           `thrift:"genPath,16,optional" frugal:"16,optional,string" json:"genPath,omitempty"`
	PkColumn       *GenTableColumn   `thrift:"pkColumn,17,optional" frugal:"17,optional,GenTableColumn" json:"pkColumn,omitempty"`
	SubTable       *GenTable         `thrift:"subTable,18,optional" frugal:"18,optional,GenTable" json:"subTable,omitempty"`
	Columns        []*GenTableColumn `thrift:"columns,19,optional" frugal:"19,optional,list<GenTableColumn>" json:"columns,omitempty"`
	Options        *string           `thrift:"options,20,optional" frugal:"20,optional,string" json:"options,omitempty"`
	TreeCode       *string           `thrift:"treeCode,21,optional" frugal:"21,optional,string" json:"treeCode,omitempty"`
	TreeParentCode *string           `thrift:"treeParentCode,22,optional" frugal:"22,optional,string" json:"treeParentCode,omitempty"`
	TreeName       *string           `thrift:"treeName,23,optional" frugal:"23,optional,string" json:"treeName,omitempty"`
	ParentMenuId   *string           `thrift:"parentMenuId,24,optional" frugal:"24,optional,string" json:"parentMenuId,omitempty"`
	ParentMenuName *string           `thrift:"parentMenuName,25,optional" frugal:"25,optional,string" json:"parentMenuName,omitempty"`
}

func NewGenTable() *GenTable {
	return &GenTable{}
}

func (p *GenTable) InitDefault() {
	*p = GenTable{}
}

var GenTable_BaseInfo_DEFAULT *BaseInfo

func (p *GenTable) GetBaseInfo() (v *BaseInfo) {
	if !p.IsSetBaseInfo() {
		return GenTable_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}

func (p *GenTable) GetTableId() (v int64) {
	return p.TableId
}

var GenTable_TableName_DEFAULT string

func (p *GenTable) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return GenTable_TableName_DEFAULT
	}
	return *p.TableName
}

var GenTable_TableComment_DEFAULT string

func (p *GenTable) GetTableComment() (v string) {
	if !p.IsSetTableComment() {
		return GenTable_TableComment_DEFAULT
	}
	return *p.TableComment
}

var GenTable_SubTableName_DEFAULT string

func (p *GenTable) GetSubTableName() (v string) {
	if !p.IsSetSubTableName() {
		return GenTable_SubTableName_DEFAULT
	}
	return *p.SubTableName
}

var GenTable_SubTableFkName_DEFAULT string

func (p *GenTable) GetSubTableFkName() (v string) {
	if !p.IsSetSubTableFkName() {
		return GenTable_SubTableFkName_DEFAULT
	}
	return *p.SubTableFkName
}

var GenTable_ClassName_DEFAULT string

func (p *GenTable) GetClassName() (v string) {
	if !p.IsSetClassName() {
		return GenTable_ClassName_DEFAULT
	}
	return *p.ClassName
}

var GenTable_TplCategory_DEFAULT string

func (p *GenTable) GetTplCategory() (v string) {
	if !p.IsSetTplCategory() {
		return GenTable_TplCategory_DEFAULT
	}
	return *p.TplCategory
}

var GenTable_TplWebType_DEFAULT string

func (p *GenTable) GetTplWebType() (v string) {
	if !p.IsSetTplWebType() {
		return GenTable_TplWebType_DEFAULT
	}
	return *p.TplWebType
}

var GenTable_PackageName_DEFAULT string

func (p *GenTable) GetPackageName() (v string) {
	if !p.IsSetPackageName() {
		return GenTable_PackageName_DEFAULT
	}
	return *p.PackageName
}

var GenTable_ModuleName_DEFAULT string

func (p *GenTable) GetModuleName() (v string) {
	if !p.IsSetModuleName() {
		return GenTable_ModuleName_DEFAULT
	}
	return *p.ModuleName
}

var GenTable_BusinessName_DEFAULT string

func (p *GenTable) GetBusinessName() (v string) {
	if !p.IsSetBusinessName() {
		return GenTable_BusinessName_DEFAULT
	}
	return *p.BusinessName
}

var GenTable_FunctionName_DEFAULT string

func (p *GenTable) GetFunctionName() (v string) {
	if !p.IsSetFunctionName() {
		return GenTable_FunctionName_DEFAULT
	}
	return *p.FunctionName
}

var GenTable_FunctionAuthor_DEFAULT string

func (p *GenTable) GetFunctionAuthor() (v string) {
	if !p.IsSetFunctionAuthor() {
		return GenTable_FunctionAuthor_DEFAULT
	}
	return *p.FunctionAuthor
}

var GenTable_GenType_DEFAULT string

func (p *GenTable) GetGenType() (v string) {
	if !p.IsSetGenType() {
		return GenTable_GenType_DEFAULT
	}
	return *p.GenType
}

var GenTable_GenPath_DEFAULT string

func (p *GenTable) GetGenPath() (v string) {
	if !p.IsSetGenPath() {
		return GenTable_GenPath_DEFAULT
	}
	return *p.GenPath
}

var GenTable_PkColumn_DEFAULT *GenTableColumn

func (p *GenTable) GetPkColumn() (v *GenTableColumn) {
	if !p.IsSetPkColumn() {
		return GenTable_PkColumn_DEFAULT
	}
	return p.PkColumn
}

var GenTable_SubTable_DEFAULT *GenTable

func (p *GenTable) GetSubTable() (v *GenTable) {
	if !p.IsSetSubTable() {
		return GenTable_SubTable_DEFAULT
	}
	return p.SubTable
}

var GenTable_Columns_DEFAULT []*GenTableColumn

func (p *GenTable) GetColumns() (v []*GenTableColumn) {
	if !p.IsSetColumns() {
		return GenTable_Columns_DEFAULT
	}
	return p.Columns
}

var GenTable_Options_DEFAULT string

func (p *GenTable) GetOptions() (v string) {
	if !p.IsSetOptions() {
		return GenTable_Options_DEFAULT
	}
	return *p.Options
}

var GenTable_TreeCode_DEFAULT string

func (p *GenTable) GetTreeCode() (v string) {
	if !p.IsSetTreeCode() {
		return GenTable_TreeCode_DEFAULT
	}
	return *p.TreeCode
}

var GenTable_TreeParentCode_DEFAULT string

func (p *GenTable) GetTreeParentCode() (v string) {
	if !p.IsSetTreeParentCode() {
		return GenTable_TreeParentCode_DEFAULT
	}
	return *p.TreeParentCode
}

var GenTable_TreeName_DEFAULT string

func (p *GenTable) GetTreeName() (v string) {
	if !p.IsSetTreeName() {
		return GenTable_TreeName_DEFAULT
	}
	return *p.TreeName
}

var GenTable_ParentMenuId_DEFAULT string

func (p *GenTable) GetParentMenuId() (v string) {
	if !p.IsSetParentMenuId() {
		return GenTable_ParentMenuId_DEFAULT
	}
	return *p.ParentMenuId
}

var GenTable_ParentMenuName_DEFAULT string

func (p *GenTable) GetParentMenuName() (v string) {
	if !p.IsSetParentMenuName() {
		return GenTable_ParentMenuName_DEFAULT
	}
	return *p.ParentMenuName
}
func (p *GenTable) SetBaseInfo(val *BaseInfo) {
	p.BaseInfo = val
}
func (p *GenTable) SetTableId(val int64) {
	p.TableId = val
}
func (p *GenTable) SetTableName(val *string) {
	p.TableName = val
}
func (p *GenTable) SetTableComment(val *string) {
	p.TableComment = val
}
func (p *GenTable) SetSubTableName(val *string) {
	p.SubTableName = val
}
func (p *GenTable) SetSubTableFkName(val *string) {
	p.SubTableFkName = val
}
func (p *GenTable) SetClassName(val *string) {
	p.ClassName = val
}
func (p *GenTable) SetTplCategory(val *string) {
	p.TplCategory = val
}
func (p *GenTable) SetTplWebType(val *string) {
	p.TplWebType = val
}
func (p *GenTable) SetPackageName(val *string) {
	p.PackageName = val
}
func (p *GenTable) SetModuleName(val *string) {
	p.ModuleName = val
}
func (p *GenTable) SetBusinessName(val *string) {
	p.BusinessName = val
}
func (p *GenTable) SetFunctionName(val *string) {
	p.FunctionName = val
}
func (p *GenTable) SetFunctionAuthor(val *string) {
	p.FunctionAuthor = val
}
func (p *GenTable) SetGenType(val *string) {
	p.GenType = val
}
func (p *GenTable) SetGenPath(val *string) {
	p.GenPath = val
}
func (p *GenTable) SetPkColumn(val *GenTableColumn) {
	p.PkColumn = val
}
func (p *GenTable) SetSubTable(val *GenTable) {
	p.SubTable = val
}
func (p *GenTable) SetColumns(val []*GenTableColumn) {
	p.Columns = val
}
func (p *GenTable) SetOptions(val *string) {
	p.Options = val
}
func (p *GenTable) SetTreeCode(val *string) {
	p.TreeCode = val
}
func (p *GenTable) SetTreeParentCode(val *string) {
	p.TreeParentCode = val
}
func (p *GenTable) SetTreeName(val *string) {
	p.TreeName = val
}
func (p *GenTable) SetParentMenuId(val *string) {
	p.ParentMenuId = val
}
func (p *GenTable) SetParentMenuName(val *string) {
	p.ParentMenuName = val
}

var fieldIDToName_GenTable = map[int16]string{
	1:  "baseInfo",
	2:  "tableId",
	3:  "tableName",
	4:  "tableComment",
	5:  "subTableName",
	6:  "subTableFkName",
	7:  "className",
	8:  "tplCategory",
	9:  "tplWebType",
	10: "packageName",
	11: "moduleName",
	12: "businessName",
	13: "functionName",
	14: "functionAuthor",
	15: "genType",
	16: "genPath",
	17: "pkColumn",
	18: "subTable",
	19: "columns",
	20: "options",
	21: "treeCode",
	22: "treeParentCode",
	23: "treeName",
	24: "parentMenuId",
	25: "parentMenuName",
}

func (p *GenTable) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *GenTable) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *GenTable) IsSetTableComment() bool {
	return p.TableComment != nil
}

func (p *GenTable) IsSetSubTableName() bool {
	return p.SubTableName != nil
}

func (p *GenTable) IsSetSubTableFkName() bool {
	return p.SubTableFkName != nil
}

func (p *GenTable) IsSetClassName() bool {
	return p.ClassName != nil
}

func (p *GenTable) IsSetTplCategory() bool {
	return p.TplCategory != nil
}

func (p *GenTable) IsSetTplWebType() bool {
	return p.TplWebType != nil
}

func (p *GenTable) IsSetPackageName() bool {
	return p.PackageName != nil
}

func (p *GenTable) IsSetModuleName() bool {
	return p.ModuleName != nil
}

func (p *GenTable) IsSetBusinessName() bool {
	return p.BusinessName != nil
}

func (p *GenTable) IsSetFunctionName() bool {
	return p.FunctionName != nil
}

func (p *GenTable) IsSetFunctionAuthor() bool {
	return p.FunctionAuthor != nil
}

func (p *GenTable) IsSetGenType() bool {
	return p.GenType != nil
}

func (p *GenTable) IsSetGenPath() bool {
	return p.GenPath != nil
}

func (p *GenTable) IsSetPkColumn() bool {
	return p.PkColumn != nil
}

func (p *GenTable) IsSetSubTable() bool {
	return p.SubTable != nil
}

func (p *GenTable) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *GenTable) IsSetOptions() bool {
	return p.Options != nil
}

func (p *GenTable) IsSetTreeCode() bool {
	return p.TreeCode != nil
}

func (p *GenTable) IsSetTreeParentCode() bool {
	return p.TreeParentCode != nil
}

func (p *GenTable) IsSetTreeName() bool {
	return p.TreeName != nil
}

func (p *GenTable) IsSetParentMenuId() bool {
	return p.ParentMenuId != nil
}

func (p *GenTable) IsSetParentMenuName() bool {
	return p.ParentMenuName != nil
}

func (p *GenTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenTable) ReadField1(iprot thrift.TProtocol) error {
	p.BaseInfo = NewBaseInfo()
	if err := p.BaseInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GenTable) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TableId = v
	}
	return nil
}
func (p *GenTable) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TableName = &v
	}
	return nil
}
func (p *GenTable) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TableComment = &v
	}
	return nil
}
func (p *GenTable) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubTableName = &v
	}
	return nil
}
func (p *GenTable) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubTableFkName = &v
	}
	return nil
}
func (p *GenTable) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClassName = &v
	}
	return nil
}
func (p *GenTable) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TplCategory = &v
	}
	return nil
}
func (p *GenTable) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TplWebType = &v
	}
	return nil
}
func (p *GenTable) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PackageName = &v
	}
	return nil
}
func (p *GenTable) ReadField11(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ModuleName = &v
	}
	return nil
}
func (p *GenTable) ReadField12(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BusinessName = &v
	}
	return nil
}
func (p *GenTable) ReadField13(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FunctionName = &v
	}
	return nil
}
func (p *GenTable) ReadField14(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FunctionAuthor = &v
	}
	return nil
}
func (p *GenTable) ReadField15(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GenType = &v
	}
	return nil
}
func (p *GenTable) ReadField16(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GenPath = &v
	}
	return nil
}
func (p *GenTable) ReadField17(iprot thrift.TProtocol) error {
	p.PkColumn = NewGenTableColumn()
	if err := p.PkColumn.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GenTable) ReadField18(iprot thrift.TProtocol) error {
	p.SubTable = NewGenTable()
	if err := p.SubTable.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GenTable) ReadField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Columns = make([]*GenTableColumn, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewGenTableColumn()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Columns = append(p.Columns, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *GenTable) ReadField20(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Options = &v
	}
	return nil
}
func (p *GenTable) ReadField21(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TreeCode = &v
	}
	return nil
}
func (p *GenTable) ReadField22(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TreeParentCode = &v
	}
	return nil
}
func (p *GenTable) ReadField23(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TreeName = &v
	}
	return nil
}
func (p *GenTable) ReadField24(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ParentMenuId = &v
	}
	return nil
}
func (p *GenTable) ReadField25(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ParentMenuName = &v
	}
	return nil
}

func (p *GenTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenTable) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseInfo", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenTable) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TableId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GenTable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("tableName", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GenTable) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableComment() {
		if err = oprot.WriteFieldBegin("tableComment", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableComment); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GenTable) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTableName() {
		if err = oprot.WriteFieldBegin("subTableName", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SubTableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GenTable) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTableFkName() {
		if err = oprot.WriteFieldBegin("subTableFkName", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SubTableFkName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GenTable) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetClassName() {
		if err = oprot.WriteFieldBegin("className", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClassName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GenTable) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTplCategory() {
		if err = oprot.WriteFieldBegin("tplCategory", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TplCategory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GenTable) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTplWebType() {
		if err = oprot.WriteFieldBegin("tplWebType", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TplWebType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GenTable) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPackageName() {
		if err = oprot.WriteFieldBegin("packageName", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PackageName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GenTable) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetModuleName() {
		if err = oprot.WriteFieldBegin("moduleName", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ModuleName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GenTable) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessName() {
		if err = oprot.WriteFieldBegin("businessName", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BusinessName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GenTable) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionName() {
		if err = oprot.WriteFieldBegin("functionName", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FunctionName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GenTable) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionAuthor() {
		if err = oprot.WriteFieldBegin("functionAuthor", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FunctionAuthor); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GenTable) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetGenType() {
		if err = oprot.WriteFieldBegin("genType", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.GenType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *GenTable) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetGenPath() {
		if err = oprot.WriteFieldBegin("genPath", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.GenPath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *GenTable) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetPkColumn() {
		if err = oprot.WriteFieldBegin("pkColumn", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PkColumn.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *GenTable) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTable() {
		if err = oprot.WriteFieldBegin("subTable", thrift.STRUCT, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SubTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *GenTable) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err = oprot.WriteFieldBegin("columns", thrift.LIST, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return err
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *GenTable) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptions() {
		if err = oprot.WriteFieldBegin("options", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Options); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *GenTable) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetTreeCode() {
		if err = oprot.WriteFieldBegin("treeCode", thrift.STRING, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TreeCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *GenTable) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetTreeParentCode() {
		if err = oprot.WriteFieldBegin("treeParentCode", thrift.STRING, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TreeParentCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *GenTable) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetTreeName() {
		if err = oprot.WriteFieldBegin("treeName", thrift.STRING, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TreeName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *GenTable) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentMenuId() {
		if err = oprot.WriteFieldBegin("parentMenuId", thrift.STRING, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ParentMenuId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *GenTable) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentMenuName() {
		if err = oprot.WriteFieldBegin("parentMenuName", thrift.STRING, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ParentMenuName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *GenTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenTable(%+v)", *p)

}

func (p *GenTable) DeepEqual(ano *GenTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseInfo) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field4DeepEqual(ano.TableComment) {
		return false
	}
	if !p.Field5DeepEqual(ano.SubTableName) {
		return false
	}
	if !p.Field6DeepEqual(ano.SubTableFkName) {
		return false
	}
	if !p.Field7DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field8DeepEqual(ano.TplCategory) {
		return false
	}
	if !p.Field9DeepEqual(ano.TplWebType) {
		return false
	}
	if !p.Field10DeepEqual(ano.PackageName) {
		return false
	}
	if !p.Field11DeepEqual(ano.ModuleName) {
		return false
	}
	if !p.Field12DeepEqual(ano.BusinessName) {
		return false
	}
	if !p.Field13DeepEqual(ano.FunctionName) {
		return false
	}
	if !p.Field14DeepEqual(ano.FunctionAuthor) {
		return false
	}
	if !p.Field15DeepEqual(ano.GenType) {
		return false
	}
	if !p.Field16DeepEqual(ano.GenPath) {
		return false
	}
	if !p.Field17DeepEqual(ano.PkColumn) {
		return false
	}
	if !p.Field18DeepEqual(ano.SubTable) {
		return false
	}
	if !p.Field19DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field20DeepEqual(ano.Options) {
		return false
	}
	if !p.Field21DeepEqual(ano.TreeCode) {
		return false
	}
	if !p.Field22DeepEqual(ano.TreeParentCode) {
		return false
	}
	if !p.Field23DeepEqual(ano.TreeName) {
		return false
	}
	if !p.Field24DeepEqual(ano.ParentMenuId) {
		return false
	}
	if !p.Field25DeepEqual(ano.ParentMenuName) {
		return false
	}
	return true
}

func (p *GenTable) Field1DeepEqual(src *BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GenTable) Field2DeepEqual(src int64) bool {

	if p.TableId != src {
		return false
	}
	return true
}
func (p *GenTable) Field3DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field4DeepEqual(src *string) bool {

	if p.TableComment == src {
		return true
	} else if p.TableComment == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableComment, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field5DeepEqual(src *string) bool {

	if p.SubTableName == src {
		return true
	} else if p.SubTableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SubTableName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field6DeepEqual(src *string) bool {

	if p.SubTableFkName == src {
		return true
	} else if p.SubTableFkName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SubTableFkName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field7DeepEqual(src *string) bool {

	if p.ClassName == src {
		return true
	} else if p.ClassName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClassName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field8DeepEqual(src *string) bool {

	if p.TplCategory == src {
		return true
	} else if p.TplCategory == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TplCategory, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field9DeepEqual(src *string) bool {

	if p.TplWebType == src {
		return true
	} else if p.TplWebType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TplWebType, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field10DeepEqual(src *string) bool {

	if p.PackageName == src {
		return true
	} else if p.PackageName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PackageName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field11DeepEqual(src *string) bool {

	if p.ModuleName == src {
		return true
	} else if p.ModuleName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ModuleName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field12DeepEqual(src *string) bool {

	if p.BusinessName == src {
		return true
	} else if p.BusinessName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BusinessName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field13DeepEqual(src *string) bool {

	if p.FunctionName == src {
		return true
	} else if p.FunctionName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FunctionName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field14DeepEqual(src *string) bool {

	if p.FunctionAuthor == src {
		return true
	} else if p.FunctionAuthor == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FunctionAuthor, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field15DeepEqual(src *string) bool {

	if p.GenType == src {
		return true
	} else if p.GenType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.GenType, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field16DeepEqual(src *string) bool {

	if p.GenPath == src {
		return true
	} else if p.GenPath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.GenPath, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field17DeepEqual(src *GenTableColumn) bool {

	if !p.PkColumn.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GenTable) Field18DeepEqual(src *GenTable) bool {

	if !p.SubTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GenTable) Field19DeepEqual(src []*GenTableColumn) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GenTable) Field20DeepEqual(src *string) bool {

	if p.Options == src {
		return true
	} else if p.Options == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Options, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field21DeepEqual(src *string) bool {

	if p.TreeCode == src {
		return true
	} else if p.TreeCode == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TreeCode, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field22DeepEqual(src *string) bool {

	if p.TreeParentCode == src {
		return true
	} else if p.TreeParentCode == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TreeParentCode, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field23DeepEqual(src *string) bool {

	if p.TreeName == src {
		return true
	} else if p.TreeName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TreeName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field24DeepEqual(src *string) bool {

	if p.ParentMenuId == src {
		return true
	} else if p.ParentMenuId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ParentMenuId, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTable) Field25DeepEqual(src *string) bool {

	if p.ParentMenuName == src {
		return true
	} else if p.ParentMenuName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ParentMenuName, *src) != 0 {
		return false
	}
	return true
}

type GenTableColumn struct {
	BaseInfo      *BaseInfo `thrift:"baseInfo,1" frugal:"1,default,BaseInfo" json:"baseInfo"`
	ColumnId      int64     `thrift:"columnId,2" frugal:"2,default,i64" json:"columnId"`
	TableId       *int64    `thrift:"tableId,3,optional" frugal:"3,optional,i64" json:"tableId,omitempty"`
	ColumnName    *string   `thrift:"columnName,4,optional" frugal:"4,optional,string" json:"columnName,omitempty"`
	ColumnComment *string   `thrift:"columnComment,5,optional" frugal:"5,optional,string" json:"columnComment,omitempty"`
	ColumnType    *string   `thrift:"columnType,6,optional" frugal:"6,optional,string" json:"columnType,omitempty"`
	GoType        *string   `thrift:"GoType,7,optional" frugal:"7,optional,string" json:"GoType,omitempty"`
	GoField       *string   `thrift:"GoField,8,optional" frugal:"8,optional,string" json:"GoField,omitempty"`
	IsPk          *string   `thrift:"isPk,9,optional" frugal:"9,optional,string" json:"isPk,omitempty"`
	IsIncrement   *string   `thrift:"isIncrement,10,optional" frugal:"10,optional,string" json:"isIncrement,omitempty"`
	IsRequired    *string   `thrift:"isRequired,11,optional" frugal:"11,optional,string" json:"isRequired,omitempty"`
	IsInsert      *string   `thrift:"isInsert,12,optional" frugal:"12,optional,string" json:"isInsert,omitempty"`
	IsEdit        *string   `thrift:"isEdit,13,optional" frugal:"13,optional,string" json:"isEdit,omitempty"`
	IsList        *string   `thrift:"isList,14,optional" frugal:"14,optional,string" json:"isList,omitempty"`
	IsQuery       *string   `thrift:"isQuery,15,optional" frugal:"15,optional,string" json:"isQuery,omitempty"`
	QueryType     *string   `thrift:"queryType,16,optional" frugal:"16,optional,string" json:"queryType,omitempty"`
	HtmlType      *string   `thrift:"htmlType,17,optional" frugal:"17,optional,string" json:"htmlType,omitempty"`
	DictType      *string   `thrift:"dictType,18,optional" frugal:"18,optional,string" json:"dictType,omitempty"`
	Sort          *int64    `thrift:"sort,19,optional" frugal:"19,optional,i64" json:"sort,omitempty"`
}

func NewGenTableColumn() *GenTableColumn {
	return &GenTableColumn{}
}

func (p *GenTableColumn) InitDefault() {
	*p = GenTableColumn{}
}

var GenTableColumn_BaseInfo_DEFAULT *BaseInfo

func (p *GenTableColumn) GetBaseInfo() (v *BaseInfo) {
	if !p.IsSetBaseInfo() {
		return GenTableColumn_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}

func (p *GenTableColumn) GetColumnId() (v int64) {
	return p.ColumnId
}

var GenTableColumn_TableId_DEFAULT int64

func (p *GenTableColumn) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return GenTableColumn_TableId_DEFAULT
	}
	return *p.TableId
}

var GenTableColumn_ColumnName_DEFAULT string

func (p *GenTableColumn) GetColumnName() (v string) {
	if !p.IsSetColumnName() {
		return GenTableColumn_ColumnName_DEFAULT
	}
	return *p.ColumnName
}

var GenTableColumn_ColumnComment_DEFAULT string

func (p *GenTableColumn) GetColumnComment() (v string) {
	if !p.IsSetColumnComment() {
		return GenTableColumn_ColumnComment_DEFAULT
	}
	return *p.ColumnComment
}

var GenTableColumn_ColumnType_DEFAULT string

func (p *GenTableColumn) GetColumnType() (v string) {
	if !p.IsSetColumnType() {
		return GenTableColumn_ColumnType_DEFAULT
	}
	return *p.ColumnType
}

var GenTableColumn_GoType_DEFAULT string

func (p *GenTableColumn) GetGoType() (v string) {
	if !p.IsSetGoType() {
		return GenTableColumn_GoType_DEFAULT
	}
	return *p.GoType
}

var GenTableColumn_GoField_DEFAULT string

func (p *GenTableColumn) GetGoField() (v string) {
	if !p.IsSetGoField() {
		return GenTableColumn_GoField_DEFAULT
	}
	return *p.GoField
}

var GenTableColumn_IsPk_DEFAULT string

func (p *GenTableColumn) GetIsPk() (v string) {
	if !p.IsSetIsPk() {
		return GenTableColumn_IsPk_DEFAULT
	}
	return *p.IsPk
}

var GenTableColumn_IsIncrement_DEFAULT string

func (p *GenTableColumn) GetIsIncrement() (v string) {
	if !p.IsSetIsIncrement() {
		return GenTableColumn_IsIncrement_DEFAULT
	}
	return *p.IsIncrement
}

var GenTableColumn_IsRequired_DEFAULT string

func (p *GenTableColumn) GetIsRequired() (v string) {
	if !p.IsSetIsRequired() {
		return GenTableColumn_IsRequired_DEFAULT
	}
	return *p.IsRequired
}

var GenTableColumn_IsInsert_DEFAULT string

func (p *GenTableColumn) GetIsInsert() (v string) {
	if !p.IsSetIsInsert() {
		return GenTableColumn_IsInsert_DEFAULT
	}
	return *p.IsInsert
}

var GenTableColumn_IsEdit_DEFAULT string

func (p *GenTableColumn) GetIsEdit() (v string) {
	if !p.IsSetIsEdit() {
		return GenTableColumn_IsEdit_DEFAULT
	}
	return *p.IsEdit
}

var GenTableColumn_IsList_DEFAULT string

func (p *GenTableColumn) GetIsList() (v string) {
	if !p.IsSetIsList() {
		return GenTableColumn_IsList_DEFAULT
	}
	return *p.IsList
}

var GenTableColumn_IsQuery_DEFAULT string

func (p *GenTableColumn) GetIsQuery() (v string) {
	if !p.IsSetIsQuery() {
		return GenTableColumn_IsQuery_DEFAULT
	}
	return *p.IsQuery
}

var GenTableColumn_QueryType_DEFAULT string

func (p *GenTableColumn) GetQueryType() (v string) {
	if !p.IsSetQueryType() {
		return GenTableColumn_QueryType_DEFAULT
	}
	return *p.QueryType
}

var GenTableColumn_HtmlType_DEFAULT string

func (p *GenTableColumn) GetHtmlType() (v string) {
	if !p.IsSetHtmlType() {
		return GenTableColumn_HtmlType_DEFAULT
	}
	return *p.HtmlType
}

var GenTableColumn_DictType_DEFAULT string

func (p *GenTableColumn) GetDictType() (v string) {
	if !p.IsSetDictType() {
		return GenTableColumn_DictType_DEFAULT
	}
	return *p.DictType
}

var GenTableColumn_Sort_DEFAULT int64

func (p *GenTableColumn) GetSort() (v int64) {
	if !p.IsSetSort() {
		return GenTableColumn_Sort_DEFAULT
	}
	return *p.Sort
}
func (p *GenTableColumn) SetBaseInfo(val *BaseInfo) {
	p.BaseInfo = val
}
func (p *GenTableColumn) SetColumnId(val int64) {
	p.ColumnId = val
}
func (p *GenTableColumn) SetTableId(val *int64) {
	p.TableId = val
}
func (p *GenTableColumn) SetColumnName(val *string) {
	p.ColumnName = val
}
func (p *GenTableColumn) SetColumnComment(val *string) {
	p.ColumnComment = val
}
func (p *GenTableColumn) SetColumnType(val *string) {
	p.ColumnType = val
}
func (p *GenTableColumn) SetGoType(val *string) {
	p.GoType = val
}
func (p *GenTableColumn) SetGoField(val *string) {
	p.GoField = val
}
func (p *GenTableColumn) SetIsPk(val *string) {
	p.IsPk = val
}
func (p *GenTableColumn) SetIsIncrement(val *string) {
	p.IsIncrement = val
}
func (p *GenTableColumn) SetIsRequired(val *string) {
	p.IsRequired = val
}
func (p *GenTableColumn) SetIsInsert(val *string) {
	p.IsInsert = val
}
func (p *GenTableColumn) SetIsEdit(val *string) {
	p.IsEdit = val
}
func (p *GenTableColumn) SetIsList(val *string) {
	p.IsList = val
}
func (p *GenTableColumn) SetIsQuery(val *string) {
	p.IsQuery = val
}
func (p *GenTableColumn) SetQueryType(val *string) {
	p.QueryType = val
}
func (p *GenTableColumn) SetHtmlType(val *string) {
	p.HtmlType = val
}
func (p *GenTableColumn) SetDictType(val *string) {
	p.DictType = val
}
func (p *GenTableColumn) SetSort(val *int64) {
	p.Sort = val
}

var fieldIDToName_GenTableColumn = map[int16]string{
	1:  "baseInfo",
	2:  "columnId",
	3:  "tableId",
	4:  "columnName",
	5:  "columnComment",
	6:  "columnType",
	7:  "GoType",
	8:  "GoField",
	9:  "isPk",
	10: "isIncrement",
	11: "isRequired",
	12: "isInsert",
	13: "isEdit",
	14: "isList",
	15: "isQuery",
	16: "queryType",
	17: "htmlType",
	18: "dictType",
	19: "sort",
}

func (p *GenTableColumn) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *GenTableColumn) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *GenTableColumn) IsSetColumnName() bool {
	return p.ColumnName != nil
}

func (p *GenTableColumn) IsSetColumnComment() bool {
	return p.ColumnComment != nil
}

func (p *GenTableColumn) IsSetColumnType() bool {
	return p.ColumnType != nil
}

func (p *GenTableColumn) IsSetGoType() bool {
	return p.GoType != nil
}

func (p *GenTableColumn) IsSetGoField() bool {
	return p.GoField != nil
}

func (p *GenTableColumn) IsSetIsPk() bool {
	return p.IsPk != nil
}

func (p *GenTableColumn) IsSetIsIncrement() bool {
	return p.IsIncrement != nil
}

func (p *GenTableColumn) IsSetIsRequired() bool {
	return p.IsRequired != nil
}

func (p *GenTableColumn) IsSetIsInsert() bool {
	return p.IsInsert != nil
}

func (p *GenTableColumn) IsSetIsEdit() bool {
	return p.IsEdit != nil
}

func (p *GenTableColumn) IsSetIsList() bool {
	return p.IsList != nil
}

func (p *GenTableColumn) IsSetIsQuery() bool {
	return p.IsQuery != nil
}

func (p *GenTableColumn) IsSetQueryType() bool {
	return p.QueryType != nil
}

func (p *GenTableColumn) IsSetHtmlType() bool {
	return p.HtmlType != nil
}

func (p *GenTableColumn) IsSetDictType() bool {
	return p.DictType != nil
}

func (p *GenTableColumn) IsSetSort() bool {
	return p.Sort != nil
}

func (p *GenTableColumn) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenTableColumn[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenTableColumn) ReadField1(iprot thrift.TProtocol) error {
	p.BaseInfo = NewBaseInfo()
	if err := p.BaseInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GenTableColumn) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ColumnId = v
	}
	return nil
}
func (p *GenTableColumn) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TableId = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ColumnName = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ColumnComment = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ColumnType = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GoType = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GoField = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IsPk = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IsIncrement = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField11(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IsRequired = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField12(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IsInsert = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField13(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IsEdit = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField14(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IsList = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField15(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IsQuery = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField16(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.QueryType = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField17(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.HtmlType = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField18(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DictType = &v
	}
	return nil
}
func (p *GenTableColumn) ReadField19(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Sort = &v
	}
	return nil
}

func (p *GenTableColumn) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenTableColumn"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenTableColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseInfo", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenTableColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ColumnId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GenTableColumn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("tableId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GenTableColumn) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnName() {
		if err = oprot.WriteFieldBegin("columnName", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GenTableColumn) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnComment() {
		if err = oprot.WriteFieldBegin("columnComment", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnComment); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GenTableColumn) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnType() {
		if err = oprot.WriteFieldBegin("columnType", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GenTableColumn) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetGoType() {
		if err = oprot.WriteFieldBegin("GoType", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.GoType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GenTableColumn) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetGoField() {
		if err = oprot.WriteFieldBegin("GoField", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.GoField); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GenTableColumn) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsPk() {
		if err = oprot.WriteFieldBegin("isPk", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IsPk); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GenTableColumn) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsIncrement() {
		if err = oprot.WriteFieldBegin("isIncrement", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IsIncrement); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GenTableColumn) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsRequired() {
		if err = oprot.WriteFieldBegin("isRequired", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IsRequired); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GenTableColumn) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInsert() {
		if err = oprot.WriteFieldBegin("isInsert", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IsInsert); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GenTableColumn) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsEdit() {
		if err = oprot.WriteFieldBegin("isEdit", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IsEdit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GenTableColumn) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsList() {
		if err = oprot.WriteFieldBegin("isList", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IsList); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GenTableColumn) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsQuery() {
		if err = oprot.WriteFieldBegin("isQuery", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IsQuery); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *GenTableColumn) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryType() {
		if err = oprot.WriteFieldBegin("queryType", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.QueryType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *GenTableColumn) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetHtmlType() {
		if err = oprot.WriteFieldBegin("htmlType", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HtmlType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *GenTableColumn) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetDictType() {
		if err = oprot.WriteFieldBegin("dictType", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DictType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *GenTableColumn) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetSort() {
		if err = oprot.WriteFieldBegin("sort", thrift.I64, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Sort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *GenTableColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenTableColumn(%+v)", *p)

}

func (p *GenTableColumn) DeepEqual(ano *GenTableColumn) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseInfo) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field4DeepEqual(ano.ColumnName) {
		return false
	}
	if !p.Field5DeepEqual(ano.ColumnComment) {
		return false
	}
	if !p.Field6DeepEqual(ano.ColumnType) {
		return false
	}
	if !p.Field7DeepEqual(ano.GoType) {
		return false
	}
	if !p.Field8DeepEqual(ano.GoField) {
		return false
	}
	if !p.Field9DeepEqual(ano.IsPk) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsIncrement) {
		return false
	}
	if !p.Field11DeepEqual(ano.IsRequired) {
		return false
	}
	if !p.Field12DeepEqual(ano.IsInsert) {
		return false
	}
	if !p.Field13DeepEqual(ano.IsEdit) {
		return false
	}
	if !p.Field14DeepEqual(ano.IsList) {
		return false
	}
	if !p.Field15DeepEqual(ano.IsQuery) {
		return false
	}
	if !p.Field16DeepEqual(ano.QueryType) {
		return false
	}
	if !p.Field17DeepEqual(ano.HtmlType) {
		return false
	}
	if !p.Field18DeepEqual(ano.DictType) {
		return false
	}
	if !p.Field19DeepEqual(ano.Sort) {
		return false
	}
	return true
}

func (p *GenTableColumn) Field1DeepEqual(src *BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GenTableColumn) Field2DeepEqual(src int64) bool {

	if p.ColumnId != src {
		return false
	}
	return true
}
func (p *GenTableColumn) Field3DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *GenTableColumn) Field4DeepEqual(src *string) bool {

	if p.ColumnName == src {
		return true
	} else if p.ColumnName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnName, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field5DeepEqual(src *string) bool {

	if p.ColumnComment == src {
		return true
	} else if p.ColumnComment == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnComment, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field6DeepEqual(src *string) bool {

	if p.ColumnType == src {
		return true
	} else if p.ColumnType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnType, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field7DeepEqual(src *string) bool {

	if p.GoType == src {
		return true
	} else if p.GoType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.GoType, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field8DeepEqual(src *string) bool {

	if p.GoField == src {
		return true
	} else if p.GoField == nil || src == nil {
		return false
	}
	if strings.Compare(*p.GoField, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field9DeepEqual(src *string) bool {

	if p.IsPk == src {
		return true
	} else if p.IsPk == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IsPk, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field10DeepEqual(src *string) bool {

	if p.IsIncrement == src {
		return true
	} else if p.IsIncrement == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IsIncrement, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field11DeepEqual(src *string) bool {

	if p.IsRequired == src {
		return true
	} else if p.IsRequired == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IsRequired, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field12DeepEqual(src *string) bool {

	if p.IsInsert == src {
		return true
	} else if p.IsInsert == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IsInsert, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field13DeepEqual(src *string) bool {

	if p.IsEdit == src {
		return true
	} else if p.IsEdit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IsEdit, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field14DeepEqual(src *string) bool {

	if p.IsList == src {
		return true
	} else if p.IsList == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IsList, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field15DeepEqual(src *string) bool {

	if p.IsQuery == src {
		return true
	} else if p.IsQuery == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IsQuery, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field16DeepEqual(src *string) bool {

	if p.QueryType == src {
		return true
	} else if p.QueryType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.QueryType, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field17DeepEqual(src *string) bool {

	if p.HtmlType == src {
		return true
	} else if p.HtmlType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HtmlType, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field18DeepEqual(src *string) bool {

	if p.DictType == src {
		return true
	} else if p.DictType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DictType, *src) != 0 {
		return false
	}
	return true
}
func (p *GenTableColumn) Field19DeepEqual(src *int64) bool {

	if p.Sort == src {
		return true
	} else if p.Sort == nil || src == nil {
		return false
	}
	if *p.Sort != *src {
		return false
	}
	return true
}

type ListGenTablesRequest struct {
	PageInfo  *PageInfo  `thrift:"pageInfo,1" frugal:"1,default,PageInfo" json:"pageInfo"`
	DateRange *DateRange `thrift:"dateRange,2" frugal:"2,default,DateRange" json:"dateRange"`
	GenTable  *GenTable  `thrift:"genTable,3" frugal:"3,default,GenTable" json:"genTable"`
}

func NewListGenTablesRequest() *ListGenTablesRequest {
	return &ListGenTablesRequest{}
}

func (p *ListGenTablesRequest) InitDefault() {
	*p = ListGenTablesRequest{}
}

var ListGenTablesRequest_PageInfo_DEFAULT *PageInfo

func (p *ListGenTablesRequest) GetPageInfo() (v *PageInfo) {
	if !p.IsSetPageInfo() {
		return ListGenTablesRequest_PageInfo_DEFAULT
	}
	return p.PageInfo
}

var ListGenTablesRequest_DateRange_DEFAULT *DateRange

func (p *ListGenTablesRequest) GetDateRange() (v *DateRange) {
	if !p.IsSetDateRange() {
		return ListGenTablesRequest_DateRange_DEFAULT
	}
	return p.DateRange
}

var ListGenTablesRequest_GenTable_DEFAULT *GenTable

func (p *ListGenTablesRequest) GetGenTable() (v *GenTable) {
	if !p.IsSetGenTable() {
		return ListGenTablesRequest_GenTable_DEFAULT
	}
	return p.GenTable
}
func (p *ListGenTablesRequest) SetPageInfo(val *PageInfo) {
	p.PageInfo = val
}
func (p *ListGenTablesRequest) SetDateRange(val *DateRange) {
	p.DateRange = val
}
func (p *ListGenTablesRequest) SetGenTable(val *GenTable) {
	p.GenTable = val
}

var fieldIDToName_ListGenTablesRequest = map[int16]string{
	1: "pageInfo",
	2: "dateRange",
	3: "genTable",
}

func (p *ListGenTablesRequest) IsSetPageInfo() bool {
	return p.PageInfo != nil
}

func (p *ListGenTablesRequest) IsSetDateRange() bool {
	return p.DateRange != nil
}

func (p *ListGenTablesRequest) IsSetGenTable() bool {
	return p.GenTable != nil
}

func (p *ListGenTablesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListGenTablesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListGenTablesRequest) ReadField1(iprot thrift.TProtocol) error {
	p.PageInfo = NewPageInfo()
	if err := p.PageInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ListGenTablesRequest) ReadField2(iprot thrift.TProtocol) error {
	p.DateRange = NewDateRange()
	if err := p.DateRange.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ListGenTablesRequest) ReadField3(iprot thrift.TProtocol) error {
	p.GenTable = NewGenTable()
	if err := p.GenTable.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListGenTablesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListGenTablesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListGenTablesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageInfo", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PageInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListGenTablesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateRange", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.DateRange.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListGenTablesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("genTable", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GenTable.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListGenTablesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListGenTablesRequest(%+v)", *p)

}

func (p *ListGenTablesRequest) DeepEqual(ano *ListGenTablesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageInfo) {
		return false
	}
	if !p.Field2DeepEqual(ano.DateRange) {
		return false
	}
	if !p.Field3DeepEqual(ano.GenTable) {
		return false
	}
	return true
}

func (p *ListGenTablesRequest) Field1DeepEqual(src *PageInfo) bool {

	if !p.PageInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListGenTablesRequest) Field2DeepEqual(src *DateRange) bool {

	if !p.DateRange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListGenTablesRequest) Field3DeepEqual(src *GenTable) bool {

	if !p.GenTable.DeepEqual(src) {
		return false
	}
	return true
}

type ListGenTablesResponse struct {
	BaseResp *BaseResp   `thrift:"baseResp,1" frugal:"1,default,BaseResp" json:"baseResp"`
	Total    int64       `thrift:"total,2" frugal:"2,default,i64" json:"total"`
	Rows     []*GenTable `thrift:"rows,3" frugal:"3,default,list<GenTable>" json:"rows"`
}

func NewListGenTablesResponse() *ListGenTablesResponse {
	return &ListGenTablesResponse{}
}

func (p *ListGenTablesResponse) InitDefault() {
	*p = ListGenTablesResponse{}
}

var ListGenTablesResponse_BaseResp_DEFAULT *BaseResp

func (p *ListGenTablesResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return ListGenTablesResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *ListGenTablesResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListGenTablesResponse) GetRows() (v []*GenTable) {
	return p.Rows
}
func (p *ListGenTablesResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}
func (p *ListGenTablesResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListGenTablesResponse) SetRows(val []*GenTable) {
	p.Rows = val
}

var fieldIDToName_ListGenTablesResponse = map[int16]string{
	1: "baseResp",
	2: "total",
	3: "rows",
}

func (p *ListGenTablesResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListGenTablesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListGenTablesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListGenTablesResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ListGenTablesResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}
func (p *ListGenTablesResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Rows = make([]*GenTable, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewGenTable()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Rows = append(p.Rows, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListGenTablesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListGenTablesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListGenTablesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListGenTablesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListGenTablesResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rows", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
		return err
	}
	for _, v := range p.Rows {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListGenTablesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListGenTablesResponse(%+v)", *p)

}

func (p *ListGenTablesResponse) DeepEqual(ano *ListGenTablesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field3DeepEqual(ano.Rows) {
		return false
	}
	return true
}

func (p *ListGenTablesResponse) Field1DeepEqual(src *BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListGenTablesResponse) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListGenTablesResponse) Field3DeepEqual(src []*GenTable) bool {

	if len(p.Rows) != len(src) {
		return false
	}
	for i, v := range p.Rows {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetInfoResponse struct {
	BaseResp *BaseResp         `thrift:"baseResp,1" frugal:"1,default,BaseResp" json:"baseResp"`
	Info     *GenTable         `thrift:"info,2" frugal:"2,default,GenTable" json:"info"`
	Rows     []*GenTableColumn `thrift:"rows,3" frugal:"3,default,list<GenTableColumn>" json:"rows"`
	Tables   []*GenTable       `thrift:"tables,4" frugal:"4,default,list<GenTable>" json:"tables"`
}

func NewGetInfoResponse() *GetInfoResponse {
	return &GetInfoResponse{}
}

func (p *GetInfoResponse) InitDefault() {
	*p = GetInfoResponse{}
}

var GetInfoResponse_BaseResp_DEFAULT *BaseResp

func (p *GetInfoResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return GetInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var GetInfoResponse_Info_DEFAULT *GenTable

func (p *GetInfoResponse) GetInfo() (v *GenTable) {
	if !p.IsSetInfo() {
		return GetInfoResponse_Info_DEFAULT
	}
	return p.Info
}

func (p *GetInfoResponse) GetRows() (v []*GenTableColumn) {
	return p.Rows
}

func (p *GetInfoResponse) GetTables() (v []*GenTable) {
	return p.Tables
}
func (p *GetInfoResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}
func (p *GetInfoResponse) SetInfo(val *GenTable) {
	p.Info = val
}
func (p *GetInfoResponse) SetRows(val []*GenTableColumn) {
	p.Rows = val
}
func (p *GetInfoResponse) SetTables(val []*GenTable) {
	p.Tables = val
}

var fieldIDToName_GetInfoResponse = map[int16]string{
	1: "baseResp",
	2: "info",
	3: "rows",
	4: "tables",
}

func (p *GetInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetInfoResponse) IsSetInfo() bool {
	return p.Info != nil
}

func (p *GetInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GetInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Info = NewGenTable()
	if err := p.Info.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GetInfoResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Rows = make([]*GenTableColumn, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewGenTableColumn()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Rows = append(p.Rows, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *GetInfoResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Tables = make([]*GenTable, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewGenTable()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Tables = append(p.Tables, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetInfoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("info", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Info.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetInfoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rows", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
		return err
	}
	for _, v := range p.Rows {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetInfoResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tables", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tables)); err != nil {
		return err
	}
	for _, v := range p.Tables {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInfoResponse(%+v)", *p)

}

func (p *GetInfoResponse) DeepEqual(ano *GetInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Info) {
		return false
	}
	if !p.Field3DeepEqual(ano.Rows) {
		return false
	}
	if !p.Field4DeepEqual(ano.Tables) {
		return false
	}
	return true
}

func (p *GetInfoResponse) Field1DeepEqual(src *BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetInfoResponse) Field2DeepEqual(src *GenTable) bool {

	if !p.Info.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetInfoResponse) Field3DeepEqual(src []*GenTableColumn) bool {

	if len(p.Rows) != len(src) {
		return false
	}
	for i, v := range p.Rows {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetInfoResponse) Field4DeepEqual(src []*GenTable) bool {

	if len(p.Tables) != len(src) {
		return false
	}
	for i, v := range p.Tables {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DataListRequest struct {
	GenTable *GenTable `thrift:"genTable,1" frugal:"1,default,GenTable" json:"genTable"`
}

func NewDataListRequest() *DataListRequest {
	return &DataListRequest{}
}

func (p *DataListRequest) InitDefault() {
	*p = DataListRequest{}
}

var DataListRequest_GenTable_DEFAULT *GenTable

func (p *DataListRequest) GetGenTable() (v *GenTable) {
	if !p.IsSetGenTable() {
		return DataListRequest_GenTable_DEFAULT
	}
	return p.GenTable
}
func (p *DataListRequest) SetGenTable(val *GenTable) {
	p.GenTable = val
}

var fieldIDToName_DataListRequest = map[int16]string{
	1: "genTable",
}

func (p *DataListRequest) IsSetGenTable() bool {
	return p.GenTable != nil
}

func (p *DataListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DataListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DataListRequest) ReadField1(iprot thrift.TProtocol) error {
	p.GenTable = NewGenTable()
	if err := p.GenTable.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DataListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DataListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DataListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("genTable", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GenTable.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DataListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataListRequest(%+v)", *p)

}

func (p *DataListRequest) DeepEqual(ano *DataListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GenTable) {
		return false
	}
	return true
}

func (p *DataListRequest) Field1DeepEqual(src *GenTable) bool {

	if !p.GenTable.DeepEqual(src) {
		return false
	}
	return true
}

type EditSaveRequest struct {
	GenTable *GenTable `thrift:"genTable,1" frugal:"1,default,GenTable" json:"genTable"`
}

func NewEditSaveRequest() *EditSaveRequest {
	return &EditSaveRequest{}
}

func (p *EditSaveRequest) InitDefault() {
	*p = EditSaveRequest{}
}

var EditSaveRequest_GenTable_DEFAULT *GenTable

func (p *EditSaveRequest) GetGenTable() (v *GenTable) {
	if !p.IsSetGenTable() {
		return EditSaveRequest_GenTable_DEFAULT
	}
	return p.GenTable
}
func (p *EditSaveRequest) SetGenTable(val *GenTable) {
	p.GenTable = val
}

var fieldIDToName_EditSaveRequest = map[int16]string{
	1: "genTable",
}

func (p *EditSaveRequest) IsSetGenTable() bool {
	return p.GenTable != nil
}

func (p *EditSaveRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EditSaveRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EditSaveRequest) ReadField1(iprot thrift.TProtocol) error {
	p.GenTable = NewGenTable()
	if err := p.GenTable.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EditSaveRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EditSaveRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EditSaveRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("genTable", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GenTable.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EditSaveRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EditSaveRequest(%+v)", *p)

}

func (p *EditSaveRequest) DeepEqual(ano *EditSaveRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GenTable) {
		return false
	}
	return true
}

func (p *EditSaveRequest) Field1DeepEqual(src *GenTable) bool {

	if !p.GenTable.DeepEqual(src) {
		return false
	}
	return true
}

type RemoveRequest struct {
	TableIds []int64 `thrift:"tableIds,1" frugal:"1,default,list<i64>" json:"tableIds"`
}

func NewRemoveRequest() *RemoveRequest {
	return &RemoveRequest{}
}

func (p *RemoveRequest) InitDefault() {
	*p = RemoveRequest{}
}

func (p *RemoveRequest) GetTableIds() (v []int64) {
	return p.TableIds
}
func (p *RemoveRequest) SetTableIds(val []int64) {
	p.TableIds = val
}

var fieldIDToName_RemoveRequest = map[int16]string{
	1: "tableIds",
}

func (p *RemoveRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RemoveRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RemoveRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.TableIds = make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.TableIds = append(p.TableIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *RemoveRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RemoveRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RemoveRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableIds", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TableIds)); err != nil {
		return err
	}
	for _, v := range p.TableIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RemoveRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveRequest(%+v)", *p)

}

func (p *RemoveRequest) DeepEqual(ano *RemoveRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableIds) {
		return false
	}
	return true
}

func (p *RemoveRequest) Field1DeepEqual(src []int64) bool {

	if len(p.TableIds) != len(src) {
		return false
	}
	for i, v := range p.TableIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type PreviewResponse struct {
	BaseResp *BaseResp         `thrift:"baseResp,1" frugal:"1,default,BaseResp" json:"baseResp"`
	Data     map[string]string `thrift:"data,2" frugal:"2,default,map<string:string>" json:"data"`
}

func NewPreviewResponse() *PreviewResponse {
	return &PreviewResponse{}
}

func (p *PreviewResponse) InitDefault() {
	*p = PreviewResponse{}
}

var PreviewResponse_BaseResp_DEFAULT *BaseResp

func (p *PreviewResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return PreviewResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *PreviewResponse) GetData() (v map[string]string) {
	return p.Data
}
func (p *PreviewResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}
func (p *PreviewResponse) SetData(val map[string]string) {
	p.Data = val
}

var fieldIDToName_PreviewResponse = map[int16]string{
	1: "baseResp",
	2: "data",
}

func (p *PreviewResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *PreviewResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PreviewResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PreviewResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *PreviewResponse) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Data = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Data[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PreviewResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PreviewResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PreviewResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PreviewResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return err
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PreviewResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PreviewResponse(%+v)", *p)

}

func (p *PreviewResponse) DeepEqual(ano *PreviewResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *PreviewResponse) Field1DeepEqual(src *BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PreviewResponse) Field2DeepEqual(src map[string]string) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for k, v := range p.Data {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type DownloadResponse struct {
	BaseResp *BaseResp `thrift:"baseResp,1" frugal:"1,default,BaseResp" json:"baseResp"`
	Data     []byte    `thrift:"data,2" frugal:"2,default,binary" json:"data"`
}

func NewDownloadResponse() *DownloadResponse {
	return &DownloadResponse{}
}

func (p *DownloadResponse) InitDefault() {
	*p = DownloadResponse{}
}

var DownloadResponse_BaseResp_DEFAULT *BaseResp

func (p *DownloadResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return DownloadResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *DownloadResponse) GetData() (v []byte) {
	return p.Data
}
func (p *DownloadResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}
func (p *DownloadResponse) SetData(val []byte) {
	p.Data = val
}

var fieldIDToName_DownloadResponse = map[int16]string{
	1: "baseResp",
	2: "data",
}

func (p *DownloadResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DownloadResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DownloadResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DownloadResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *DownloadResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Data = []byte(v)
	}
	return nil
}

func (p *DownloadResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DownloadResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DownloadResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DownloadResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Data)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DownloadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadResponse(%+v)", *p)

}

func (p *DownloadResponse) DeepEqual(ano *DownloadResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *DownloadResponse) Field1DeepEqual(src *BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DownloadResponse) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Data, src) != 0 {
		return false
	}
	return true
}

type BatchGenCodeResponse struct {
	BaseResp *BaseResp `thrift:"baseResp,1" frugal:"1,default,BaseResp" json:"baseResp"`
	Data     [][]byte  `thrift:"data,2" frugal:"2,default,list<binary>" json:"data"`
}

func NewBatchGenCodeResponse() *BatchGenCodeResponse {
	return &BatchGenCodeResponse{}
}

func (p *BatchGenCodeResponse) InitDefault() {
	*p = BatchGenCodeResponse{}
}

var BatchGenCodeResponse_BaseResp_DEFAULT *BaseResp

func (p *BatchGenCodeResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return BatchGenCodeResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *BatchGenCodeResponse) GetData() (v [][]byte) {
	return p.Data
}
func (p *BatchGenCodeResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}
func (p *BatchGenCodeResponse) SetData(val [][]byte) {
	p.Data = val
}

var fieldIDToName_BatchGenCodeResponse = map[int16]string{
	1: "baseResp",
	2: "data",
}

func (p *BatchGenCodeResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGenCodeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGenCodeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGenCodeResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *BatchGenCodeResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([][]byte, 0, size)
	for i := 0; i < size; i++ {

		var _elem []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return err
		} else {
			_elem = []byte(v)
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BatchGenCodeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGenCodeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGenCodeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BatchGenCodeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := oprot.WriteBinary([]byte(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchGenCodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGenCodeResponse(%+v)", *p)

}

func (p *BatchGenCodeResponse) DeepEqual(ano *BatchGenCodeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *BatchGenCodeResponse) Field1DeepEqual(src *BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchGenCodeResponse) Field2DeepEqual(src [][]byte) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if bytes.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type GenService interface {
	ListGenTables(ctx context.Context, req *ListGenTablesRequest) (r *ListGenTablesResponse, err error)

	GetInfo(ctx context.Context, tableId int64) (r *GetInfoResponse, err error)

	DataList(ctx context.Context, req *DataListRequest) (r *ListGenTablesResponse, err error)

	ColumnList(ctx context.Context, tableId int64) (r *ListGenTablesResponse, err error)

	ImportTableSave(ctx context.Context, tables string) (r *BaseResp, err error)

	EditSave(ctx context.Context, req *EditSaveRequest) (r *BaseResp, err error)

	Remove(ctx context.Context, req *RemoveRequest) (r *BaseResp, err error)

	Preview(ctx context.Context, tableId int64) (r *PreviewResponse, err error)

	Download(ctx context.Context, tableName string) (r *DownloadResponse, err error)

	GenCode(ctx context.Context, tableName string) (r *BaseResp, err error)

	SynchDb(ctx context.Context, tableName string) (r *BaseResp, err error)

	BatchGenCode(ctx context.Context, tables string) (r *BatchGenCodeResponse, err error)
}

type GenServiceClient struct {
	c thrift.TClient
}

func NewGenServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GenServiceClient {
	return &GenServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewGenServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GenServiceClient {
	return &GenServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewGenServiceClient(c thrift.TClient) *GenServiceClient {
	return &GenServiceClient{
		c: c,
	}
}

func (p *GenServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *GenServiceClient) ListGenTables(ctx context.Context, req *ListGenTablesRequest) (r *ListGenTablesResponse, err error) {
	var _args GenServiceListGenTablesArgs
	_args.Req = req
	var _result GenServiceListGenTablesResult
	if err = p.Client_().Call(ctx, "ListGenTables", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) GetInfo(ctx context.Context, tableId int64) (r *GetInfoResponse, err error) {
	var _args GenServiceGetInfoArgs
	_args.TableId = tableId
	var _result GenServiceGetInfoResult
	if err = p.Client_().Call(ctx, "GetInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) DataList(ctx context.Context, req *DataListRequest) (r *ListGenTablesResponse, err error) {
	var _args GenServiceDataListArgs
	_args.Req = req
	var _result GenServiceDataListResult
	if err = p.Client_().Call(ctx, "DataList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) ColumnList(ctx context.Context, tableId int64) (r *ListGenTablesResponse, err error) {
	var _args GenServiceColumnListArgs
	_args.TableId = tableId
	var _result GenServiceColumnListResult
	if err = p.Client_().Call(ctx, "ColumnList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) ImportTableSave(ctx context.Context, tables string) (r *BaseResp, err error) {
	var _args GenServiceImportTableSaveArgs
	_args.Tables = tables
	var _result GenServiceImportTableSaveResult
	if err = p.Client_().Call(ctx, "ImportTableSave", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) EditSave(ctx context.Context, req *EditSaveRequest) (r *BaseResp, err error) {
	var _args GenServiceEditSaveArgs
	_args.Req = req
	var _result GenServiceEditSaveResult
	if err = p.Client_().Call(ctx, "EditSave", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) Remove(ctx context.Context, req *RemoveRequest) (r *BaseResp, err error) {
	var _args GenServiceRemoveArgs
	_args.Req = req
	var _result GenServiceRemoveResult
	if err = p.Client_().Call(ctx, "Remove", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) Preview(ctx context.Context, tableId int64) (r *PreviewResponse, err error) {
	var _args GenServicePreviewArgs
	_args.TableId = tableId
	var _result GenServicePreviewResult
	if err = p.Client_().Call(ctx, "Preview", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) Download(ctx context.Context, tableName string) (r *DownloadResponse, err error) {
	var _args GenServiceDownloadArgs
	_args.TableName = tableName
	var _result GenServiceDownloadResult
	if err = p.Client_().Call(ctx, "Download", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) GenCode(ctx context.Context, tableName string) (r *BaseResp, err error) {
	var _args GenServiceGenCodeArgs
	_args.TableName = tableName
	var _result GenServiceGenCodeResult
	if err = p.Client_().Call(ctx, "GenCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) SynchDb(ctx context.Context, tableName string) (r *BaseResp, err error) {
	var _args GenServiceSynchDbArgs
	_args.TableName = tableName
	var _result GenServiceSynchDbResult
	if err = p.Client_().Call(ctx, "SynchDb", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *GenServiceClient) BatchGenCode(ctx context.Context, tables string) (r *BatchGenCodeResponse, err error) {
	var _args GenServiceBatchGenCodeArgs
	_args.Tables = tables
	var _result GenServiceBatchGenCodeResult
	if err = p.Client_().Call(ctx, "BatchGenCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type GenServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      GenService
}

func (p *GenServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *GenServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *GenServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewGenServiceProcessor(handler GenService) *GenServiceProcessor {
	self := &GenServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ListGenTables", &genServiceProcessorListGenTables{handler: handler})
	self.AddToProcessorMap("GetInfo", &genServiceProcessorGetInfo{handler: handler})
	self.AddToProcessorMap("DataList", &genServiceProcessorDataList{handler: handler})
	self.AddToProcessorMap("ColumnList", &genServiceProcessorColumnList{handler: handler})
	self.AddToProcessorMap("ImportTableSave", &genServiceProcessorImportTableSave{handler: handler})
	self.AddToProcessorMap("EditSave", &genServiceProcessorEditSave{handler: handler})
	self.AddToProcessorMap("Remove", &genServiceProcessorRemove{handler: handler})
	self.AddToProcessorMap("Preview", &genServiceProcessorPreview{handler: handler})
	self.AddToProcessorMap("Download", &genServiceProcessorDownload{handler: handler})
	self.AddToProcessorMap("GenCode", &genServiceProcessorGenCode{handler: handler})
	self.AddToProcessorMap("SynchDb", &genServiceProcessorSynchDb{handler: handler})
	self.AddToProcessorMap("BatchGenCode", &genServiceProcessorBatchGenCode{handler: handler})
	return self
}
func (p *GenServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type genServiceProcessorListGenTables struct {
	handler GenService
}

func (p *genServiceProcessorListGenTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceListGenTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListGenTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceListGenTablesResult{}
	var retval *ListGenTablesResponse
	if retval, err2 = p.handler.ListGenTables(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListGenTables: "+err2.Error())
		oprot.WriteMessageBegin("ListGenTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListGenTables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorGetInfo struct {
	handler GenService
}

func (p *genServiceProcessorGetInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceGetInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceGetInfoResult{}
	var retval *GetInfoResponse
	if retval, err2 = p.handler.GetInfo(ctx, args.TableId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorDataList struct {
	handler GenService
}

func (p *genServiceProcessorDataList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceDataListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DataList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceDataListResult{}
	var retval *ListGenTablesResponse
	if retval, err2 = p.handler.DataList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DataList: "+err2.Error())
		oprot.WriteMessageBegin("DataList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DataList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorColumnList struct {
	handler GenService
}

func (p *genServiceProcessorColumnList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceColumnListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ColumnList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceColumnListResult{}
	var retval *ListGenTablesResponse
	if retval, err2 = p.handler.ColumnList(ctx, args.TableId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ColumnList: "+err2.Error())
		oprot.WriteMessageBegin("ColumnList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ColumnList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorImportTableSave struct {
	handler GenService
}

func (p *genServiceProcessorImportTableSave) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceImportTableSaveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ImportTableSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceImportTableSaveResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.ImportTableSave(ctx, args.Tables); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ImportTableSave: "+err2.Error())
		oprot.WriteMessageBegin("ImportTableSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ImportTableSave", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorEditSave struct {
	handler GenService
}

func (p *genServiceProcessorEditSave) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceEditSaveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EditSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceEditSaveResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.EditSave(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EditSave: "+err2.Error())
		oprot.WriteMessageBegin("EditSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EditSave", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorRemove struct {
	handler GenService
}

func (p *genServiceProcessorRemove) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceRemoveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Remove", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceRemoveResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.Remove(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Remove: "+err2.Error())
		oprot.WriteMessageBegin("Remove", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Remove", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorPreview struct {
	handler GenService
}

func (p *genServiceProcessorPreview) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServicePreviewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Preview", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServicePreviewResult{}
	var retval *PreviewResponse
	if retval, err2 = p.handler.Preview(ctx, args.TableId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Preview: "+err2.Error())
		oprot.WriteMessageBegin("Preview", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Preview", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorDownload struct {
	handler GenService
}

func (p *genServiceProcessorDownload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceDownloadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Download", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceDownloadResult{}
	var retval *DownloadResponse
	if retval, err2 = p.handler.Download(ctx, args.TableName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Download: "+err2.Error())
		oprot.WriteMessageBegin("Download", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Download", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorGenCode struct {
	handler GenService
}

func (p *genServiceProcessorGenCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceGenCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GenCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceGenCodeResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.GenCode(ctx, args.TableName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenCode: "+err2.Error())
		oprot.WriteMessageBegin("GenCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GenCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorSynchDb struct {
	handler GenService
}

func (p *genServiceProcessorSynchDb) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceSynchDbArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SynchDb", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceSynchDbResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.SynchDb(ctx, args.TableName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SynchDb: "+err2.Error())
		oprot.WriteMessageBegin("SynchDb", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SynchDb", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type genServiceProcessorBatchGenCode struct {
	handler GenService
}

func (p *genServiceProcessorBatchGenCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenServiceBatchGenCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGenCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := GenServiceBatchGenCodeResult{}
	var retval *BatchGenCodeResponse
	if retval, err2 = p.handler.BatchGenCode(ctx, args.Tables); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGenCode: "+err2.Error())
		oprot.WriteMessageBegin("BatchGenCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGenCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type GenServiceListGenTablesArgs struct {
	Req *ListGenTablesRequest `thrift:"req,1" frugal:"1,default,ListGenTablesRequest" json:"req"`
}

func NewGenServiceListGenTablesArgs() *GenServiceListGenTablesArgs {
	return &GenServiceListGenTablesArgs{}
}

func (p *GenServiceListGenTablesArgs) InitDefault() {
	*p = GenServiceListGenTablesArgs{}
}

var GenServiceListGenTablesArgs_Req_DEFAULT *ListGenTablesRequest

func (p *GenServiceListGenTablesArgs) GetReq() (v *ListGenTablesRequest) {
	if !p.IsSetReq() {
		return GenServiceListGenTablesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GenServiceListGenTablesArgs) SetReq(val *ListGenTablesRequest) {
	p.Req = val
}

var fieldIDToName_GenServiceListGenTablesArgs = map[int16]string{
	1: "req",
}

func (p *GenServiceListGenTablesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenServiceListGenTablesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceListGenTablesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceListGenTablesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListGenTablesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceListGenTablesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListGenTables_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceListGenTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceListGenTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceListGenTablesArgs(%+v)", *p)

}

func (p *GenServiceListGenTablesArgs) DeepEqual(ano *GenServiceListGenTablesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *GenServiceListGenTablesArgs) Field1DeepEqual(src *ListGenTablesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceListGenTablesResult struct {
	Success *ListGenTablesResponse `thrift:"success,0,optional" frugal:"0,optional,ListGenTablesResponse" json:"success,omitempty"`
}

func NewGenServiceListGenTablesResult() *GenServiceListGenTablesResult {
	return &GenServiceListGenTablesResult{}
}

func (p *GenServiceListGenTablesResult) InitDefault() {
	*p = GenServiceListGenTablesResult{}
}

var GenServiceListGenTablesResult_Success_DEFAULT *ListGenTablesResponse

func (p *GenServiceListGenTablesResult) GetSuccess() (v *ListGenTablesResponse) {
	if !p.IsSetSuccess() {
		return GenServiceListGenTablesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceListGenTablesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListGenTablesResponse)
}

var fieldIDToName_GenServiceListGenTablesResult = map[int16]string{
	0: "success",
}

func (p *GenServiceListGenTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceListGenTablesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceListGenTablesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceListGenTablesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListGenTablesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceListGenTablesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListGenTables_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceListGenTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceListGenTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceListGenTablesResult(%+v)", *p)

}

func (p *GenServiceListGenTablesResult) DeepEqual(ano *GenServiceListGenTablesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceListGenTablesResult) Field0DeepEqual(src *ListGenTablesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceGetInfoArgs struct {
	TableId int64 `thrift:"tableId,1" frugal:"1,default,i64" json:"tableId"`
}

func NewGenServiceGetInfoArgs() *GenServiceGetInfoArgs {
	return &GenServiceGetInfoArgs{}
}

func (p *GenServiceGetInfoArgs) InitDefault() {
	*p = GenServiceGetInfoArgs{}
}

func (p *GenServiceGetInfoArgs) GetTableId() (v int64) {
	return p.TableId
}
func (p *GenServiceGetInfoArgs) SetTableId(val int64) {
	p.TableId = val
}

var fieldIDToName_GenServiceGetInfoArgs = map[int16]string{
	1: "tableId",
}

func (p *GenServiceGetInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceGetInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceGetInfoArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TableId = v
	}
	return nil
}

func (p *GenServiceGetInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceGetInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TableId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceGetInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceGetInfoArgs(%+v)", *p)

}

func (p *GenServiceGetInfoArgs) DeepEqual(ano *GenServiceGetInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableId) {
		return false
	}
	return true
}

func (p *GenServiceGetInfoArgs) Field1DeepEqual(src int64) bool {

	if p.TableId != src {
		return false
	}
	return true
}

type GenServiceGetInfoResult struct {
	Success *GetInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetInfoResponse" json:"success,omitempty"`
}

func NewGenServiceGetInfoResult() *GenServiceGetInfoResult {
	return &GenServiceGetInfoResult{}
}

func (p *GenServiceGetInfoResult) InitDefault() {
	*p = GenServiceGetInfoResult{}
}

var GenServiceGetInfoResult_Success_DEFAULT *GetInfoResponse

func (p *GenServiceGetInfoResult) GetSuccess() (v *GetInfoResponse) {
	if !p.IsSetSuccess() {
		return GenServiceGetInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceGetInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetInfoResponse)
}

var fieldIDToName_GenServiceGetInfoResult = map[int16]string{
	0: "success",
}

func (p *GenServiceGetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceGetInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceGetInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceGetInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceGetInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceGetInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceGetInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceGetInfoResult(%+v)", *p)

}

func (p *GenServiceGetInfoResult) DeepEqual(ano *GenServiceGetInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceGetInfoResult) Field0DeepEqual(src *GetInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceDataListArgs struct {
	Req *DataListRequest `thrift:"req,1" frugal:"1,default,DataListRequest" json:"req"`
}

func NewGenServiceDataListArgs() *GenServiceDataListArgs {
	return &GenServiceDataListArgs{}
}

func (p *GenServiceDataListArgs) InitDefault() {
	*p = GenServiceDataListArgs{}
}

var GenServiceDataListArgs_Req_DEFAULT *DataListRequest

func (p *GenServiceDataListArgs) GetReq() (v *DataListRequest) {
	if !p.IsSetReq() {
		return GenServiceDataListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GenServiceDataListArgs) SetReq(val *DataListRequest) {
	p.Req = val
}

var fieldIDToName_GenServiceDataListArgs = map[int16]string{
	1: "req",
}

func (p *GenServiceDataListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenServiceDataListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceDataListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceDataListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDataListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceDataListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DataList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceDataListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceDataListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceDataListArgs(%+v)", *p)

}

func (p *GenServiceDataListArgs) DeepEqual(ano *GenServiceDataListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *GenServiceDataListArgs) Field1DeepEqual(src *DataListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceDataListResult struct {
	Success *ListGenTablesResponse `thrift:"success,0,optional" frugal:"0,optional,ListGenTablesResponse" json:"success,omitempty"`
}

func NewGenServiceDataListResult() *GenServiceDataListResult {
	return &GenServiceDataListResult{}
}

func (p *GenServiceDataListResult) InitDefault() {
	*p = GenServiceDataListResult{}
}

var GenServiceDataListResult_Success_DEFAULT *ListGenTablesResponse

func (p *GenServiceDataListResult) GetSuccess() (v *ListGenTablesResponse) {
	if !p.IsSetSuccess() {
		return GenServiceDataListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceDataListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListGenTablesResponse)
}

var fieldIDToName_GenServiceDataListResult = map[int16]string{
	0: "success",
}

func (p *GenServiceDataListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceDataListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceDataListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceDataListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListGenTablesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceDataListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DataList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceDataListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceDataListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceDataListResult(%+v)", *p)

}

func (p *GenServiceDataListResult) DeepEqual(ano *GenServiceDataListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceDataListResult) Field0DeepEqual(src *ListGenTablesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceColumnListArgs struct {
	TableId int64 `thrift:"tableId,1" frugal:"1,default,i64" json:"tableId"`
}

func NewGenServiceColumnListArgs() *GenServiceColumnListArgs {
	return &GenServiceColumnListArgs{}
}

func (p *GenServiceColumnListArgs) InitDefault() {
	*p = GenServiceColumnListArgs{}
}

func (p *GenServiceColumnListArgs) GetTableId() (v int64) {
	return p.TableId
}
func (p *GenServiceColumnListArgs) SetTableId(val int64) {
	p.TableId = val
}

var fieldIDToName_GenServiceColumnListArgs = map[int16]string{
	1: "tableId",
}

func (p *GenServiceColumnListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceColumnListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceColumnListArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TableId = v
	}
	return nil
}

func (p *GenServiceColumnListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceColumnListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TableId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceColumnListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceColumnListArgs(%+v)", *p)

}

func (p *GenServiceColumnListArgs) DeepEqual(ano *GenServiceColumnListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableId) {
		return false
	}
	return true
}

func (p *GenServiceColumnListArgs) Field1DeepEqual(src int64) bool {

	if p.TableId != src {
		return false
	}
	return true
}

type GenServiceColumnListResult struct {
	Success *ListGenTablesResponse `thrift:"success,0,optional" frugal:"0,optional,ListGenTablesResponse" json:"success,omitempty"`
}

func NewGenServiceColumnListResult() *GenServiceColumnListResult {
	return &GenServiceColumnListResult{}
}

func (p *GenServiceColumnListResult) InitDefault() {
	*p = GenServiceColumnListResult{}
}

var GenServiceColumnListResult_Success_DEFAULT *ListGenTablesResponse

func (p *GenServiceColumnListResult) GetSuccess() (v *ListGenTablesResponse) {
	if !p.IsSetSuccess() {
		return GenServiceColumnListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceColumnListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListGenTablesResponse)
}

var fieldIDToName_GenServiceColumnListResult = map[int16]string{
	0: "success",
}

func (p *GenServiceColumnListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceColumnListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceColumnListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceColumnListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListGenTablesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceColumnListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceColumnListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceColumnListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceColumnListResult(%+v)", *p)

}

func (p *GenServiceColumnListResult) DeepEqual(ano *GenServiceColumnListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceColumnListResult) Field0DeepEqual(src *ListGenTablesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceImportTableSaveArgs struct {
	Tables string `thrift:"tables,1" frugal:"1,default,string" json:"tables"`
}

func NewGenServiceImportTableSaveArgs() *GenServiceImportTableSaveArgs {
	return &GenServiceImportTableSaveArgs{}
}

func (p *GenServiceImportTableSaveArgs) InitDefault() {
	*p = GenServiceImportTableSaveArgs{}
}

func (p *GenServiceImportTableSaveArgs) GetTables() (v string) {
	return p.Tables
}
func (p *GenServiceImportTableSaveArgs) SetTables(val string) {
	p.Tables = val
}

var fieldIDToName_GenServiceImportTableSaveArgs = map[int16]string{
	1: "tables",
}

func (p *GenServiceImportTableSaveArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceImportTableSaveArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceImportTableSaveArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Tables = v
	}
	return nil
}

func (p *GenServiceImportTableSaveArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTableSave_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceImportTableSaveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tables", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tables); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceImportTableSaveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceImportTableSaveArgs(%+v)", *p)

}

func (p *GenServiceImportTableSaveArgs) DeepEqual(ano *GenServiceImportTableSaveArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tables) {
		return false
	}
	return true
}

func (p *GenServiceImportTableSaveArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Tables, src) != 0 {
		return false
	}
	return true
}

type GenServiceImportTableSaveResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewGenServiceImportTableSaveResult() *GenServiceImportTableSaveResult {
	return &GenServiceImportTableSaveResult{}
}

func (p *GenServiceImportTableSaveResult) InitDefault() {
	*p = GenServiceImportTableSaveResult{}
}

var GenServiceImportTableSaveResult_Success_DEFAULT *BaseResp

func (p *GenServiceImportTableSaveResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return GenServiceImportTableSaveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceImportTableSaveResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_GenServiceImportTableSaveResult = map[int16]string{
	0: "success",
}

func (p *GenServiceImportTableSaveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceImportTableSaveResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceImportTableSaveResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceImportTableSaveResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceImportTableSaveResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTableSave_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceImportTableSaveResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceImportTableSaveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceImportTableSaveResult(%+v)", *p)

}

func (p *GenServiceImportTableSaveResult) DeepEqual(ano *GenServiceImportTableSaveResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceImportTableSaveResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceEditSaveArgs struct {
	Req *EditSaveRequest `thrift:"req,1" frugal:"1,default,EditSaveRequest" json:"req"`
}

func NewGenServiceEditSaveArgs() *GenServiceEditSaveArgs {
	return &GenServiceEditSaveArgs{}
}

func (p *GenServiceEditSaveArgs) InitDefault() {
	*p = GenServiceEditSaveArgs{}
}

var GenServiceEditSaveArgs_Req_DEFAULT *EditSaveRequest

func (p *GenServiceEditSaveArgs) GetReq() (v *EditSaveRequest) {
	if !p.IsSetReq() {
		return GenServiceEditSaveArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GenServiceEditSaveArgs) SetReq(val *EditSaveRequest) {
	p.Req = val
}

var fieldIDToName_GenServiceEditSaveArgs = map[int16]string{
	1: "req",
}

func (p *GenServiceEditSaveArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenServiceEditSaveArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceEditSaveArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceEditSaveArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewEditSaveRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceEditSaveArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EditSave_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceEditSaveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceEditSaveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceEditSaveArgs(%+v)", *p)

}

func (p *GenServiceEditSaveArgs) DeepEqual(ano *GenServiceEditSaveArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *GenServiceEditSaveArgs) Field1DeepEqual(src *EditSaveRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceEditSaveResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewGenServiceEditSaveResult() *GenServiceEditSaveResult {
	return &GenServiceEditSaveResult{}
}

func (p *GenServiceEditSaveResult) InitDefault() {
	*p = GenServiceEditSaveResult{}
}

var GenServiceEditSaveResult_Success_DEFAULT *BaseResp

func (p *GenServiceEditSaveResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return GenServiceEditSaveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceEditSaveResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_GenServiceEditSaveResult = map[int16]string{
	0: "success",
}

func (p *GenServiceEditSaveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceEditSaveResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceEditSaveResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceEditSaveResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceEditSaveResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EditSave_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceEditSaveResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceEditSaveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceEditSaveResult(%+v)", *p)

}

func (p *GenServiceEditSaveResult) DeepEqual(ano *GenServiceEditSaveResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceEditSaveResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceRemoveArgs struct {
	Req *RemoveRequest `thrift:"req,1" frugal:"1,default,RemoveRequest" json:"req"`
}

func NewGenServiceRemoveArgs() *GenServiceRemoveArgs {
	return &GenServiceRemoveArgs{}
}

func (p *GenServiceRemoveArgs) InitDefault() {
	*p = GenServiceRemoveArgs{}
}

var GenServiceRemoveArgs_Req_DEFAULT *RemoveRequest

func (p *GenServiceRemoveArgs) GetReq() (v *RemoveRequest) {
	if !p.IsSetReq() {
		return GenServiceRemoveArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GenServiceRemoveArgs) SetReq(val *RemoveRequest) {
	p.Req = val
}

var fieldIDToName_GenServiceRemoveArgs = map[int16]string{
	1: "req",
}

func (p *GenServiceRemoveArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenServiceRemoveArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceRemoveArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceRemoveArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRemoveRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceRemoveArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Remove_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceRemoveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceRemoveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceRemoveArgs(%+v)", *p)

}

func (p *GenServiceRemoveArgs) DeepEqual(ano *GenServiceRemoveArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *GenServiceRemoveArgs) Field1DeepEqual(src *RemoveRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceRemoveResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewGenServiceRemoveResult() *GenServiceRemoveResult {
	return &GenServiceRemoveResult{}
}

func (p *GenServiceRemoveResult) InitDefault() {
	*p = GenServiceRemoveResult{}
}

var GenServiceRemoveResult_Success_DEFAULT *BaseResp

func (p *GenServiceRemoveResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return GenServiceRemoveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceRemoveResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_GenServiceRemoveResult = map[int16]string{
	0: "success",
}

func (p *GenServiceRemoveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceRemoveResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceRemoveResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceRemoveResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceRemoveResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Remove_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceRemoveResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceRemoveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceRemoveResult(%+v)", *p)

}

func (p *GenServiceRemoveResult) DeepEqual(ano *GenServiceRemoveResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceRemoveResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServicePreviewArgs struct {
	TableId int64 `thrift:"tableId,1" frugal:"1,default,i64" json:"tableId"`
}

func NewGenServicePreviewArgs() *GenServicePreviewArgs {
	return &GenServicePreviewArgs{}
}

func (p *GenServicePreviewArgs) InitDefault() {
	*p = GenServicePreviewArgs{}
}

func (p *GenServicePreviewArgs) GetTableId() (v int64) {
	return p.TableId
}
func (p *GenServicePreviewArgs) SetTableId(val int64) {
	p.TableId = val
}

var fieldIDToName_GenServicePreviewArgs = map[int16]string{
	1: "tableId",
}

func (p *GenServicePreviewArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServicePreviewArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServicePreviewArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TableId = v
	}
	return nil
}

func (p *GenServicePreviewArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Preview_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServicePreviewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TableId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServicePreviewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServicePreviewArgs(%+v)", *p)

}

func (p *GenServicePreviewArgs) DeepEqual(ano *GenServicePreviewArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableId) {
		return false
	}
	return true
}

func (p *GenServicePreviewArgs) Field1DeepEqual(src int64) bool {

	if p.TableId != src {
		return false
	}
	return true
}

type GenServicePreviewResult struct {
	Success *PreviewResponse `thrift:"success,0,optional" frugal:"0,optional,PreviewResponse" json:"success,omitempty"`
}

func NewGenServicePreviewResult() *GenServicePreviewResult {
	return &GenServicePreviewResult{}
}

func (p *GenServicePreviewResult) InitDefault() {
	*p = GenServicePreviewResult{}
}

var GenServicePreviewResult_Success_DEFAULT *PreviewResponse

func (p *GenServicePreviewResult) GetSuccess() (v *PreviewResponse) {
	if !p.IsSetSuccess() {
		return GenServicePreviewResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServicePreviewResult) SetSuccess(x interface{}) {
	p.Success = x.(*PreviewResponse)
}

var fieldIDToName_GenServicePreviewResult = map[int16]string{
	0: "success",
}

func (p *GenServicePreviewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServicePreviewResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServicePreviewResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServicePreviewResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPreviewResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServicePreviewResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Preview_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServicePreviewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServicePreviewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServicePreviewResult(%+v)", *p)

}

func (p *GenServicePreviewResult) DeepEqual(ano *GenServicePreviewResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServicePreviewResult) Field0DeepEqual(src *PreviewResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceDownloadArgs struct {
	TableName string `thrift:"tableName,1" frugal:"1,default,string" json:"tableName"`
}

func NewGenServiceDownloadArgs() *GenServiceDownloadArgs {
	return &GenServiceDownloadArgs{}
}

func (p *GenServiceDownloadArgs) InitDefault() {
	*p = GenServiceDownloadArgs{}
}

func (p *GenServiceDownloadArgs) GetTableName() (v string) {
	return p.TableName
}
func (p *GenServiceDownloadArgs) SetTableName(val string) {
	p.TableName = val
}

var fieldIDToName_GenServiceDownloadArgs = map[int16]string{
	1: "tableName",
}

func (p *GenServiceDownloadArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceDownloadArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceDownloadArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GenServiceDownloadArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Download_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceDownloadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceDownloadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceDownloadArgs(%+v)", *p)

}

func (p *GenServiceDownloadArgs) DeepEqual(ano *GenServiceDownloadArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableName) {
		return false
	}
	return true
}

func (p *GenServiceDownloadArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}

type GenServiceDownloadResult struct {
	Success *DownloadResponse `thrift:"success,0,optional" frugal:"0,optional,DownloadResponse" json:"success,omitempty"`
}

func NewGenServiceDownloadResult() *GenServiceDownloadResult {
	return &GenServiceDownloadResult{}
}

func (p *GenServiceDownloadResult) InitDefault() {
	*p = GenServiceDownloadResult{}
}

var GenServiceDownloadResult_Success_DEFAULT *DownloadResponse

func (p *GenServiceDownloadResult) GetSuccess() (v *DownloadResponse) {
	if !p.IsSetSuccess() {
		return GenServiceDownloadResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceDownloadResult) SetSuccess(x interface{}) {
	p.Success = x.(*DownloadResponse)
}

var fieldIDToName_GenServiceDownloadResult = map[int16]string{
	0: "success",
}

func (p *GenServiceDownloadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceDownloadResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceDownloadResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceDownloadResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDownloadResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceDownloadResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Download_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceDownloadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceDownloadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceDownloadResult(%+v)", *p)

}

func (p *GenServiceDownloadResult) DeepEqual(ano *GenServiceDownloadResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceDownloadResult) Field0DeepEqual(src *DownloadResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceGenCodeArgs struct {
	TableName string `thrift:"tableName,1" frugal:"1,default,string" json:"tableName"`
}

func NewGenServiceGenCodeArgs() *GenServiceGenCodeArgs {
	return &GenServiceGenCodeArgs{}
}

func (p *GenServiceGenCodeArgs) InitDefault() {
	*p = GenServiceGenCodeArgs{}
}

func (p *GenServiceGenCodeArgs) GetTableName() (v string) {
	return p.TableName
}
func (p *GenServiceGenCodeArgs) SetTableName(val string) {
	p.TableName = val
}

var fieldIDToName_GenServiceGenCodeArgs = map[int16]string{
	1: "tableName",
}

func (p *GenServiceGenCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceGenCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceGenCodeArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GenServiceGenCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceGenCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceGenCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceGenCodeArgs(%+v)", *p)

}

func (p *GenServiceGenCodeArgs) DeepEqual(ano *GenServiceGenCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableName) {
		return false
	}
	return true
}

func (p *GenServiceGenCodeArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}

type GenServiceGenCodeResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewGenServiceGenCodeResult() *GenServiceGenCodeResult {
	return &GenServiceGenCodeResult{}
}

func (p *GenServiceGenCodeResult) InitDefault() {
	*p = GenServiceGenCodeResult{}
}

var GenServiceGenCodeResult_Success_DEFAULT *BaseResp

func (p *GenServiceGenCodeResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return GenServiceGenCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceGenCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_GenServiceGenCodeResult = map[int16]string{
	0: "success",
}

func (p *GenServiceGenCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceGenCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceGenCodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceGenCodeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceGenCodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceGenCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceGenCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceGenCodeResult(%+v)", *p)

}

func (p *GenServiceGenCodeResult) DeepEqual(ano *GenServiceGenCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceGenCodeResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceSynchDbArgs struct {
	TableName string `thrift:"tableName,1" frugal:"1,default,string" json:"tableName"`
}

func NewGenServiceSynchDbArgs() *GenServiceSynchDbArgs {
	return &GenServiceSynchDbArgs{}
}

func (p *GenServiceSynchDbArgs) InitDefault() {
	*p = GenServiceSynchDbArgs{}
}

func (p *GenServiceSynchDbArgs) GetTableName() (v string) {
	return p.TableName
}
func (p *GenServiceSynchDbArgs) SetTableName(val string) {
	p.TableName = val
}

var fieldIDToName_GenServiceSynchDbArgs = map[int16]string{
	1: "tableName",
}

func (p *GenServiceSynchDbArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceSynchDbArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceSynchDbArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GenServiceSynchDbArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SynchDb_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceSynchDbArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceSynchDbArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceSynchDbArgs(%+v)", *p)

}

func (p *GenServiceSynchDbArgs) DeepEqual(ano *GenServiceSynchDbArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableName) {
		return false
	}
	return true
}

func (p *GenServiceSynchDbArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}

type GenServiceSynchDbResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewGenServiceSynchDbResult() *GenServiceSynchDbResult {
	return &GenServiceSynchDbResult{}
}

func (p *GenServiceSynchDbResult) InitDefault() {
	*p = GenServiceSynchDbResult{}
}

var GenServiceSynchDbResult_Success_DEFAULT *BaseResp

func (p *GenServiceSynchDbResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return GenServiceSynchDbResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceSynchDbResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_GenServiceSynchDbResult = map[int16]string{
	0: "success",
}

func (p *GenServiceSynchDbResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceSynchDbResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceSynchDbResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceSynchDbResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceSynchDbResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SynchDb_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceSynchDbResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceSynchDbResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceSynchDbResult(%+v)", *p)

}

func (p *GenServiceSynchDbResult) DeepEqual(ano *GenServiceSynchDbResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceSynchDbResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type GenServiceBatchGenCodeArgs struct {
	Tables string `thrift:"tables,1" frugal:"1,default,string" json:"tables"`
}

func NewGenServiceBatchGenCodeArgs() *GenServiceBatchGenCodeArgs {
	return &GenServiceBatchGenCodeArgs{}
}

func (p *GenServiceBatchGenCodeArgs) InitDefault() {
	*p = GenServiceBatchGenCodeArgs{}
}

func (p *GenServiceBatchGenCodeArgs) GetTables() (v string) {
	return p.Tables
}
func (p *GenServiceBatchGenCodeArgs) SetTables(val string) {
	p.Tables = val
}

var fieldIDToName_GenServiceBatchGenCodeArgs = map[int16]string{
	1: "tables",
}

func (p *GenServiceBatchGenCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceBatchGenCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceBatchGenCodeArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Tables = v
	}
	return nil
}

func (p *GenServiceBatchGenCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGenCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceBatchGenCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tables", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tables); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenServiceBatchGenCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceBatchGenCodeArgs(%+v)", *p)

}

func (p *GenServiceBatchGenCodeArgs) DeepEqual(ano *GenServiceBatchGenCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tables) {
		return false
	}
	return true
}

func (p *GenServiceBatchGenCodeArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Tables, src) != 0 {
		return false
	}
	return true
}

type GenServiceBatchGenCodeResult struct {
	Success *BatchGenCodeResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGenCodeResponse" json:"success,omitempty"`
}

func NewGenServiceBatchGenCodeResult() *GenServiceBatchGenCodeResult {
	return &GenServiceBatchGenCodeResult{}
}

func (p *GenServiceBatchGenCodeResult) InitDefault() {
	*p = GenServiceBatchGenCodeResult{}
}

var GenServiceBatchGenCodeResult_Success_DEFAULT *BatchGenCodeResponse

func (p *GenServiceBatchGenCodeResult) GetSuccess() (v *BatchGenCodeResponse) {
	if !p.IsSetSuccess() {
		return GenServiceBatchGenCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GenServiceBatchGenCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGenCodeResponse)
}

var fieldIDToName_GenServiceBatchGenCodeResult = map[int16]string{
	0: "success",
}

func (p *GenServiceBatchGenCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenServiceBatchGenCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenServiceBatchGenCodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenServiceBatchGenCodeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBatchGenCodeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GenServiceBatchGenCodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGenCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenServiceBatchGenCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *GenServiceBatchGenCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenServiceBatchGenCodeResult(%+v)", *p)

}

func (p *GenServiceBatchGenCodeResult) DeepEqual(ano *GenServiceBatchGenCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *GenServiceBatchGenCodeResult) Field0DeepEqual(src *BatchGenCodeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
