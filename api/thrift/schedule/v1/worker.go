// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package v1

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type WorkerService interface {
	CreateJob(ctx context.Context, job *JobInfo) (r *BaseResp, err error)

	RemoveJobs(ctx context.Context, jobIds []int64) (r *BaseResp, err error)

	PauseJobs(ctx context.Context, jobIds []int64) (r *BaseResp, err error)

	ResumeJobs(ctx context.Context, jobIds []int64) (r *BaseResp, err error)

	Run(ctx context.Context, jobIds []int64) (r *BaseResp, err error)

	UpdateJob(ctx context.Context, job *JobInfo) (r *BaseResp, err error)
}

type WorkerServiceClient struct {
	c thrift.TClient
}

func NewWorkerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WorkerServiceClient {
	return &WorkerServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewWorkerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WorkerServiceClient {
	return &WorkerServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewWorkerServiceClient(c thrift.TClient) *WorkerServiceClient {
	return &WorkerServiceClient{
		c: c,
	}
}

func (p *WorkerServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *WorkerServiceClient) CreateJob(ctx context.Context, job *JobInfo) (r *BaseResp, err error) {
	var _args WorkerServiceCreateJobArgs
	_args.Job = job
	var _result WorkerServiceCreateJobResult
	if err = p.Client_().Call(ctx, "CreateJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WorkerServiceClient) RemoveJobs(ctx context.Context, jobIds []int64) (r *BaseResp, err error) {
	var _args WorkerServiceRemoveJobsArgs
	_args.JobIds = jobIds
	var _result WorkerServiceRemoveJobsResult
	if err = p.Client_().Call(ctx, "RemoveJobs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WorkerServiceClient) PauseJobs(ctx context.Context, jobIds []int64) (r *BaseResp, err error) {
	var _args WorkerServicePauseJobsArgs
	_args.JobIds = jobIds
	var _result WorkerServicePauseJobsResult
	if err = p.Client_().Call(ctx, "PauseJobs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WorkerServiceClient) ResumeJobs(ctx context.Context, jobIds []int64) (r *BaseResp, err error) {
	var _args WorkerServiceResumeJobsArgs
	_args.JobIds = jobIds
	var _result WorkerServiceResumeJobsResult
	if err = p.Client_().Call(ctx, "ResumeJobs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WorkerServiceClient) Run(ctx context.Context, jobIds []int64) (r *BaseResp, err error) {
	var _args WorkerServiceRunArgs
	_args.JobIds = jobIds
	var _result WorkerServiceRunResult
	if err = p.Client_().Call(ctx, "Run", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *WorkerServiceClient) UpdateJob(ctx context.Context, job *JobInfo) (r *BaseResp, err error) {
	var _args WorkerServiceUpdateJobArgs
	_args.Job = job
	var _result WorkerServiceUpdateJobResult
	if err = p.Client_().Call(ctx, "UpdateJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type WorkerServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      WorkerService
}

func (p *WorkerServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *WorkerServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *WorkerServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewWorkerServiceProcessor(handler WorkerService) *WorkerServiceProcessor {
	self := &WorkerServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateJob", &workerServiceProcessorCreateJob{handler: handler})
	self.AddToProcessorMap("RemoveJobs", &workerServiceProcessorRemoveJobs{handler: handler})
	self.AddToProcessorMap("PauseJobs", &workerServiceProcessorPauseJobs{handler: handler})
	self.AddToProcessorMap("ResumeJobs", &workerServiceProcessorResumeJobs{handler: handler})
	self.AddToProcessorMap("Run", &workerServiceProcessorRun{handler: handler})
	self.AddToProcessorMap("UpdateJob", &workerServiceProcessorUpdateJob{handler: handler})
	return self
}
func (p *WorkerServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type workerServiceProcessorCreateJob struct {
	handler WorkerService
}

func (p *workerServiceProcessorCreateJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkerServiceCreateJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WorkerServiceCreateJobResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.CreateJob(ctx, args.Job); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateJob: "+err2.Error())
		oprot.WriteMessageBegin("CreateJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workerServiceProcessorRemoveJobs struct {
	handler WorkerService
}

func (p *workerServiceProcessorRemoveJobs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkerServiceRemoveJobsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RemoveJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WorkerServiceRemoveJobsResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.RemoveJobs(ctx, args.JobIds); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveJobs: "+err2.Error())
		oprot.WriteMessageBegin("RemoveJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RemoveJobs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workerServiceProcessorPauseJobs struct {
	handler WorkerService
}

func (p *workerServiceProcessorPauseJobs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkerServicePauseJobsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PauseJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WorkerServicePauseJobsResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.PauseJobs(ctx, args.JobIds); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PauseJobs: "+err2.Error())
		oprot.WriteMessageBegin("PauseJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PauseJobs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workerServiceProcessorResumeJobs struct {
	handler WorkerService
}

func (p *workerServiceProcessorResumeJobs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkerServiceResumeJobsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ResumeJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WorkerServiceResumeJobsResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.ResumeJobs(ctx, args.JobIds); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResumeJobs: "+err2.Error())
		oprot.WriteMessageBegin("ResumeJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ResumeJobs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workerServiceProcessorRun struct {
	handler WorkerService
}

func (p *workerServiceProcessorRun) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkerServiceRunArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Run", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WorkerServiceRunResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.Run(ctx, args.JobIds); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Run: "+err2.Error())
		oprot.WriteMessageBegin("Run", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Run", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workerServiceProcessorUpdateJob struct {
	handler WorkerService
}

func (p *workerServiceProcessorUpdateJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkerServiceUpdateJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := WorkerServiceUpdateJobResult{}
	var retval *BaseResp
	if retval, err2 = p.handler.UpdateJob(ctx, args.Job); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateJob: "+err2.Error())
		oprot.WriteMessageBegin("UpdateJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type WorkerServiceCreateJobArgs struct {
	Job *JobInfo `thrift:"job,1" frugal:"1,default,JobInfo" json:"job"`
}

func NewWorkerServiceCreateJobArgs() *WorkerServiceCreateJobArgs {
	return &WorkerServiceCreateJobArgs{}
}

func (p *WorkerServiceCreateJobArgs) InitDefault() {
	*p = WorkerServiceCreateJobArgs{}
}

var WorkerServiceCreateJobArgs_Job_DEFAULT *JobInfo

func (p *WorkerServiceCreateJobArgs) GetJob() (v *JobInfo) {
	if !p.IsSetJob() {
		return WorkerServiceCreateJobArgs_Job_DEFAULT
	}
	return p.Job
}
func (p *WorkerServiceCreateJobArgs) SetJob(val *JobInfo) {
	p.Job = val
}

var fieldIDToName_WorkerServiceCreateJobArgs = map[int16]string{
	1: "job",
}

func (p *WorkerServiceCreateJobArgs) IsSetJob() bool {
	return p.Job != nil
}

func (p *WorkerServiceCreateJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceCreateJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceCreateJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Job = NewJobInfo()
	if err := p.Job.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceCreateJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceCreateJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Job.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WorkerServiceCreateJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceCreateJobArgs(%+v)", *p)

}

func (p *WorkerServiceCreateJobArgs) DeepEqual(ano *WorkerServiceCreateJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Job) {
		return false
	}
	return true
}

func (p *WorkerServiceCreateJobArgs) Field1DeepEqual(src *JobInfo) bool {

	if !p.Job.DeepEqual(src) {
		return false
	}
	return true
}

type WorkerServiceCreateJobResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewWorkerServiceCreateJobResult() *WorkerServiceCreateJobResult {
	return &WorkerServiceCreateJobResult{}
}

func (p *WorkerServiceCreateJobResult) InitDefault() {
	*p = WorkerServiceCreateJobResult{}
}

var WorkerServiceCreateJobResult_Success_DEFAULT *BaseResp

func (p *WorkerServiceCreateJobResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return WorkerServiceCreateJobResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WorkerServiceCreateJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_WorkerServiceCreateJobResult = map[int16]string{
	0: "success",
}

func (p *WorkerServiceCreateJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkerServiceCreateJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceCreateJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceCreateJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceCreateJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceCreateJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WorkerServiceCreateJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceCreateJobResult(%+v)", *p)

}

func (p *WorkerServiceCreateJobResult) DeepEqual(ano *WorkerServiceCreateJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *WorkerServiceCreateJobResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type WorkerServiceRemoveJobsArgs struct {
	JobIds []int64 `thrift:"jobIds,1" frugal:"1,default,list<i64>" json:"jobIds"`
}

func NewWorkerServiceRemoveJobsArgs() *WorkerServiceRemoveJobsArgs {
	return &WorkerServiceRemoveJobsArgs{}
}

func (p *WorkerServiceRemoveJobsArgs) InitDefault() {
	*p = WorkerServiceRemoveJobsArgs{}
}

func (p *WorkerServiceRemoveJobsArgs) GetJobIds() (v []int64) {
	return p.JobIds
}
func (p *WorkerServiceRemoveJobsArgs) SetJobIds(val []int64) {
	p.JobIds = val
}

var fieldIDToName_WorkerServiceRemoveJobsArgs = map[int16]string{
	1: "jobIds",
}

func (p *WorkerServiceRemoveJobsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceRemoveJobsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceRemoveJobsArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.JobIds = make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.JobIds = append(p.JobIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceRemoveJobsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RemoveJobs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceRemoveJobsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("jobIds", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.JobIds)); err != nil {
		return err
	}
	for _, v := range p.JobIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WorkerServiceRemoveJobsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceRemoveJobsArgs(%+v)", *p)

}

func (p *WorkerServiceRemoveJobsArgs) DeepEqual(ano *WorkerServiceRemoveJobsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JobIds) {
		return false
	}
	return true
}

func (p *WorkerServiceRemoveJobsArgs) Field1DeepEqual(src []int64) bool {

	if len(p.JobIds) != len(src) {
		return false
	}
	for i, v := range p.JobIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type WorkerServiceRemoveJobsResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewWorkerServiceRemoveJobsResult() *WorkerServiceRemoveJobsResult {
	return &WorkerServiceRemoveJobsResult{}
}

func (p *WorkerServiceRemoveJobsResult) InitDefault() {
	*p = WorkerServiceRemoveJobsResult{}
}

var WorkerServiceRemoveJobsResult_Success_DEFAULT *BaseResp

func (p *WorkerServiceRemoveJobsResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return WorkerServiceRemoveJobsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WorkerServiceRemoveJobsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_WorkerServiceRemoveJobsResult = map[int16]string{
	0: "success",
}

func (p *WorkerServiceRemoveJobsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkerServiceRemoveJobsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceRemoveJobsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceRemoveJobsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceRemoveJobsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RemoveJobs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceRemoveJobsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WorkerServiceRemoveJobsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceRemoveJobsResult(%+v)", *p)

}

func (p *WorkerServiceRemoveJobsResult) DeepEqual(ano *WorkerServiceRemoveJobsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *WorkerServiceRemoveJobsResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type WorkerServicePauseJobsArgs struct {
	JobIds []int64 `thrift:"jobIds,1" frugal:"1,default,list<i64>" json:"jobIds"`
}

func NewWorkerServicePauseJobsArgs() *WorkerServicePauseJobsArgs {
	return &WorkerServicePauseJobsArgs{}
}

func (p *WorkerServicePauseJobsArgs) InitDefault() {
	*p = WorkerServicePauseJobsArgs{}
}

func (p *WorkerServicePauseJobsArgs) GetJobIds() (v []int64) {
	return p.JobIds
}
func (p *WorkerServicePauseJobsArgs) SetJobIds(val []int64) {
	p.JobIds = val
}

var fieldIDToName_WorkerServicePauseJobsArgs = map[int16]string{
	1: "jobIds",
}

func (p *WorkerServicePauseJobsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServicePauseJobsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServicePauseJobsArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.JobIds = make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.JobIds = append(p.JobIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServicePauseJobsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PauseJobs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServicePauseJobsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("jobIds", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.JobIds)); err != nil {
		return err
	}
	for _, v := range p.JobIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WorkerServicePauseJobsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServicePauseJobsArgs(%+v)", *p)

}

func (p *WorkerServicePauseJobsArgs) DeepEqual(ano *WorkerServicePauseJobsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JobIds) {
		return false
	}
	return true
}

func (p *WorkerServicePauseJobsArgs) Field1DeepEqual(src []int64) bool {

	if len(p.JobIds) != len(src) {
		return false
	}
	for i, v := range p.JobIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type WorkerServicePauseJobsResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewWorkerServicePauseJobsResult() *WorkerServicePauseJobsResult {
	return &WorkerServicePauseJobsResult{}
}

func (p *WorkerServicePauseJobsResult) InitDefault() {
	*p = WorkerServicePauseJobsResult{}
}

var WorkerServicePauseJobsResult_Success_DEFAULT *BaseResp

func (p *WorkerServicePauseJobsResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return WorkerServicePauseJobsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WorkerServicePauseJobsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_WorkerServicePauseJobsResult = map[int16]string{
	0: "success",
}

func (p *WorkerServicePauseJobsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkerServicePauseJobsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServicePauseJobsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServicePauseJobsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServicePauseJobsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PauseJobs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServicePauseJobsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WorkerServicePauseJobsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServicePauseJobsResult(%+v)", *p)

}

func (p *WorkerServicePauseJobsResult) DeepEqual(ano *WorkerServicePauseJobsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *WorkerServicePauseJobsResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type WorkerServiceResumeJobsArgs struct {
	JobIds []int64 `thrift:"jobIds,1" frugal:"1,default,list<i64>" json:"jobIds"`
}

func NewWorkerServiceResumeJobsArgs() *WorkerServiceResumeJobsArgs {
	return &WorkerServiceResumeJobsArgs{}
}

func (p *WorkerServiceResumeJobsArgs) InitDefault() {
	*p = WorkerServiceResumeJobsArgs{}
}

func (p *WorkerServiceResumeJobsArgs) GetJobIds() (v []int64) {
	return p.JobIds
}
func (p *WorkerServiceResumeJobsArgs) SetJobIds(val []int64) {
	p.JobIds = val
}

var fieldIDToName_WorkerServiceResumeJobsArgs = map[int16]string{
	1: "jobIds",
}

func (p *WorkerServiceResumeJobsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceResumeJobsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceResumeJobsArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.JobIds = make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.JobIds = append(p.JobIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceResumeJobsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResumeJobs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceResumeJobsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("jobIds", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.JobIds)); err != nil {
		return err
	}
	for _, v := range p.JobIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WorkerServiceResumeJobsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceResumeJobsArgs(%+v)", *p)

}

func (p *WorkerServiceResumeJobsArgs) DeepEqual(ano *WorkerServiceResumeJobsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JobIds) {
		return false
	}
	return true
}

func (p *WorkerServiceResumeJobsArgs) Field1DeepEqual(src []int64) bool {

	if len(p.JobIds) != len(src) {
		return false
	}
	for i, v := range p.JobIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type WorkerServiceResumeJobsResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewWorkerServiceResumeJobsResult() *WorkerServiceResumeJobsResult {
	return &WorkerServiceResumeJobsResult{}
}

func (p *WorkerServiceResumeJobsResult) InitDefault() {
	*p = WorkerServiceResumeJobsResult{}
}

var WorkerServiceResumeJobsResult_Success_DEFAULT *BaseResp

func (p *WorkerServiceResumeJobsResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return WorkerServiceResumeJobsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WorkerServiceResumeJobsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_WorkerServiceResumeJobsResult = map[int16]string{
	0: "success",
}

func (p *WorkerServiceResumeJobsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkerServiceResumeJobsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceResumeJobsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceResumeJobsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceResumeJobsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResumeJobs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceResumeJobsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WorkerServiceResumeJobsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceResumeJobsResult(%+v)", *p)

}

func (p *WorkerServiceResumeJobsResult) DeepEqual(ano *WorkerServiceResumeJobsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *WorkerServiceResumeJobsResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type WorkerServiceRunArgs struct {
	JobIds []int64 `thrift:"jobIds,1" frugal:"1,default,list<i64>" json:"jobIds"`
}

func NewWorkerServiceRunArgs() *WorkerServiceRunArgs {
	return &WorkerServiceRunArgs{}
}

func (p *WorkerServiceRunArgs) InitDefault() {
	*p = WorkerServiceRunArgs{}
}

func (p *WorkerServiceRunArgs) GetJobIds() (v []int64) {
	return p.JobIds
}
func (p *WorkerServiceRunArgs) SetJobIds(val []int64) {
	p.JobIds = val
}

var fieldIDToName_WorkerServiceRunArgs = map[int16]string{
	1: "jobIds",
}

func (p *WorkerServiceRunArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceRunArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceRunArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.JobIds = make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.JobIds = append(p.JobIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceRunArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Run_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceRunArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("jobIds", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.JobIds)); err != nil {
		return err
	}
	for _, v := range p.JobIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WorkerServiceRunArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceRunArgs(%+v)", *p)

}

func (p *WorkerServiceRunArgs) DeepEqual(ano *WorkerServiceRunArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JobIds) {
		return false
	}
	return true
}

func (p *WorkerServiceRunArgs) Field1DeepEqual(src []int64) bool {

	if len(p.JobIds) != len(src) {
		return false
	}
	for i, v := range p.JobIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type WorkerServiceRunResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewWorkerServiceRunResult() *WorkerServiceRunResult {
	return &WorkerServiceRunResult{}
}

func (p *WorkerServiceRunResult) InitDefault() {
	*p = WorkerServiceRunResult{}
}

var WorkerServiceRunResult_Success_DEFAULT *BaseResp

func (p *WorkerServiceRunResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return WorkerServiceRunResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WorkerServiceRunResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_WorkerServiceRunResult = map[int16]string{
	0: "success",
}

func (p *WorkerServiceRunResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkerServiceRunResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceRunResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceRunResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceRunResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Run_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceRunResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WorkerServiceRunResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceRunResult(%+v)", *p)

}

func (p *WorkerServiceRunResult) DeepEqual(ano *WorkerServiceRunResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *WorkerServiceRunResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type WorkerServiceUpdateJobArgs struct {
	Job *JobInfo `thrift:"job,1" frugal:"1,default,JobInfo" json:"job"`
}

func NewWorkerServiceUpdateJobArgs() *WorkerServiceUpdateJobArgs {
	return &WorkerServiceUpdateJobArgs{}
}

func (p *WorkerServiceUpdateJobArgs) InitDefault() {
	*p = WorkerServiceUpdateJobArgs{}
}

var WorkerServiceUpdateJobArgs_Job_DEFAULT *JobInfo

func (p *WorkerServiceUpdateJobArgs) GetJob() (v *JobInfo) {
	if !p.IsSetJob() {
		return WorkerServiceUpdateJobArgs_Job_DEFAULT
	}
	return p.Job
}
func (p *WorkerServiceUpdateJobArgs) SetJob(val *JobInfo) {
	p.Job = val
}

var fieldIDToName_WorkerServiceUpdateJobArgs = map[int16]string{
	1: "job",
}

func (p *WorkerServiceUpdateJobArgs) IsSetJob() bool {
	return p.Job != nil
}

func (p *WorkerServiceUpdateJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceUpdateJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceUpdateJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Job = NewJobInfo()
	if err := p.Job.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceUpdateJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceUpdateJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Job.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WorkerServiceUpdateJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceUpdateJobArgs(%+v)", *p)

}

func (p *WorkerServiceUpdateJobArgs) DeepEqual(ano *WorkerServiceUpdateJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Job) {
		return false
	}
	return true
}

func (p *WorkerServiceUpdateJobArgs) Field1DeepEqual(src *JobInfo) bool {

	if !p.Job.DeepEqual(src) {
		return false
	}
	return true
}

type WorkerServiceUpdateJobResult struct {
	Success *BaseResp `thrift:"success,0,optional" frugal:"0,optional,BaseResp" json:"success,omitempty"`
}

func NewWorkerServiceUpdateJobResult() *WorkerServiceUpdateJobResult {
	return &WorkerServiceUpdateJobResult{}
}

func (p *WorkerServiceUpdateJobResult) InitDefault() {
	*p = WorkerServiceUpdateJobResult{}
}

var WorkerServiceUpdateJobResult_Success_DEFAULT *BaseResp

func (p *WorkerServiceUpdateJobResult) GetSuccess() (v *BaseResp) {
	if !p.IsSetSuccess() {
		return WorkerServiceUpdateJobResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WorkerServiceUpdateJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResp)
}

var fieldIDToName_WorkerServiceUpdateJobResult = map[int16]string{
	0: "success",
}

func (p *WorkerServiceUpdateJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkerServiceUpdateJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkerServiceUpdateJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WorkerServiceUpdateJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *WorkerServiceUpdateJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkerServiceUpdateJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *WorkerServiceUpdateJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerServiceUpdateJobResult(%+v)", *p)

}

func (p *WorkerServiceUpdateJobResult) DeepEqual(ano *WorkerServiceUpdateJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *WorkerServiceUpdateJobResult) Field0DeepEqual(src *BaseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
