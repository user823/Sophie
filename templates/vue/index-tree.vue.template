<template>
    <div class="app-container">
        <el-form :model="queryParams" ref="queryForm" size="small" :inline="true" v-show="showSearch" label-width="68px">
{{range .columns -}}
{{if require .IsQuery -}}
{{$comment := getColumnComment .ColumnCoumnet -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
{{if eq .HtmlType "input" -}}
            <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                <el-input
                    v-model="queryParams.{{$AttrName}}"
                    placeholder="请输入{{$comment}}"
                    clearable
                    @keyup.enter.native="handleQuery"
                />
            </el-form-item>
{{else if and (eq .HtmlType "select" "radio") (.DictType) -}}
            <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                <el-select v-model="queryParams.{{$AttrName}}" placeholder="请选择{{$comment}}" clearable>
                    <el-option
                        v-for="dict in dict.type.{{.DictType}}"
                        :key="dict.value"
                        :label="dict.label"
                        :value="dict.value"
                    />
                </el-select>
            </el-form-item>
{{else if and (eq .HtmlType "datetime") (ne .QueryType "BETWEEN") -}}
            <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                <el-date-picker clearable
                    v-model="queryParams.{{$AttrName}}"
                    type="date"
                    value-format="yyyy-MM-dd"
                    placeholder="选择{{$comment}}">
                </el-date-picker>
            </el-form-item>
{{else if and (eq .HtmlType "datetime") (eq .QueryType "BETWEEN") -}}
            <el-form-item label="{{$comment}}">
                <el-date-picker
                    v-model="daterange${{$AttrName}}"
                    style="width: 240px"
                    value-format="yyyy-MM-dd"
                    type="daterange"
                    range-separator="-"
                    start-placeholder="开始日期"
                    end-placeholder="结束日期"
                ></el-date-picker>
            </el-form-item>
{{end}}
{{end}}
{{end}}
            <el-form-item>
	            <el-button type="primary" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
                <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
            </el-form-item>
        </el-form>

        <el-row :gutter="10" class="mb8">
            <el-col :span="1.5">
                <el-button
                    type="primary"
                    plain
                    icon="el-icon-plus"
                    size="mini"
                    @click="handleAdd"
                    v-hasPermi="['{{.moduleName}}:{{.businessName}}:add']"
                >新增</el-button>
            </el-col>
            <el-col :span="1.5">
                <el-button
                    type="info"
                    plain
                    icon="el-icon-sort"
                    size="mini"
                    @click="toggleExpandAll"
                >展开/折叠</el-button>
            </el-col>
            <right-toolbar :showSearch.sync="showSearch" @queryTable="getList"></right-toolbar>
        </el-row>

        <el-table
            v-if="refreshTable"
            v-loading="loading"
            :data="{{.businessName}}List"
            row-key="{{.treeCode}}"
            :default-expand-all="isExpandAll"
            :tree-props="{children: 'children', hasChildren: 'hasChildren'}"
        >
{{range $index, $elem := .columns -}}
{{$comment := getColumnComment .ColumnCoumnet -}}
{{$AttrName := CamelCaseToSnakeCase $AttrName -}}
{{if require .IsPk -}}
{{else if and (require .IsList) (eq .HtmlType "datetime") -}}
            <el-table-column label="{{$comment}}" align="center" prop="{{$AttrName}}" width="180">
                <template slot-scope="scope">
                    <span>{{"{{"}}  parseTime(scope.row.{{$AttrName}} ) {{"}}"}}</span>
                </template>
            </el-table-column>
{{else if and (require .IsList) (eq .HtmlType "imageUpload") -}}
            <el-table-column label="{{.comment}}" align="center" prop="{{$AttrName}} width="100">
                <template slot-scope="scope">
                    <image-preview :src="scope.row.{{$AttrName}}" :width="50" :height="50"/>
                <template>
            <el-table-column>
{{else if and (require .IsList) (.DictType) -}}
            <el-table-column label="{{.comment}}" align="center" prop="{{$AttrName}}">
                <template slot-scope="scope">
{{if eq .HtmlType "checkbox" -}}
                    <dict-tag :options="dict.type.{{.DictType}}" :value="scope.row.{{$AttrName}} ? scope.row.{{$AttrName}}.split(',') : []"/>
{{else -}}
                    <dict-tag :options="dict.type.{{.DictType}}" :value="scope.row.{{$AttrName}}"/>
{{end}}
                </template>
            <el-table-column>
{{else if and (require .IsList) ($AttrName) -}}
{{if eq $index 1 -}}
            <el-table-column label="{{$comment}}" prop={{$AttrName}} />
{{else}}
            <el-table-column label="{{.comment}}" align="center" prop="{{.GoFiled}}" />
{{end}}
{{end}}
{{end}}
            <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
                <template slot-scope="scope">
                    <el-button
                        size="mini"
                        type="text"
                        icon="el-icon-edit"
                        @click="handleUpdate(scope.row)"
                        v-hasPermi="['{{.moduleName}}:{{.businessName}}:edit']"
                    >修改</el-button>
                    <el-button
                        size="mini"
                        type="text"
                        icon="el-icon-edit"
                        @click="handleAdd(scope.row)"
                        v-hasPermi="['{{.moduleName}}:{{.businessName}}:add']"
                    >新增</el-button>
                    <el-button
                        size="mini"
                        type="text"
                        icon="el-icon-delete"
                        @click="handleDelete(scope.row)"
                        v-hasPermi="['{{.moduleName}}:{{.businessName}}:remove']"
                    >删除</el-button>
                </template>
            </el-table-column>
        </el-table>

        <!-- 添加或修改{{.functionName}}对话框 -->
        <el-dialog :title="title" :visible.sync="open" width="500px" append-to-body>
            <el-form ref="form" :model="form" :rules="rules" label-width="80px">
{{$treeParentCode := .treeParentCode -}}
{{$businessName := .businessName -}}
{{range .columns -}}
{{if and (require .IsInsert) (not (require .IsPk)) -}}
{{if or (.IsUsableColumn) (not (.IsSuperColumn)) -}}
{{$comment := getColumnComment .ColumnComment -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
{{if and ($treeParentCode) (eq .GoField $treeParentCode) -}}
                <el-form-item label="{{$comment}}" prop="{{$treeParentCode}}">
                    <treeselect v-model="form.{{$treeParentCode}}" :options="{{$businessName}}Options" :normalizer="normalizer" placeholder="请选择{{$comment}}" />
                </el-form-item>
{{else if .HtmlType "input" -}}
                <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                    <el-input v-model="form.{{$AttrName}}" placeholder="请输入{{$comment}}" />
                </el-form-item>
{{else if .HtmlType "imageUpload" -}}
                <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                    <image-upload v-model="form.{{$AttrName}}"/>
                </el-form-item>
{{else if .HtmlType "fileUpload" -}}
                <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                    <file-upload v-model="form.{{$AttrName}}"/>
                </el-form-item>
{{else if .HtmlType "editor" -}}
                <el-form-item label="{{$comment}}">
                    <editor v-model="form.{{$AttrName}}" :min-height="192"/>
                </el-form-item>
{{else if and (eq .HtmlType "select") (.DictType) -}}
                <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                    <el-select v-model="form.{{$AttrName}}" placeholder="请选择{{$comment}}">
                        <el-option
                            v-for="dict in dict.type.{{.DictType}}"
                            :key="dict.value"
                            :label="dict.label"
{{if eq .GoType "int64" -}}
                            :value="parseInt(dict.value)"
{{else -}}
                            :value="dict.value"
{{end}}
                        ></el-option>
                    </el-select>
                </el-form-item>
{{else if and (eq .HtmlType "checkbox") (.DictType) -}}
                <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                    <el-checkbox-group v-model="form.{{.GoFeild}}">
                        <el-checkbox
                            v-for="dict in dict.type.{{.DictType}}"
                            :key="dict.value"
                            :label="dict.value">
                            {{"{{"}}dict.label{{"}}"}}
                        </el-checkbox>
                    </el-checkbox-group>
                </el-form-item>
{{else if and (eq .HtmlType "radio") (.DictType) -}}
                <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                    <el-radio-group v-model="form.{{$AttrName}}">
                        <el-radio
                            v-for="dict in dict.type.{{.DictType}}"
                            :key="dict.value"
{{if eq .GoType "int64" -}}
                            :label="parseInt(dict.value)"
{{else -}}
                            :label="dict.value"
{{end}}
                        >{{"{{"}}dict.label{{"}}"}}</el-radio>
                    </el-radio-group>
                </el-form-item>
{{else if .HtmlType "datetime" -}}
                <el-form-item label="{{$comment}}" prop="{{$AttrName}}">
                    <el-date-picker clearable
                        v-model="form.${field}"
                        type="date"
                        value-format="yyyy-MM-dd"
                        placeholder="请选择{{$comment}}">
                    </el-date-picker>
                </el-form-item>
{{else if .HtmlType "textarea" -}}
                <el-form-item label="{{$comment}}" prop="{{$AttrName}}"
                    <el-input v-model="form.{{$AttrName}}" type="textarea" placeholder="请输入内容" />
                <el-form-item>
{{end}}
{{end}}
{{end}}
{{end}}
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button type="primary" @click="submitForm">确 定</el-button>
                <el-button @click="cancel">取 消</el-button>
            </div>
        </el-dialog>
    </div>
</template>

<script>
import { list{{.BusinessName}}, get{{.BusinessName}}, del{{.BusinessName}}, add{{.BusinessName}}, update{{.BusinessName}} } from "@/api/{{.moduleName}}/{{.businessName}}";
import Treeselect from "@riophae/vue-treeselect";
import "@riophae/vue-treeselect/dist/vue-treeselect.css";

export default {
    name: "{{.BusinessName}}",
{{if .dicts -}}
    dicts: [{{.dicts}}],
{{end}}
    components: {
        Treeselect
    },
    data() {
        return {
            // 遮罩层
            loading: true,
            // 显示搜索条件
            showSearch: true,
            // {{.functionName}}表格数据
            {{.businessName}}List: [],
            // {{.functionName}}树选项
            {{.businessName}}Options: [],
            // 弹出层标题
            title: "",
            // 是否显示弹出层
            open: false,
            // 是否展开，默认全部展开
            isExpandAll: true,
            // 是否渲染表格状态
            refreshTable: true,
{{range .columns -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
{{if and (eq .HtmlType "datetime") (eq .QueryType "BETWEEN") -}}
            daterange{{.GoField}}: [],
{{end}}
{{end}}
            // 查询参数
            queryParams: {
{{$columnlength := len .columns -}}
{{range $index, $elem := .columns -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
{{if require .IsQuery -}}
                {{$AttrName}}: null{{if ne $index (sub $columnlength 1) -}},{{end}}
{{end}}
{{end}}
            },
            // 表单参数
            form: {},
            // 表单校验
            rules: {
{{$columnlength := len .columns -}}
{{range $index, $elem := .columns -}}
{{if require .IsRequire -}}
{{$comment := getColumnComment .ColumnComment -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
                {{$AttrName}}: [
                    { required: true, message: "{{$comment}}不能为空", trigger: {{if eq .HtmlType "select" "radio" -}}"change"{{else}}"blur"{{end}} }
                ]{{if ne $index $columnlength}},{{end}}
{{end}}
{{end}}
            }
        };
    },
    created() {
        this.getList();
    },
    methods: {
        /** 查询{{.functionName}}列表 */
        getList() {
            this.loading = true;
{{range .columns -}}
{{if and (eq .HtmlType "datetime") (eq .QueryType "BETWEEN") -}}
            this.queryParams.params = {};
{{break}}
{{end}}
{{end}}
{{range .columns -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
{{if and (eq .HtmlType "datetime") (eq .QueryType "BETWEEN") -}}
            if (null != this.daterange{{.GoField}} && '' != this.daterange{{.GoField}}) {
                this.queryParams.params["begin{{.GoField}}"] = this.daterange{{.GoField}}[0];
                this.queryParams.params["end{{.GoField}}"] = this.daterange{{.GoField}}[1];
            }
{{end}}
{{end}}
            list{{.BusinessName}}(this.queryParams).then(response => {
                this.{{.businessName}}List = this.handleTree(response.data, "{{.treeCode}}", "{{.treeParentCode}}");
                this.loading = false;
            });
        },
        /** 转换{{.functionName}}数据结构 */
        normalizer(node) {
            if (node.children && !node.children.length) {
                delete node.children;
            }
            return {
                id: node.{{.treeCode}},
                label: node.{{.treeName}},
                children: node.children
            };
        },
        /** 查询{{.functionName}}下拉树结构 */
        getTreeselect() {
            list{{.BusinessName}}().then(response => {
                this.{{.businessName}}Options = [];
                const data = { {{.treeCode}}: 0, {{.treeName}}: '顶级节点', children: [] };
                data.children = this.handleTree(response.data, "{{.treeCode}}", "{{.treeParentCode}}");
                this.{{.businessName}}Options.push(data);
            });
        },
        // 取消按钮
        cancel() {
            this.open = false;
            this.reset();
        },
        // 表单重置
        reset() {
        this.form = {
{{$columnlength := len .columns -}}
{{range $index, $elem := .columns -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
{{if eq .HtmlType "checkbox" -}}
            {{$AttrName}}: []{{if ne $index (sub $columnlength 1) -}},{{end}}
{{else}}
            {{$AttrName}}: null{{if ne $index (sub $columnlength 1) -}},{{end}}
{{end}}
{{end}}
        };
        this.resetForm("form");
    },
        /** 搜索按钮操作 */
        handleQuery() {
            this.queryParams.pageNum = 1;
            this.getList();
        },
        /** 重置按钮操作 */
        resetQuery() {
{{range .columns -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
{{if and (eq .HtmlType "datetime") (eq .QueryType "BETWEEN") -}}
            this.daterange{{.GoField}} = [];
{{end}}
{{end}}
            this.resetForm("queryForm");
            this.handleQuery();
        },
        /** 新增按钮操作 */
        handleAdd(row) {
            this.reset();
            this.getTreeselect();
            if (row != null && row.{{.treeCode}}) {
                this.form.{{.treeParentCode}} = row.{{.treeCode}};
            } else {
                this.form.{{.treeParentCode}} = 0;
            }
            this.open = true;
            this.title = "添加{{.functionName}}";
        },
        /** 展开/折叠操作 */
        toggleExpandAll() {
            this.refreshTable = false;
            this.isExpandAll = !this.isExpandAll;
            this.$nextTick(() => {
                this.refreshTable = true;
            });
        },
        /** 修改按钮操作 */
            handleUpdate(row) {
            this.reset();
            const {{.pkColumn.GoField}} = row.{{.pkColumn.GoField}} || this.ids
            get{{.BusinessName}}({{.pkColumn.GoField}}).then(response => {
                this.form = response.data;
{{range .columns -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
{{if eq .HtmlType "checkbox" -}}
                this.form.{{$AttrName}} = this.form.{{$AttrName}}.split(",");
{{end}}
{{end}}
                this.open = true;
                this.title = "修改{{.functionName}}";
            });
        },
        /** 提交按钮 */
        submitForm() {
            this.#[[$]]#refs["form"].validate(valid => {
                if (valid) {
{{range .columns -}}
{{$AttrName := CamelCaseToSnakeCase .GoField -}}
{{if eq .HtmlType "checkbox" -}}
                    this.form.{{$AttrName}} = this.form.{{$AttrName}}.join(",");
{{end}}
{{end}}
                    if (this.form.{{.pkColumn.GoField}} != null {
                        update{{.BusinessName}}(this.form).then(response => {
                            this.#[[$modal]]#.msgSuccess("修改成功");
                            this.open = false;
                            this.getList();
                        });
                    } else {
                        add{{.BusinessName}}(this.form).then(response => {
                            this.#[[$modal]]#.msgSuccess("新增成功");
                            this.open = false;
                            this.getList();
                        });
                    }
                }
            });
        },
        /** 删除按钮操作 */
        handleDelete(row) {
            this.#[[$modal]]#.confirm('是否确认删除{{.functionName}}编号为"' + {{.pkColumn.GoField}}s + '"的数据项？').then(function() {
                return del{{.BusinessName}}({{.pkColumn.GoField}}s);
            }).then(() => {
                this.getList();
                this.#[[$modal]]#.msgSuccess("删除成功");
            }).catch(() => {});
        }
    }
};
</script>
