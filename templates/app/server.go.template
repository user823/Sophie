package {{.moduleName}}

import (
	"context"
	"github.com/cloudwego/kitex/server"
	"github.com/spf13/viper"
	_ "github.com/spf13/viper/remote"
	"github.com/user823/Sophie/api/domain/{{.moduleName}}/v1"
	"github.com/user823/Sophie/api/thrift/{{.moduleName}}/v1/{{.moduleName}}service"
	"github.com/user823/Sophie/internal/pkg/support"
	"github.com/user823/Sophie/internal/{{.moduleName}}/store/es"
	"github.com/user823/Sophie/internal/{{.moduleName}}/store/mysql"
	"github.com/user823/Sophie/internal/{{.moduleName}}/utils"
	"github.com/user823/Sophie/pkg/db/kv"
	"github.com/user823/Sophie/pkg/db/kv/redis"
	"github.com/user823/Sophie/pkg/log"
	"github.com/user823/Sophie/pkg/log/aggregation"
	"github.com/user823/Sophie/pkg/shutdown"
	"time"
)

type SystemServer struct {
	Gs              *shutdown.GracefulShutdown
	ShutdownTimeout time.Duration
	Analytics       *aggregation.Analytics
	ServerConfig    *Config
	// TODO
	// 这里根据rpcserver、还是http server自行配置
}

func createGatewayServer(cfg *Config) (*SystemServer, error) {
	// 创建基础组件
	gs := shutdown.NewGracefulShutdownInstance(v1.ServiceName)
	gs.SetErrHandler(&utils.GsLogErrHandler{})
	gs.AddShutdownManagers(shutdown.DefaultShutdownManager())
	gs.SetInOrder()

	if cfg.Log.Aggregation {
		r := kv.NewKVStore("redis")
		aggregation.NewAnalytics(cfg.Aggregation, r.(kv.RedisStore), log.GetRecordMagager())
	}

	// TODO
	// 这里创建rpcserver 或者 http server

	return &SystemServer{
		Gs:              gs,
		ShutdownTimeout: cfg.ServerRunConfig.ExitWaitTime,
		Analytics:       aggregation.GetAnalytics(),
        // 创建server 实例
		ServerConfig:    cfg,
	}, nil
}

// app 预启动阶段
func (s *SystemServer) PrepareRun() *SystemServer {
	ctx, cancel := context.WithCancel(context.Background())

	// 创建后台任务
	viperTask := support.GoTask{}
	viperTask.Run = func(ctx context.Context) (interface{}, error) {
		// 每5s 拉取一次配置信息
		for viperTask.Status() == support.STARTED {
			viperTask.WaitForRunning(5 * time.Second)
			if err := viper.WatchRemoteConfig(); err != nil {
				log.Debug("Read remoting config err: %s", err.Error())
			}
		}
		return nil, nil
	}

	// 初始化服务组件

	// 设置关停回调
	s.Gs.AddShutdownCallbacks(func(msg string) error {
		log.Info("Starting graceful shutdown...")
		cancel()
		return nil
	})
	s.Gs.AddShutdownCallbacks(func(msg string) error {
		log.Infof("%s: viper service is closing...", msg)
		viperTask.Shutdown(support.NOW)
		return nil
	})
	if s.ServerConfig.Log.Aggregation {
		s.Gs.AddShutdownCallbacks(func(msg string) error {
			log.Infof("%s: log aggregation is closing...", msg)
			aggregation.GetAnalytics().Stop()
			return nil
		})
	}

	// 最后关闭服务

	// 启动各种定时任务
	viperTask.Start()
	go redis.KeepConnection(ctx, s.ServerConfig.Redis)
	return s
}

func (s *SystemServer) Run() error {
	// 启动各种服务组件
	if s.ServerConfig.Log.Aggregation {
		s.Analytics.Start()
	}

	// 开启优雅关停监听
	if err := s.Gs.Start(); err != nil {
		return err
	}

	// 运行服务

	return s.Server.Run()
}
