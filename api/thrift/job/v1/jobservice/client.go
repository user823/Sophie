// Code generated by Kitex v0.8.0. DO NOT EDIT.

package jobservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	v1 "github.com/user823/Sophie/api/thrift/job/v1"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ListJobs(ctx context.Context, req *v1.ListJobsRequest, callOptions ...callopt.Option) (r *v1.ListJobsResponse, err error)
	ExportJobs(ctx context.Context, req *v1.ExportJobsRequest, callOptions ...callopt.Option) (r *v1.ExportJobsResponse, err error)
	GetJobInfo(ctx context.Context, jobId int64, callOptions ...callopt.Option) (r *v1.GetJobInfoResponse, err error)
	CreateJob(ctx context.Context, req *v1.CreateJobRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	UpdateJob(ctx context.Context, req *v1.UpdateJobRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	ChangeStatus(ctx context.Context, req *v1.ChangeStatusRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	Run(ctx context.Context, req *v1.RunRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	RemoveJobs(ctx context.Context, req *v1.RemoveJobsRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	ListJobLogs(ctx context.Context, req *v1.ListJobLogsRequest, callOptions ...callopt.Option) (r *v1.ListJobLogsResponse, err error)
	ExportJobLogs(ctx context.Context, req *v1.ExportJobLogsRequest, callOptions ...callopt.Option) (r *v1.ExportJobLogsResponse, err error)
	GetJobLogInfo(ctx context.Context, jobLogId int64, callOptions ...callopt.Option) (r *v1.GetJobLogInfoResponse, err error)
	RemoveJobLogs(ctx context.Context, req *v1.RemoveJobLogsRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
	Clean(ctx context.Context, callOptions ...callopt.Option) (r *v1.BaseResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kJobServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kJobServiceClient struct {
	*kClient
}

func (p *kJobServiceClient) ListJobs(ctx context.Context, req *v1.ListJobsRequest, callOptions ...callopt.Option) (r *v1.ListJobsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListJobs(ctx, req)
}

func (p *kJobServiceClient) ExportJobs(ctx context.Context, req *v1.ExportJobsRequest, callOptions ...callopt.Option) (r *v1.ExportJobsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ExportJobs(ctx, req)
}

func (p *kJobServiceClient) GetJobInfo(ctx context.Context, jobId int64, callOptions ...callopt.Option) (r *v1.GetJobInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetJobInfo(ctx, jobId)
}

func (p *kJobServiceClient) CreateJob(ctx context.Context, req *v1.CreateJobRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateJob(ctx, req)
}

func (p *kJobServiceClient) UpdateJob(ctx context.Context, req *v1.UpdateJobRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateJob(ctx, req)
}

func (p *kJobServiceClient) ChangeStatus(ctx context.Context, req *v1.ChangeStatusRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ChangeStatus(ctx, req)
}

func (p *kJobServiceClient) Run(ctx context.Context, req *v1.RunRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Run(ctx, req)
}

func (p *kJobServiceClient) RemoveJobs(ctx context.Context, req *v1.RemoveJobsRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveJobs(ctx, req)
}

func (p *kJobServiceClient) ListJobLogs(ctx context.Context, req *v1.ListJobLogsRequest, callOptions ...callopt.Option) (r *v1.ListJobLogsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListJobLogs(ctx, req)
}

func (p *kJobServiceClient) ExportJobLogs(ctx context.Context, req *v1.ExportJobLogsRequest, callOptions ...callopt.Option) (r *v1.ExportJobLogsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ExportJobLogs(ctx, req)
}

func (p *kJobServiceClient) GetJobLogInfo(ctx context.Context, jobLogId int64, callOptions ...callopt.Option) (r *v1.GetJobLogInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetJobLogInfo(ctx, jobLogId)
}

func (p *kJobServiceClient) RemoveJobLogs(ctx context.Context, req *v1.RemoveJobLogsRequest, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveJobLogs(ctx, req)
}

func (p *kJobServiceClient) Clean(ctx context.Context, callOptions ...callopt.Option) (r *v1.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Clean(ctx)
}
