// Code generated by Kitex v0.8.0. DO NOT EDIT.

package workerservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	v1 "github.com/user823/Sophie/api/thrift/schedule/v1"
)

func serviceInfo() *kitex.ServiceInfo {
	return workerServiceServiceInfo
}

var workerServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "WorkerService"
	handlerType := (*v1.WorkerService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateJob":  kitex.NewMethodInfo(createJobHandler, newWorkerServiceCreateJobArgs, newWorkerServiceCreateJobResult, false),
		"RemoveJobs": kitex.NewMethodInfo(removeJobsHandler, newWorkerServiceRemoveJobsArgs, newWorkerServiceRemoveJobsResult, false),
		"PauseJobs":  kitex.NewMethodInfo(pauseJobsHandler, newWorkerServicePauseJobsArgs, newWorkerServicePauseJobsResult, false),
		"ResumeJobs": kitex.NewMethodInfo(resumeJobsHandler, newWorkerServiceResumeJobsArgs, newWorkerServiceResumeJobsResult, false),
		"Run":        kitex.NewMethodInfo(runHandler, newWorkerServiceRunArgs, newWorkerServiceRunResult, false),
		"UpdateJob":  kitex.NewMethodInfo(updateJobHandler, newWorkerServiceUpdateJobArgs, newWorkerServiceUpdateJobResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "v1",
		"ServiceFilePath": `api/thrift/schedule/v1/worker.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func createJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.WorkerServiceCreateJobArgs)
	realResult := result.(*v1.WorkerServiceCreateJobResult)
	success, err := handler.(v1.WorkerService).CreateJob(ctx, realArg.Job)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWorkerServiceCreateJobArgs() interface{} {
	return v1.NewWorkerServiceCreateJobArgs()
}

func newWorkerServiceCreateJobResult() interface{} {
	return v1.NewWorkerServiceCreateJobResult()
}

func removeJobsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.WorkerServiceRemoveJobsArgs)
	realResult := result.(*v1.WorkerServiceRemoveJobsResult)
	success, err := handler.(v1.WorkerService).RemoveJobs(ctx, realArg.JobIds)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWorkerServiceRemoveJobsArgs() interface{} {
	return v1.NewWorkerServiceRemoveJobsArgs()
}

func newWorkerServiceRemoveJobsResult() interface{} {
	return v1.NewWorkerServiceRemoveJobsResult()
}

func pauseJobsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.WorkerServicePauseJobsArgs)
	realResult := result.(*v1.WorkerServicePauseJobsResult)
	success, err := handler.(v1.WorkerService).PauseJobs(ctx, realArg.JobIds)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWorkerServicePauseJobsArgs() interface{} {
	return v1.NewWorkerServicePauseJobsArgs()
}

func newWorkerServicePauseJobsResult() interface{} {
	return v1.NewWorkerServicePauseJobsResult()
}

func resumeJobsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.WorkerServiceResumeJobsArgs)
	realResult := result.(*v1.WorkerServiceResumeJobsResult)
	success, err := handler.(v1.WorkerService).ResumeJobs(ctx, realArg.JobIds)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWorkerServiceResumeJobsArgs() interface{} {
	return v1.NewWorkerServiceResumeJobsArgs()
}

func newWorkerServiceResumeJobsResult() interface{} {
	return v1.NewWorkerServiceResumeJobsResult()
}

func runHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.WorkerServiceRunArgs)
	realResult := result.(*v1.WorkerServiceRunResult)
	success, err := handler.(v1.WorkerService).Run(ctx, realArg.JobIds)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWorkerServiceRunArgs() interface{} {
	return v1.NewWorkerServiceRunArgs()
}

func newWorkerServiceRunResult() interface{} {
	return v1.NewWorkerServiceRunResult()
}

func updateJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.WorkerServiceUpdateJobArgs)
	realResult := result.(*v1.WorkerServiceUpdateJobResult)
	success, err := handler.(v1.WorkerService).UpdateJob(ctx, realArg.Job)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newWorkerServiceUpdateJobArgs() interface{} {
	return v1.NewWorkerServiceUpdateJobArgs()
}

func newWorkerServiceUpdateJobResult() interface{} {
	return v1.NewWorkerServiceUpdateJobResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateJob(ctx context.Context, job *v1.JobInfo) (r *v1.BaseResp, err error) {
	var _args v1.WorkerServiceCreateJobArgs
	_args.Job = job
	var _result v1.WorkerServiceCreateJobResult
	if err = p.c.Call(ctx, "CreateJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveJobs(ctx context.Context, jobIds []int64) (r *v1.BaseResp, err error) {
	var _args v1.WorkerServiceRemoveJobsArgs
	_args.JobIds = jobIds
	var _result v1.WorkerServiceRemoveJobsResult
	if err = p.c.Call(ctx, "RemoveJobs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PauseJobs(ctx context.Context, jobIds []int64) (r *v1.BaseResp, err error) {
	var _args v1.WorkerServicePauseJobsArgs
	_args.JobIds = jobIds
	var _result v1.WorkerServicePauseJobsResult
	if err = p.c.Call(ctx, "PauseJobs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResumeJobs(ctx context.Context, jobIds []int64) (r *v1.BaseResp, err error) {
	var _args v1.WorkerServiceResumeJobsArgs
	_args.JobIds = jobIds
	var _result v1.WorkerServiceResumeJobsResult
	if err = p.c.Call(ctx, "ResumeJobs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Run(ctx context.Context, jobIds []int64) (r *v1.BaseResp, err error) {
	var _args v1.WorkerServiceRunArgs
	_args.JobIds = jobIds
	var _result v1.WorkerServiceRunResult
	if err = p.c.Call(ctx, "Run", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateJob(ctx context.Context, job *v1.JobInfo) (r *v1.BaseResp, err error) {
	var _args v1.WorkerServiceUpdateJobArgs
	_args.Job = job
	var _result v1.WorkerServiceUpdateJobResult
	if err = p.c.Call(ctx, "UpdateJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
