// Code generated by Kitex v0.8.0. DO NOT EDIT.

package genservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	v1 "github.com/user823/Sophie/api/thrift/gen/v1"
)

func serviceInfo() *kitex.ServiceInfo {
	return genServiceServiceInfo
}

var genServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "GenService"
	handlerType := (*v1.GenService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ListGenTables":   kitex.NewMethodInfo(listGenTablesHandler, newGenServiceListGenTablesArgs, newGenServiceListGenTablesResult, false),
		"GetInfo":         kitex.NewMethodInfo(getInfoHandler, newGenServiceGetInfoArgs, newGenServiceGetInfoResult, false),
		"DataList":        kitex.NewMethodInfo(dataListHandler, newGenServiceDataListArgs, newGenServiceDataListResult, false),
		"ColumnList":      kitex.NewMethodInfo(columnListHandler, newGenServiceColumnListArgs, newGenServiceColumnListResult, false),
		"ImportTableSave": kitex.NewMethodInfo(importTableSaveHandler, newGenServiceImportTableSaveArgs, newGenServiceImportTableSaveResult, false),
		"EditSave":        kitex.NewMethodInfo(editSaveHandler, newGenServiceEditSaveArgs, newGenServiceEditSaveResult, false),
		"Remove":          kitex.NewMethodInfo(removeHandler, newGenServiceRemoveArgs, newGenServiceRemoveResult, false),
		"Preview":         kitex.NewMethodInfo(previewHandler, newGenServicePreviewArgs, newGenServicePreviewResult, false),
		"Download":        kitex.NewMethodInfo(downloadHandler, newGenServiceDownloadArgs, newGenServiceDownloadResult, false),
		"GenCode":         kitex.NewMethodInfo(genCodeHandler, newGenServiceGenCodeArgs, newGenServiceGenCodeResult, false),
		"SynchDb":         kitex.NewMethodInfo(synchDbHandler, newGenServiceSynchDbArgs, newGenServiceSynchDbResult, false),
		"BatchGenCode":    kitex.NewMethodInfo(batchGenCodeHandler, newGenServiceBatchGenCodeArgs, newGenServiceBatchGenCodeResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "v1",
		"ServiceFilePath": `api/thrift/gen/v1/gen.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func listGenTablesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceListGenTablesArgs)
	realResult := result.(*v1.GenServiceListGenTablesResult)
	success, err := handler.(v1.GenService).ListGenTables(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceListGenTablesArgs() interface{} {
	return v1.NewGenServiceListGenTablesArgs()
}

func newGenServiceListGenTablesResult() interface{} {
	return v1.NewGenServiceListGenTablesResult()
}

func getInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceGetInfoArgs)
	realResult := result.(*v1.GenServiceGetInfoResult)
	success, err := handler.(v1.GenService).GetInfo(ctx, realArg.TableId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceGetInfoArgs() interface{} {
	return v1.NewGenServiceGetInfoArgs()
}

func newGenServiceGetInfoResult() interface{} {
	return v1.NewGenServiceGetInfoResult()
}

func dataListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceDataListArgs)
	realResult := result.(*v1.GenServiceDataListResult)
	success, err := handler.(v1.GenService).DataList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceDataListArgs() interface{} {
	return v1.NewGenServiceDataListArgs()
}

func newGenServiceDataListResult() interface{} {
	return v1.NewGenServiceDataListResult()
}

func columnListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceColumnListArgs)
	realResult := result.(*v1.GenServiceColumnListResult)
	success, err := handler.(v1.GenService).ColumnList(ctx, realArg.TableId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceColumnListArgs() interface{} {
	return v1.NewGenServiceColumnListArgs()
}

func newGenServiceColumnListResult() interface{} {
	return v1.NewGenServiceColumnListResult()
}

func importTableSaveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceImportTableSaveArgs)
	realResult := result.(*v1.GenServiceImportTableSaveResult)
	success, err := handler.(v1.GenService).ImportTableSave(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceImportTableSaveArgs() interface{} {
	return v1.NewGenServiceImportTableSaveArgs()
}

func newGenServiceImportTableSaveResult() interface{} {
	return v1.NewGenServiceImportTableSaveResult()
}

func editSaveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceEditSaveArgs)
	realResult := result.(*v1.GenServiceEditSaveResult)
	success, err := handler.(v1.GenService).EditSave(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceEditSaveArgs() interface{} {
	return v1.NewGenServiceEditSaveArgs()
}

func newGenServiceEditSaveResult() interface{} {
	return v1.NewGenServiceEditSaveResult()
}

func removeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceRemoveArgs)
	realResult := result.(*v1.GenServiceRemoveResult)
	success, err := handler.(v1.GenService).Remove(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceRemoveArgs() interface{} {
	return v1.NewGenServiceRemoveArgs()
}

func newGenServiceRemoveResult() interface{} {
	return v1.NewGenServiceRemoveResult()
}

func previewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServicePreviewArgs)
	realResult := result.(*v1.GenServicePreviewResult)
	success, err := handler.(v1.GenService).Preview(ctx, realArg.TableId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServicePreviewArgs() interface{} {
	return v1.NewGenServicePreviewArgs()
}

func newGenServicePreviewResult() interface{} {
	return v1.NewGenServicePreviewResult()
}

func downloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceDownloadArgs)
	realResult := result.(*v1.GenServiceDownloadResult)
	success, err := handler.(v1.GenService).Download(ctx, realArg.TableName)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceDownloadArgs() interface{} {
	return v1.NewGenServiceDownloadArgs()
}

func newGenServiceDownloadResult() interface{} {
	return v1.NewGenServiceDownloadResult()
}

func genCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceGenCodeArgs)
	realResult := result.(*v1.GenServiceGenCodeResult)
	success, err := handler.(v1.GenService).GenCode(ctx, realArg.TableName)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceGenCodeArgs() interface{} {
	return v1.NewGenServiceGenCodeArgs()
}

func newGenServiceGenCodeResult() interface{} {
	return v1.NewGenServiceGenCodeResult()
}

func synchDbHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceSynchDbArgs)
	realResult := result.(*v1.GenServiceSynchDbResult)
	success, err := handler.(v1.GenService).SynchDb(ctx, realArg.TableName)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceSynchDbArgs() interface{} {
	return v1.NewGenServiceSynchDbArgs()
}

func newGenServiceSynchDbResult() interface{} {
	return v1.NewGenServiceSynchDbResult()
}

func batchGenCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.GenServiceBatchGenCodeArgs)
	realResult := result.(*v1.GenServiceBatchGenCodeResult)
	success, err := handler.(v1.GenService).BatchGenCode(ctx, realArg.Tables)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGenServiceBatchGenCodeArgs() interface{} {
	return v1.NewGenServiceBatchGenCodeArgs()
}

func newGenServiceBatchGenCodeResult() interface{} {
	return v1.NewGenServiceBatchGenCodeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ListGenTables(ctx context.Context, req *v1.ListGenTablesRequest) (r *v1.ListGenTablesResponse, err error) {
	var _args v1.GenServiceListGenTablesArgs
	_args.Req = req
	var _result v1.GenServiceListGenTablesResult
	if err = p.c.Call(ctx, "ListGenTables", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetInfo(ctx context.Context, tableId int64) (r *v1.GetInfoResponse, err error) {
	var _args v1.GenServiceGetInfoArgs
	_args.TableId = tableId
	var _result v1.GenServiceGetInfoResult
	if err = p.c.Call(ctx, "GetInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DataList(ctx context.Context, req *v1.DataListRequest) (r *v1.ListGenTablesResponse, err error) {
	var _args v1.GenServiceDataListArgs
	_args.Req = req
	var _result v1.GenServiceDataListResult
	if err = p.c.Call(ctx, "DataList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ColumnList(ctx context.Context, tableId int64) (r *v1.ListGenTableColumnsResponse, err error) {
	var _args v1.GenServiceColumnListArgs
	_args.TableId = tableId
	var _result v1.GenServiceColumnListResult
	if err = p.c.Call(ctx, "ColumnList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportTableSave(ctx context.Context, req *v1.ImportTableSaveRequest) (r *v1.BaseResp, err error) {
	var _args v1.GenServiceImportTableSaveArgs
	_args.Req = req
	var _result v1.GenServiceImportTableSaveResult
	if err = p.c.Call(ctx, "ImportTableSave", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EditSave(ctx context.Context, req *v1.EditSaveRequest) (r *v1.BaseResp, err error) {
	var _args v1.GenServiceEditSaveArgs
	_args.Req = req
	var _result v1.GenServiceEditSaveResult
	if err = p.c.Call(ctx, "EditSave", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Remove(ctx context.Context, req *v1.RemoveRequest) (r *v1.BaseResp, err error) {
	var _args v1.GenServiceRemoveArgs
	_args.Req = req
	var _result v1.GenServiceRemoveResult
	if err = p.c.Call(ctx, "Remove", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Preview(ctx context.Context, tableId int64) (r *v1.PreviewResponse, err error) {
	var _args v1.GenServicePreviewArgs
	_args.TableId = tableId
	var _result v1.GenServicePreviewResult
	if err = p.c.Call(ctx, "Preview", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Download(ctx context.Context, tableName string) (r *v1.DownloadResponse, err error) {
	var _args v1.GenServiceDownloadArgs
	_args.TableName = tableName
	var _result v1.GenServiceDownloadResult
	if err = p.c.Call(ctx, "Download", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GenCode(ctx context.Context, tableName string) (r *v1.BaseResp, err error) {
	var _args v1.GenServiceGenCodeArgs
	_args.TableName = tableName
	var _result v1.GenServiceGenCodeResult
	if err = p.c.Call(ctx, "GenCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SynchDb(ctx context.Context, tableName string) (r *v1.BaseResp, err error) {
	var _args v1.GenServiceSynchDbArgs
	_args.TableName = tableName
	var _result v1.GenServiceSynchDbResult
	if err = p.c.Call(ctx, "SynchDb", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGenCode(ctx context.Context, tables string) (r *v1.DownloadResponse, err error) {
	var _args v1.GenServiceBatchGenCodeArgs
	_args.Tables = tables
	var _result v1.GenServiceBatchGenCodeResult
	if err = p.c.Call(ctx, "BatchGenCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
