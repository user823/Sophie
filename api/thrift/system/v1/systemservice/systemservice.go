// Code generated by Kitex v0.8.0. DO NOT EDIT.

package systemservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	v1 "github.com/user823/Sophie/api/thrift/system/v1"
)

func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

var systemServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*v1.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ListConfigs":             kitex.NewMethodInfo(listConfigsHandler, newSystemServiceListConfigsArgs, newSystemServiceListConfigsResult, false),
		"ExportConfig":            kitex.NewMethodInfo(exportConfigHandler, newSystemServiceExportConfigArgs, newSystemServiceExportConfigResult, false),
		"GetConfigById":           kitex.NewMethodInfo(getConfigByIdHandler, newSystemServiceGetConfigByIdArgs, newSystemServiceGetConfigByIdResult, false),
		"GetConfigByKey":          kitex.NewMethodInfo(getConfigByKeyHandler, newSystemServiceGetConfigByKeyArgs, newSystemServiceGetConfigByKeyResult, false),
		"CreateConfig":            kitex.NewMethodInfo(createConfigHandler, newSystemServiceCreateConfigArgs, newSystemServiceCreateConfigResult, false),
		"UpdateConfig":            kitex.NewMethodInfo(updateConfigHandler, newSystemServiceUpdateConfigArgs, newSystemServiceUpdateConfigResult, false),
		"DeleteConfig":            kitex.NewMethodInfo(deleteConfigHandler, newSystemServiceDeleteConfigArgs, newSystemServiceDeleteConfigResult, false),
		"RefreshConfig":           kitex.NewMethodInfo(refreshConfigHandler, newSystemServiceRefreshConfigArgs, newSystemServiceRefreshConfigResult, false),
		"ListDepts":               kitex.NewMethodInfo(listDeptsHandler, newSystemServiceListDeptsArgs, newSystemServiceListDeptsResult, false),
		"ListDeptsExcludeChild":   kitex.NewMethodInfo(listDeptsExcludeChildHandler, newSystemServiceListDeptsExcludeChildArgs, newSystemServiceListDeptsExcludeChildResult, false),
		"GetDeptById":             kitex.NewMethodInfo(getDeptByIdHandler, newSystemServiceGetDeptByIdArgs, newSystemServiceGetDeptByIdResult, false),
		"CreateDept":              kitex.NewMethodInfo(createDeptHandler, newSystemServiceCreateDeptArgs, newSystemServiceCreateDeptResult, false),
		"UpdateDept":              kitex.NewMethodInfo(updateDeptHandler, newSystemServiceUpdateDeptArgs, newSystemServiceUpdateDeptResult, false),
		"DeleteDept":              kitex.NewMethodInfo(deleteDeptHandler, newSystemServiceDeleteDeptArgs, newSystemServiceDeleteDeptResult, false),
		"ListDictDatas":           kitex.NewMethodInfo(listDictDatasHandler, newSystemServiceListDictDatasArgs, newSystemServiceListDictDatasResult, false),
		"ExportDictData":          kitex.NewMethodInfo(exportDictDataHandler, newSystemServiceExportDictDataArgs, newSystemServiceExportDictDataResult, false),
		"GetDictDataByCode":       kitex.NewMethodInfo(getDictDataByCodeHandler, newSystemServiceGetDictDataByCodeArgs, newSystemServiceGetDictDataByCodeResult, false),
		"ListDictDataByType":      kitex.NewMethodInfo(listDictDataByTypeHandler, newSystemServiceListDictDataByTypeArgs, newSystemServiceListDictDataByTypeResult, false),
		"CreateDictData":          kitex.NewMethodInfo(createDictDataHandler, newSystemServiceCreateDictDataArgs, newSystemServiceCreateDictDataResult, false),
		"UpdateDictData":          kitex.NewMethodInfo(updateDictDataHandler, newSystemServiceUpdateDictDataArgs, newSystemServiceUpdateDictDataResult, false),
		"DeleteDictData":          kitex.NewMethodInfo(deleteDictDataHandler, newSystemServiceDeleteDictDataArgs, newSystemServiceDeleteDictDataResult, false),
		"ListDictTypes":           kitex.NewMethodInfo(listDictTypesHandler, newSystemServiceListDictTypesArgs, newSystemServiceListDictTypesResult, false),
		"ExportDictType":          kitex.NewMethodInfo(exportDictTypeHandler, newSystemServiceExportDictTypeArgs, newSystemServiceExportDictTypeResult, false),
		"GetDictTypeById":         kitex.NewMethodInfo(getDictTypeByIdHandler, newSystemServiceGetDictTypeByIdArgs, newSystemServiceGetDictTypeByIdResult, false),
		"CreateDictType":          kitex.NewMethodInfo(createDictTypeHandler, newSystemServiceCreateDictTypeArgs, newSystemServiceCreateDictTypeResult, false),
		"UpdateDictType":          kitex.NewMethodInfo(updateDictTypeHandler, newSystemServiceUpdateDictTypeArgs, newSystemServiceUpdateDictTypeResult, false),
		"DeleteDictType":          kitex.NewMethodInfo(deleteDictTypeHandler, newSystemServiceDeleteDictTypeArgs, newSystemServiceDeleteDictTypeResult, false),
		"RefreshDictType":         kitex.NewMethodInfo(refreshDictTypeHandler, newSystemServiceRefreshDictTypeArgs, newSystemServiceRefreshDictTypeResult, false),
		"DictTypeOptionSelect":    kitex.NewMethodInfo(dictTypeOptionSelectHandler, newSystemServiceDictTypeOptionSelectArgs, newSystemServiceDictTypeOptionSelectResult, false),
		"ListSysLogininfos":       kitex.NewMethodInfo(listSysLogininfosHandler, newSystemServiceListSysLogininfosArgs, newSystemServiceListSysLogininfosResult, false),
		"ExportLogininfo":         kitex.NewMethodInfo(exportLogininfoHandler, newSystemServiceExportLogininfoArgs, newSystemServiceExportLogininfoResult, false),
		"RemoveSysLogininfosById": kitex.NewMethodInfo(removeSysLogininfosByIdHandler, newSystemServiceRemoveSysLogininfosByIdArgs, newSystemServiceRemoveSysLogininfosByIdResult, false),
		"LogininfoClean":          kitex.NewMethodInfo(logininfoCleanHandler, newSystemServiceLogininfoCleanArgs, newSystemServiceLogininfoCleanResult, false),
		"UnlockByUserName":        kitex.NewMethodInfo(unlockByUserNameHandler, newSystemServiceUnlockByUserNameArgs, newSystemServiceUnlockByUserNameResult, false),
		"CreateSysLogininfo":      kitex.NewMethodInfo(createSysLogininfoHandler, newSystemServiceCreateSysLogininfoArgs, newSystemServiceCreateSysLogininfoResult, false),
		"ListSysMenus":            kitex.NewMethodInfo(listSysMenusHandler, newSystemServiceListSysMenusArgs, newSystemServiceListSysMenusResult, false),
		"GetSysMenuById":          kitex.NewMethodInfo(getSysMenuByIdHandler, newSystemServiceGetSysMenuByIdArgs, newSystemServiceGetSysMenuByIdResult, false),
		"ListTreeMenu":            kitex.NewMethodInfo(listTreeMenuHandler, newSystemServiceListTreeMenuArgs, newSystemServiceListTreeMenuResult, false),
		"ListTreeMenuByRoleid":    kitex.NewMethodInfo(listTreeMenuByRoleidHandler, newSystemServiceListTreeMenuByRoleidArgs, newSystemServiceListTreeMenuByRoleidResult, false),
		"CreateMenu":              kitex.NewMethodInfo(createMenuHandler, newSystemServiceCreateMenuArgs, newSystemServiceCreateMenuResult, false),
		"UpdateMenu":              kitex.NewMethodInfo(updateMenuHandler, newSystemServiceUpdateMenuArgs, newSystemServiceUpdateMenuResult, false),
		"DeleteMenu":              kitex.NewMethodInfo(deleteMenuHandler, newSystemServiceDeleteMenuArgs, newSystemServiceDeleteMenuResult, false),
		"GetRouters":              kitex.NewMethodInfo(getRoutersHandler, newSystemServiceGetRoutersArgs, newSystemServiceGetRoutersResult, false),
		"ListSysNotices":          kitex.NewMethodInfo(listSysNoticesHandler, newSystemServiceListSysNoticesArgs, newSystemServiceListSysNoticesResult, false),
		"GetSysNoticeById":        kitex.NewMethodInfo(getSysNoticeByIdHandler, newSystemServiceGetSysNoticeByIdArgs, newSystemServiceGetSysNoticeByIdResult, false),
		"CreateSysNotice":         kitex.NewMethodInfo(createSysNoticeHandler, newSystemServiceCreateSysNoticeArgs, newSystemServiceCreateSysNoticeResult, false),
		"DeleteSysNotice":         kitex.NewMethodInfo(deleteSysNoticeHandler, newSystemServiceDeleteSysNoticeArgs, newSystemServiceDeleteSysNoticeResult, false),
		"UpdateSysNotice":         kitex.NewMethodInfo(updateSysNoticeHandler, newSystemServiceUpdateSysNoticeArgs, newSystemServiceUpdateSysNoticeResult, false),
		"ListSysOperLogs":         kitex.NewMethodInfo(listSysOperLogsHandler, newSystemServiceListSysOperLogsArgs, newSystemServiceListSysOperLogsResult, false),
		"ExportSysOperLog":        kitex.NewMethodInfo(exportSysOperLogHandler, newSystemServiceExportSysOperLogArgs, newSystemServiceExportSysOperLogResult, false),
		"DeleteSysOperLog":        kitex.NewMethodInfo(deleteSysOperLogHandler, newSystemServiceDeleteSysOperLogArgs, newSystemServiceDeleteSysOperLogResult, false),
		"OperLogClean":            kitex.NewMethodInfo(operLogCleanHandler, newSystemServiceOperLogCleanArgs, newSystemServiceOperLogCleanResult, false),
		"CreateSysOperLog":        kitex.NewMethodInfo(createSysOperLogHandler, newSystemServiceCreateSysOperLogArgs, newSystemServiceCreateSysOperLogResult, false),
		"ListSysPosts":            kitex.NewMethodInfo(listSysPostsHandler, newSystemServiceListSysPostsArgs, newSystemServiceListSysPostsResult, false),
		"ExportSysPost":           kitex.NewMethodInfo(exportSysPostHandler, newSystemServiceExportSysPostArgs, newSystemServiceExportSysPostResult, false),
		"GetSysPostById":          kitex.NewMethodInfo(getSysPostByIdHandler, newSystemServiceGetSysPostByIdArgs, newSystemServiceGetSysPostByIdResult, false),
		"CreateSysPost":           kitex.NewMethodInfo(createSysPostHandler, newSystemServiceCreateSysPostArgs, newSystemServiceCreateSysPostResult, false),
		"UpdateSysPost":           kitex.NewMethodInfo(updateSysPostHandler, newSystemServiceUpdateSysPostArgs, newSystemServiceUpdateSysPostResult, false),
		"DeleteSysPost":           kitex.NewMethodInfo(deleteSysPostHandler, newSystemServiceDeleteSysPostArgs, newSystemServiceDeleteSysPostResult, false),
		"PostOptionSelect":        kitex.NewMethodInfo(postOptionSelectHandler, newSystemServicePostOptionSelectArgs, newSystemServicePostOptionSelectResult, false),
		"Profile":                 kitex.NewMethodInfo(profileHandler, newSystemServiceProfileArgs, newSystemServiceProfileResult, false),
		"UpdateProfile":           kitex.NewMethodInfo(updateProfileHandler, newSystemServiceUpdateProfileArgs, newSystemServiceUpdateProfileResult, false),
		"UpdatePassword":          kitex.NewMethodInfo(updatePasswordHandler, newSystemServiceUpdatePasswordArgs, newSystemServiceUpdatePasswordResult, false),
		"ListSysRole":             kitex.NewMethodInfo(listSysRoleHandler, newSystemServiceListSysRoleArgs, newSystemServiceListSysRoleResult, false),
		"ExportSysRole":           kitex.NewMethodInfo(exportSysRoleHandler, newSystemServiceExportSysRoleArgs, newSystemServiceExportSysRoleResult, false),
		"GetSysRoleByid":          kitex.NewMethodInfo(getSysRoleByidHandler, newSystemServiceGetSysRoleByidArgs, newSystemServiceGetSysRoleByidResult, false),
		"CreateSysRole":           kitex.NewMethodInfo(createSysRoleHandler, newSystemServiceCreateSysRoleArgs, newSystemServiceCreateSysRoleResult, false),
		"UpdateSysRole":           kitex.NewMethodInfo(updateSysRoleHandler, newSystemServiceUpdateSysRoleArgs, newSystemServiceUpdateSysRoleResult, false),
		"DataScope":               kitex.NewMethodInfo(dataScopeHandler, newSystemServiceDataScopeArgs, newSystemServiceDataScopeResult, false),
		"ChangeSysRoleStatus":     kitex.NewMethodInfo(changeSysRoleStatusHandler, newSystemServiceChangeSysRoleStatusArgs, newSystemServiceChangeSysRoleStatusResult, false),
		"DeleteSysRole":           kitex.NewMethodInfo(deleteSysRoleHandler, newSystemServiceDeleteSysRoleArgs, newSystemServiceDeleteSysRoleResult, false),
		"ListRoleOption":          kitex.NewMethodInfo(listRoleOptionHandler, newSystemServiceListRoleOptionArgs, newSystemServiceListRoleOptionResult, false),
		"AllocatedList":           kitex.NewMethodInfo(allocatedListHandler, newSystemServiceAllocatedListArgs, newSystemServiceAllocatedListResult, false),
		"UnallocatedList":         kitex.NewMethodInfo(unallocatedListHandler, newSystemServiceUnallocatedListArgs, newSystemServiceUnallocatedListResult, false),
		"CancelAuthUser":          kitex.NewMethodInfo(cancelAuthUserHandler, newSystemServiceCancelAuthUserArgs, newSystemServiceCancelAuthUserResult, false),
		"CancelAuthUserAll":       kitex.NewMethodInfo(cancelAuthUserAllHandler, newSystemServiceCancelAuthUserAllArgs, newSystemServiceCancelAuthUserAllResult, false),
		"SelectAuthUserAll":       kitex.NewMethodInfo(selectAuthUserAllHandler, newSystemServiceSelectAuthUserAllArgs, newSystemServiceSelectAuthUserAllResult, false),
		"DeptTreeByRoleId":        kitex.NewMethodInfo(deptTreeByRoleIdHandler, newSystemServiceDeptTreeByRoleIdArgs, newSystemServiceDeptTreeByRoleIdResult, false),
		"ListSysUsers":            kitex.NewMethodInfo(listSysUsersHandler, newSystemServiceListSysUsersArgs, newSystemServiceListSysUsersResult, false),
		"ExportSysUser":           kitex.NewMethodInfo(exportSysUserHandler, newSystemServiceExportSysUserArgs, newSystemServiceExportSysUserResult, false),
		"ImportUserData":          kitex.NewMethodInfo(importUserDataHandler, newSystemServiceImportUserDataArgs, newSystemServiceImportUserDataResult, false),
		"GetUserInfoByName":       kitex.NewMethodInfo(getUserInfoByNameHandler, newSystemServiceGetUserInfoByNameArgs, newSystemServiceGetUserInfoByNameResult, false),
		"GetUserInfo":             kitex.NewMethodInfo(getUserInfoHandler, newSystemServiceGetUserInfoArgs, newSystemServiceGetUserInfoResult, false),
		"RegisterSysUser":         kitex.NewMethodInfo(registerSysUserHandler, newSystemServiceRegisterSysUserArgs, newSystemServiceRegisterSysUserResult, false),
		"GetUserInfoById":         kitex.NewMethodInfo(getUserInfoByIdHandler, newSystemServiceGetUserInfoByIdArgs, newSystemServiceGetUserInfoByIdResult, false),
		"CreateSysUser":           kitex.NewMethodInfo(createSysUserHandler, newSystemServiceCreateSysUserArgs, newSystemServiceCreateSysUserResult, false),
		"UpdateSysUser":           kitex.NewMethodInfo(updateSysUserHandler, newSystemServiceUpdateSysUserArgs, newSystemServiceUpdateSysUserResult, false),
		"DeleteSysUser":           kitex.NewMethodInfo(deleteSysUserHandler, newSystemServiceDeleteSysUserArgs, newSystemServiceDeleteSysUserResult, false),
		"ResetPassword":           kitex.NewMethodInfo(resetPasswordHandler, newSystemServiceResetPasswordArgs, newSystemServiceResetPasswordResult, false),
		"ChangeSysUserStatus":     kitex.NewMethodInfo(changeSysUserStatusHandler, newSystemServiceChangeSysUserStatusArgs, newSystemServiceChangeSysUserStatusResult, false),
		"GetAuthRoleById":         kitex.NewMethodInfo(getAuthRoleByIdHandler, newSystemServiceGetAuthRoleByIdArgs, newSystemServiceGetAuthRoleByIdResult, false),
		"AuthRole":                kitex.NewMethodInfo(authRoleHandler, newSystemServiceAuthRoleArgs, newSystemServiceAuthRoleResult, false),
		"ListDeptsTree":           kitex.NewMethodInfo(listDeptsTreeHandler, newSystemServiceListDeptsTreeArgs, newSystemServiceListDeptsTreeResult, false),
		"ListSysUserOnlines":      kitex.NewMethodInfo(listSysUserOnlinesHandler, newSystemServiceListSysUserOnlinesArgs, newSystemServiceListSysUserOnlinesResult, false),
		"ForceLogout":             kitex.NewMethodInfo(forceLogoutHandler, newSystemServiceForceLogoutArgs, newSystemServiceForceLogoutResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "v1",
		"ServiceFilePath": `api/thrift/system/v1/system.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func listConfigsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListConfigsArgs)
	realResult := result.(*v1.SystemServiceListConfigsResult)
	success, err := handler.(v1.SystemService).ListConfigs(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListConfigsArgs() interface{} {
	return v1.NewSystemServiceListConfigsArgs()
}

func newSystemServiceListConfigsResult() interface{} {
	return v1.NewSystemServiceListConfigsResult()
}

func exportConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceExportConfigArgs)
	realResult := result.(*v1.SystemServiceExportConfigResult)
	success, err := handler.(v1.SystemService).ExportConfig(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceExportConfigArgs() interface{} {
	return v1.NewSystemServiceExportConfigArgs()
}

func newSystemServiceExportConfigResult() interface{} {
	return v1.NewSystemServiceExportConfigResult()
}

func getConfigByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetConfigByIdArgs)
	realResult := result.(*v1.SystemServiceGetConfigByIdResult)
	success, err := handler.(v1.SystemService).GetConfigById(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetConfigByIdArgs() interface{} {
	return v1.NewSystemServiceGetConfigByIdArgs()
}

func newSystemServiceGetConfigByIdResult() interface{} {
	return v1.NewSystemServiceGetConfigByIdResult()
}

func getConfigByKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetConfigByKeyArgs)
	realResult := result.(*v1.SystemServiceGetConfigByKeyResult)
	success, err := handler.(v1.SystemService).GetConfigByKey(ctx, realArg.Key)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetConfigByKeyArgs() interface{} {
	return v1.NewSystemServiceGetConfigByKeyArgs()
}

func newSystemServiceGetConfigByKeyResult() interface{} {
	return v1.NewSystemServiceGetConfigByKeyResult()
}

func createConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateConfigArgs)
	realResult := result.(*v1.SystemServiceCreateConfigResult)
	success, err := handler.(v1.SystemService).CreateConfig(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateConfigArgs() interface{} {
	return v1.NewSystemServiceCreateConfigArgs()
}

func newSystemServiceCreateConfigResult() interface{} {
	return v1.NewSystemServiceCreateConfigResult()
}

func updateConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateConfigArgs)
	realResult := result.(*v1.SystemServiceUpdateConfigResult)
	success, err := handler.(v1.SystemService).UpdateConfig(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateConfigArgs() interface{} {
	return v1.NewSystemServiceUpdateConfigArgs()
}

func newSystemServiceUpdateConfigResult() interface{} {
	return v1.NewSystemServiceUpdateConfigResult()
}

func deleteConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteConfigArgs)
	realResult := result.(*v1.SystemServiceDeleteConfigResult)
	success, err := handler.(v1.SystemService).DeleteConfig(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteConfigArgs() interface{} {
	return v1.NewSystemServiceDeleteConfigArgs()
}

func newSystemServiceDeleteConfigResult() interface{} {
	return v1.NewSystemServiceDeleteConfigResult()
}

func refreshConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*v1.SystemServiceRefreshConfigResult)
	success, err := handler.(v1.SystemService).RefreshConfig(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceRefreshConfigArgs() interface{} {
	return v1.NewSystemServiceRefreshConfigArgs()
}

func newSystemServiceRefreshConfigResult() interface{} {
	return v1.NewSystemServiceRefreshConfigResult()
}

func listDeptsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListDeptsArgs)
	realResult := result.(*v1.SystemServiceListDeptsResult)
	success, err := handler.(v1.SystemService).ListDepts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListDeptsArgs() interface{} {
	return v1.NewSystemServiceListDeptsArgs()
}

func newSystemServiceListDeptsResult() interface{} {
	return v1.NewSystemServiceListDeptsResult()
}

func listDeptsExcludeChildHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListDeptsExcludeChildArgs)
	realResult := result.(*v1.SystemServiceListDeptsExcludeChildResult)
	success, err := handler.(v1.SystemService).ListDeptsExcludeChild(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListDeptsExcludeChildArgs() interface{} {
	return v1.NewSystemServiceListDeptsExcludeChildArgs()
}

func newSystemServiceListDeptsExcludeChildResult() interface{} {
	return v1.NewSystemServiceListDeptsExcludeChildResult()
}

func getDeptByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetDeptByIdArgs)
	realResult := result.(*v1.SystemServiceGetDeptByIdResult)
	success, err := handler.(v1.SystemService).GetDeptById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetDeptByIdArgs() interface{} {
	return v1.NewSystemServiceGetDeptByIdArgs()
}

func newSystemServiceGetDeptByIdResult() interface{} {
	return v1.NewSystemServiceGetDeptByIdResult()
}

func createDeptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateDeptArgs)
	realResult := result.(*v1.SystemServiceCreateDeptResult)
	success, err := handler.(v1.SystemService).CreateDept(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateDeptArgs() interface{} {
	return v1.NewSystemServiceCreateDeptArgs()
}

func newSystemServiceCreateDeptResult() interface{} {
	return v1.NewSystemServiceCreateDeptResult()
}

func updateDeptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateDeptArgs)
	realResult := result.(*v1.SystemServiceUpdateDeptResult)
	success, err := handler.(v1.SystemService).UpdateDept(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateDeptArgs() interface{} {
	return v1.NewSystemServiceUpdateDeptArgs()
}

func newSystemServiceUpdateDeptResult() interface{} {
	return v1.NewSystemServiceUpdateDeptResult()
}

func deleteDeptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteDeptArgs)
	realResult := result.(*v1.SystemServiceDeleteDeptResult)
	success, err := handler.(v1.SystemService).DeleteDept(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteDeptArgs() interface{} {
	return v1.NewSystemServiceDeleteDeptArgs()
}

func newSystemServiceDeleteDeptResult() interface{} {
	return v1.NewSystemServiceDeleteDeptResult()
}

func listDictDatasHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListDictDatasArgs)
	realResult := result.(*v1.SystemServiceListDictDatasResult)
	success, err := handler.(v1.SystemService).ListDictDatas(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListDictDatasArgs() interface{} {
	return v1.NewSystemServiceListDictDatasArgs()
}

func newSystemServiceListDictDatasResult() interface{} {
	return v1.NewSystemServiceListDictDatasResult()
}

func exportDictDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceExportDictDataArgs)
	realResult := result.(*v1.SystemServiceExportDictDataResult)
	success, err := handler.(v1.SystemService).ExportDictData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceExportDictDataArgs() interface{} {
	return v1.NewSystemServiceExportDictDataArgs()
}

func newSystemServiceExportDictDataResult() interface{} {
	return v1.NewSystemServiceExportDictDataResult()
}

func getDictDataByCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetDictDataByCodeArgs)
	realResult := result.(*v1.SystemServiceGetDictDataByCodeResult)
	success, err := handler.(v1.SystemService).GetDictDataByCode(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetDictDataByCodeArgs() interface{} {
	return v1.NewSystemServiceGetDictDataByCodeArgs()
}

func newSystemServiceGetDictDataByCodeResult() interface{} {
	return v1.NewSystemServiceGetDictDataByCodeResult()
}

func listDictDataByTypeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListDictDataByTypeArgs)
	realResult := result.(*v1.SystemServiceListDictDataByTypeResult)
	success, err := handler.(v1.SystemService).ListDictDataByType(ctx, realArg.DictType)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListDictDataByTypeArgs() interface{} {
	return v1.NewSystemServiceListDictDataByTypeArgs()
}

func newSystemServiceListDictDataByTypeResult() interface{} {
	return v1.NewSystemServiceListDictDataByTypeResult()
}

func createDictDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateDictDataArgs)
	realResult := result.(*v1.SystemServiceCreateDictDataResult)
	success, err := handler.(v1.SystemService).CreateDictData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateDictDataArgs() interface{} {
	return v1.NewSystemServiceCreateDictDataArgs()
}

func newSystemServiceCreateDictDataResult() interface{} {
	return v1.NewSystemServiceCreateDictDataResult()
}

func updateDictDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateDictDataArgs)
	realResult := result.(*v1.SystemServiceUpdateDictDataResult)
	success, err := handler.(v1.SystemService).UpdateDictData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateDictDataArgs() interface{} {
	return v1.NewSystemServiceUpdateDictDataArgs()
}

func newSystemServiceUpdateDictDataResult() interface{} {
	return v1.NewSystemServiceUpdateDictDataResult()
}

func deleteDictDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteDictDataArgs)
	realResult := result.(*v1.SystemServiceDeleteDictDataResult)
	success, err := handler.(v1.SystemService).DeleteDictData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteDictDataArgs() interface{} {
	return v1.NewSystemServiceDeleteDictDataArgs()
}

func newSystemServiceDeleteDictDataResult() interface{} {
	return v1.NewSystemServiceDeleteDictDataResult()
}

func listDictTypesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListDictTypesArgs)
	realResult := result.(*v1.SystemServiceListDictTypesResult)
	success, err := handler.(v1.SystemService).ListDictTypes(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListDictTypesArgs() interface{} {
	return v1.NewSystemServiceListDictTypesArgs()
}

func newSystemServiceListDictTypesResult() interface{} {
	return v1.NewSystemServiceListDictTypesResult()
}

func exportDictTypeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceExportDictTypeArgs)
	realResult := result.(*v1.SystemServiceExportDictTypeResult)
	success, err := handler.(v1.SystemService).ExportDictType(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceExportDictTypeArgs() interface{} {
	return v1.NewSystemServiceExportDictTypeArgs()
}

func newSystemServiceExportDictTypeResult() interface{} {
	return v1.NewSystemServiceExportDictTypeResult()
}

func getDictTypeByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetDictTypeByIdArgs)
	realResult := result.(*v1.SystemServiceGetDictTypeByIdResult)
	success, err := handler.(v1.SystemService).GetDictTypeById(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetDictTypeByIdArgs() interface{} {
	return v1.NewSystemServiceGetDictTypeByIdArgs()
}

func newSystemServiceGetDictTypeByIdResult() interface{} {
	return v1.NewSystemServiceGetDictTypeByIdResult()
}

func createDictTypeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateDictTypeArgs)
	realResult := result.(*v1.SystemServiceCreateDictTypeResult)
	success, err := handler.(v1.SystemService).CreateDictType(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateDictTypeArgs() interface{} {
	return v1.NewSystemServiceCreateDictTypeArgs()
}

func newSystemServiceCreateDictTypeResult() interface{} {
	return v1.NewSystemServiceCreateDictTypeResult()
}

func updateDictTypeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateDictTypeArgs)
	realResult := result.(*v1.SystemServiceUpdateDictTypeResult)
	success, err := handler.(v1.SystemService).UpdateDictType(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateDictTypeArgs() interface{} {
	return v1.NewSystemServiceUpdateDictTypeArgs()
}

func newSystemServiceUpdateDictTypeResult() interface{} {
	return v1.NewSystemServiceUpdateDictTypeResult()
}

func deleteDictTypeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteDictTypeArgs)
	realResult := result.(*v1.SystemServiceDeleteDictTypeResult)
	success, err := handler.(v1.SystemService).DeleteDictType(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteDictTypeArgs() interface{} {
	return v1.NewSystemServiceDeleteDictTypeArgs()
}

func newSystemServiceDeleteDictTypeResult() interface{} {
	return v1.NewSystemServiceDeleteDictTypeResult()
}

func refreshDictTypeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*v1.SystemServiceRefreshDictTypeResult)
	success, err := handler.(v1.SystemService).RefreshDictType(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceRefreshDictTypeArgs() interface{} {
	return v1.NewSystemServiceRefreshDictTypeArgs()
}

func newSystemServiceRefreshDictTypeResult() interface{} {
	return v1.NewSystemServiceRefreshDictTypeResult()
}

func dictTypeOptionSelectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*v1.SystemServiceDictTypeOptionSelectResult)
	success, err := handler.(v1.SystemService).DictTypeOptionSelect(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDictTypeOptionSelectArgs() interface{} {
	return v1.NewSystemServiceDictTypeOptionSelectArgs()
}

func newSystemServiceDictTypeOptionSelectResult() interface{} {
	return v1.NewSystemServiceDictTypeOptionSelectResult()
}

func listSysLogininfosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListSysLogininfosArgs)
	realResult := result.(*v1.SystemServiceListSysLogininfosResult)
	success, err := handler.(v1.SystemService).ListSysLogininfos(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListSysLogininfosArgs() interface{} {
	return v1.NewSystemServiceListSysLogininfosArgs()
}

func newSystemServiceListSysLogininfosResult() interface{} {
	return v1.NewSystemServiceListSysLogininfosResult()
}

func exportLogininfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceExportLogininfoArgs)
	realResult := result.(*v1.SystemServiceExportLogininfoResult)
	success, err := handler.(v1.SystemService).ExportLogininfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceExportLogininfoArgs() interface{} {
	return v1.NewSystemServiceExportLogininfoArgs()
}

func newSystemServiceExportLogininfoResult() interface{} {
	return v1.NewSystemServiceExportLogininfoResult()
}

func removeSysLogininfosByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceRemoveSysLogininfosByIdArgs)
	realResult := result.(*v1.SystemServiceRemoveSysLogininfosByIdResult)
	success, err := handler.(v1.SystemService).RemoveSysLogininfosById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceRemoveSysLogininfosByIdArgs() interface{} {
	return v1.NewSystemServiceRemoveSysLogininfosByIdArgs()
}

func newSystemServiceRemoveSysLogininfosByIdResult() interface{} {
	return v1.NewSystemServiceRemoveSysLogininfosByIdResult()
}

func logininfoCleanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*v1.SystemServiceLogininfoCleanResult)
	success, err := handler.(v1.SystemService).LogininfoClean(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceLogininfoCleanArgs() interface{} {
	return v1.NewSystemServiceLogininfoCleanArgs()
}

func newSystemServiceLogininfoCleanResult() interface{} {
	return v1.NewSystemServiceLogininfoCleanResult()
}

func unlockByUserNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUnlockByUserNameArgs)
	realResult := result.(*v1.SystemServiceUnlockByUserNameResult)
	success, err := handler.(v1.SystemService).UnlockByUserName(ctx, realArg.Username)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUnlockByUserNameArgs() interface{} {
	return v1.NewSystemServiceUnlockByUserNameArgs()
}

func newSystemServiceUnlockByUserNameResult() interface{} {
	return v1.NewSystemServiceUnlockByUserNameResult()
}

func createSysLogininfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateSysLogininfoArgs)
	realResult := result.(*v1.SystemServiceCreateSysLogininfoResult)
	success, err := handler.(v1.SystemService).CreateSysLogininfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateSysLogininfoArgs() interface{} {
	return v1.NewSystemServiceCreateSysLogininfoArgs()
}

func newSystemServiceCreateSysLogininfoResult() interface{} {
	return v1.NewSystemServiceCreateSysLogininfoResult()
}

func listSysMenusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListSysMenusArgs)
	realResult := result.(*v1.SystemServiceListSysMenusResult)
	success, err := handler.(v1.SystemService).ListSysMenus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListSysMenusArgs() interface{} {
	return v1.NewSystemServiceListSysMenusArgs()
}

func newSystemServiceListSysMenusResult() interface{} {
	return v1.NewSystemServiceListSysMenusResult()
}

func getSysMenuByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetSysMenuByIdArgs)
	realResult := result.(*v1.SystemServiceGetSysMenuByIdResult)
	success, err := handler.(v1.SystemService).GetSysMenuById(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetSysMenuByIdArgs() interface{} {
	return v1.NewSystemServiceGetSysMenuByIdArgs()
}

func newSystemServiceGetSysMenuByIdResult() interface{} {
	return v1.NewSystemServiceGetSysMenuByIdResult()
}

func listTreeMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListTreeMenuArgs)
	realResult := result.(*v1.SystemServiceListTreeMenuResult)
	success, err := handler.(v1.SystemService).ListTreeMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListTreeMenuArgs() interface{} {
	return v1.NewSystemServiceListTreeMenuArgs()
}

func newSystemServiceListTreeMenuResult() interface{} {
	return v1.NewSystemServiceListTreeMenuResult()
}

func listTreeMenuByRoleidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListTreeMenuByRoleidArgs)
	realResult := result.(*v1.SystemServiceListTreeMenuByRoleidResult)
	success, err := handler.(v1.SystemService).ListTreeMenuByRoleid(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListTreeMenuByRoleidArgs() interface{} {
	return v1.NewSystemServiceListTreeMenuByRoleidArgs()
}

func newSystemServiceListTreeMenuByRoleidResult() interface{} {
	return v1.NewSystemServiceListTreeMenuByRoleidResult()
}

func createMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateMenuArgs)
	realResult := result.(*v1.SystemServiceCreateMenuResult)
	success, err := handler.(v1.SystemService).CreateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateMenuArgs() interface{} {
	return v1.NewSystemServiceCreateMenuArgs()
}

func newSystemServiceCreateMenuResult() interface{} {
	return v1.NewSystemServiceCreateMenuResult()
}

func updateMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateMenuArgs)
	realResult := result.(*v1.SystemServiceUpdateMenuResult)
	success, err := handler.(v1.SystemService).UpdateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateMenuArgs() interface{} {
	return v1.NewSystemServiceUpdateMenuArgs()
}

func newSystemServiceUpdateMenuResult() interface{} {
	return v1.NewSystemServiceUpdateMenuResult()
}

func deleteMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteMenuArgs)
	realResult := result.(*v1.SystemServiceDeleteMenuResult)
	success, err := handler.(v1.SystemService).DeleteMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteMenuArgs() interface{} {
	return v1.NewSystemServiceDeleteMenuArgs()
}

func newSystemServiceDeleteMenuResult() interface{} {
	return v1.NewSystemServiceDeleteMenuResult()
}

func getRoutersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetRoutersArgs)
	realResult := result.(*v1.SystemServiceGetRoutersResult)
	success, err := handler.(v1.SystemService).GetRouters(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetRoutersArgs() interface{} {
	return v1.NewSystemServiceGetRoutersArgs()
}

func newSystemServiceGetRoutersResult() interface{} {
	return v1.NewSystemServiceGetRoutersResult()
}

func listSysNoticesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListSysNoticesArgs)
	realResult := result.(*v1.SystemServiceListSysNoticesResult)
	success, err := handler.(v1.SystemService).ListSysNotices(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListSysNoticesArgs() interface{} {
	return v1.NewSystemServiceListSysNoticesArgs()
}

func newSystemServiceListSysNoticesResult() interface{} {
	return v1.NewSystemServiceListSysNoticesResult()
}

func getSysNoticeByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetSysNoticeByIdArgs)
	realResult := result.(*v1.SystemServiceGetSysNoticeByIdResult)
	success, err := handler.(v1.SystemService).GetSysNoticeById(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetSysNoticeByIdArgs() interface{} {
	return v1.NewSystemServiceGetSysNoticeByIdArgs()
}

func newSystemServiceGetSysNoticeByIdResult() interface{} {
	return v1.NewSystemServiceGetSysNoticeByIdResult()
}

func createSysNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateSysNoticeArgs)
	realResult := result.(*v1.SystemServiceCreateSysNoticeResult)
	success, err := handler.(v1.SystemService).CreateSysNotice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateSysNoticeArgs() interface{} {
	return v1.NewSystemServiceCreateSysNoticeArgs()
}

func newSystemServiceCreateSysNoticeResult() interface{} {
	return v1.NewSystemServiceCreateSysNoticeResult()
}

func deleteSysNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteSysNoticeArgs)
	realResult := result.(*v1.SystemServiceDeleteSysNoticeResult)
	success, err := handler.(v1.SystemService).DeleteSysNotice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteSysNoticeArgs() interface{} {
	return v1.NewSystemServiceDeleteSysNoticeArgs()
}

func newSystemServiceDeleteSysNoticeResult() interface{} {
	return v1.NewSystemServiceDeleteSysNoticeResult()
}

func updateSysNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateSysNoticeArgs)
	realResult := result.(*v1.SystemServiceUpdateSysNoticeResult)
	success, err := handler.(v1.SystemService).UpdateSysNotice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateSysNoticeArgs() interface{} {
	return v1.NewSystemServiceUpdateSysNoticeArgs()
}

func newSystemServiceUpdateSysNoticeResult() interface{} {
	return v1.NewSystemServiceUpdateSysNoticeResult()
}

func listSysOperLogsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListSysOperLogsArgs)
	realResult := result.(*v1.SystemServiceListSysOperLogsResult)
	success, err := handler.(v1.SystemService).ListSysOperLogs(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListSysOperLogsArgs() interface{} {
	return v1.NewSystemServiceListSysOperLogsArgs()
}

func newSystemServiceListSysOperLogsResult() interface{} {
	return v1.NewSystemServiceListSysOperLogsResult()
}

func exportSysOperLogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceExportSysOperLogArgs)
	realResult := result.(*v1.SystemServiceExportSysOperLogResult)
	success, err := handler.(v1.SystemService).ExportSysOperLog(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceExportSysOperLogArgs() interface{} {
	return v1.NewSystemServiceExportSysOperLogArgs()
}

func newSystemServiceExportSysOperLogResult() interface{} {
	return v1.NewSystemServiceExportSysOperLogResult()
}

func deleteSysOperLogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteSysOperLogArgs)
	realResult := result.(*v1.SystemServiceDeleteSysOperLogResult)
	success, err := handler.(v1.SystemService).DeleteSysOperLog(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteSysOperLogArgs() interface{} {
	return v1.NewSystemServiceDeleteSysOperLogArgs()
}

func newSystemServiceDeleteSysOperLogResult() interface{} {
	return v1.NewSystemServiceDeleteSysOperLogResult()
}

func operLogCleanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*v1.SystemServiceOperLogCleanResult)
	success, err := handler.(v1.SystemService).OperLogClean(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceOperLogCleanArgs() interface{} {
	return v1.NewSystemServiceOperLogCleanArgs()
}

func newSystemServiceOperLogCleanResult() interface{} {
	return v1.NewSystemServiceOperLogCleanResult()
}

func createSysOperLogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateSysOperLogArgs)
	realResult := result.(*v1.SystemServiceCreateSysOperLogResult)
	success, err := handler.(v1.SystemService).CreateSysOperLog(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateSysOperLogArgs() interface{} {
	return v1.NewSystemServiceCreateSysOperLogArgs()
}

func newSystemServiceCreateSysOperLogResult() interface{} {
	return v1.NewSystemServiceCreateSysOperLogResult()
}

func listSysPostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListSysPostsArgs)
	realResult := result.(*v1.SystemServiceListSysPostsResult)
	success, err := handler.(v1.SystemService).ListSysPosts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListSysPostsArgs() interface{} {
	return v1.NewSystemServiceListSysPostsArgs()
}

func newSystemServiceListSysPostsResult() interface{} {
	return v1.NewSystemServiceListSysPostsResult()
}

func exportSysPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceExportSysPostArgs)
	realResult := result.(*v1.SystemServiceExportSysPostResult)
	success, err := handler.(v1.SystemService).ExportSysPost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceExportSysPostArgs() interface{} {
	return v1.NewSystemServiceExportSysPostArgs()
}

func newSystemServiceExportSysPostResult() interface{} {
	return v1.NewSystemServiceExportSysPostResult()
}

func getSysPostByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetSysPostByIdArgs)
	realResult := result.(*v1.SystemServiceGetSysPostByIdResult)
	success, err := handler.(v1.SystemService).GetSysPostById(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetSysPostByIdArgs() interface{} {
	return v1.NewSystemServiceGetSysPostByIdArgs()
}

func newSystemServiceGetSysPostByIdResult() interface{} {
	return v1.NewSystemServiceGetSysPostByIdResult()
}

func createSysPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateSysPostArgs)
	realResult := result.(*v1.SystemServiceCreateSysPostResult)
	success, err := handler.(v1.SystemService).CreateSysPost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateSysPostArgs() interface{} {
	return v1.NewSystemServiceCreateSysPostArgs()
}

func newSystemServiceCreateSysPostResult() interface{} {
	return v1.NewSystemServiceCreateSysPostResult()
}

func updateSysPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateSysPostArgs)
	realResult := result.(*v1.SystemServiceUpdateSysPostResult)
	success, err := handler.(v1.SystemService).UpdateSysPost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateSysPostArgs() interface{} {
	return v1.NewSystemServiceUpdateSysPostArgs()
}

func newSystemServiceUpdateSysPostResult() interface{} {
	return v1.NewSystemServiceUpdateSysPostResult()
}

func deleteSysPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteSysPostArgs)
	realResult := result.(*v1.SystemServiceDeleteSysPostResult)
	success, err := handler.(v1.SystemService).DeleteSysPost(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteSysPostArgs() interface{} {
	return v1.NewSystemServiceDeleteSysPostArgs()
}

func newSystemServiceDeleteSysPostResult() interface{} {
	return v1.NewSystemServiceDeleteSysPostResult()
}

func postOptionSelectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*v1.SystemServicePostOptionSelectResult)
	success, err := handler.(v1.SystemService).PostOptionSelect(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServicePostOptionSelectArgs() interface{} {
	return v1.NewSystemServicePostOptionSelectArgs()
}

func newSystemServicePostOptionSelectResult() interface{} {
	return v1.NewSystemServicePostOptionSelectResult()
}

func profileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceProfileArgs)
	realResult := result.(*v1.SystemServiceProfileResult)
	success, err := handler.(v1.SystemService).Profile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceProfileArgs() interface{} {
	return v1.NewSystemServiceProfileArgs()
}

func newSystemServiceProfileResult() interface{} {
	return v1.NewSystemServiceProfileResult()
}

func updateProfileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateProfileArgs)
	realResult := result.(*v1.SystemServiceUpdateProfileResult)
	success, err := handler.(v1.SystemService).UpdateProfile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateProfileArgs() interface{} {
	return v1.NewSystemServiceUpdateProfileArgs()
}

func newSystemServiceUpdateProfileResult() interface{} {
	return v1.NewSystemServiceUpdateProfileResult()
}

func updatePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdatePasswordArgs)
	realResult := result.(*v1.SystemServiceUpdatePasswordResult)
	success, err := handler.(v1.SystemService).UpdatePassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdatePasswordArgs() interface{} {
	return v1.NewSystemServiceUpdatePasswordArgs()
}

func newSystemServiceUpdatePasswordResult() interface{} {
	return v1.NewSystemServiceUpdatePasswordResult()
}

func listSysRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListSysRoleArgs)
	realResult := result.(*v1.SystemServiceListSysRoleResult)
	success, err := handler.(v1.SystemService).ListSysRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListSysRoleArgs() interface{} {
	return v1.NewSystemServiceListSysRoleArgs()
}

func newSystemServiceListSysRoleResult() interface{} {
	return v1.NewSystemServiceListSysRoleResult()
}

func exportSysRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceExportSysRoleArgs)
	realResult := result.(*v1.SystemServiceExportSysRoleResult)
	success, err := handler.(v1.SystemService).ExportSysRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceExportSysRoleArgs() interface{} {
	return v1.NewSystemServiceExportSysRoleArgs()
}

func newSystemServiceExportSysRoleResult() interface{} {
	return v1.NewSystemServiceExportSysRoleResult()
}

func getSysRoleByidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetSysRoleByidArgs)
	realResult := result.(*v1.SystemServiceGetSysRoleByidResult)
	success, err := handler.(v1.SystemService).GetSysRoleByid(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetSysRoleByidArgs() interface{} {
	return v1.NewSystemServiceGetSysRoleByidArgs()
}

func newSystemServiceGetSysRoleByidResult() interface{} {
	return v1.NewSystemServiceGetSysRoleByidResult()
}

func createSysRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateSysRoleArgs)
	realResult := result.(*v1.SystemServiceCreateSysRoleResult)
	success, err := handler.(v1.SystemService).CreateSysRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateSysRoleArgs() interface{} {
	return v1.NewSystemServiceCreateSysRoleArgs()
}

func newSystemServiceCreateSysRoleResult() interface{} {
	return v1.NewSystemServiceCreateSysRoleResult()
}

func updateSysRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateSysRoleArgs)
	realResult := result.(*v1.SystemServiceUpdateSysRoleResult)
	success, err := handler.(v1.SystemService).UpdateSysRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateSysRoleArgs() interface{} {
	return v1.NewSystemServiceUpdateSysRoleArgs()
}

func newSystemServiceUpdateSysRoleResult() interface{} {
	return v1.NewSystemServiceUpdateSysRoleResult()
}

func dataScopeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDataScopeArgs)
	realResult := result.(*v1.SystemServiceDataScopeResult)
	success, err := handler.(v1.SystemService).DataScope(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDataScopeArgs() interface{} {
	return v1.NewSystemServiceDataScopeArgs()
}

func newSystemServiceDataScopeResult() interface{} {
	return v1.NewSystemServiceDataScopeResult()
}

func changeSysRoleStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceChangeSysRoleStatusArgs)
	realResult := result.(*v1.SystemServiceChangeSysRoleStatusResult)
	success, err := handler.(v1.SystemService).ChangeSysRoleStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceChangeSysRoleStatusArgs() interface{} {
	return v1.NewSystemServiceChangeSysRoleStatusArgs()
}

func newSystemServiceChangeSysRoleStatusResult() interface{} {
	return v1.NewSystemServiceChangeSysRoleStatusResult()
}

func deleteSysRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteSysRoleArgs)
	realResult := result.(*v1.SystemServiceDeleteSysRoleResult)
	success, err := handler.(v1.SystemService).DeleteSysRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteSysRoleArgs() interface{} {
	return v1.NewSystemServiceDeleteSysRoleArgs()
}

func newSystemServiceDeleteSysRoleResult() interface{} {
	return v1.NewSystemServiceDeleteSysRoleResult()
}

func listRoleOptionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*v1.SystemServiceListRoleOptionResult)
	success, err := handler.(v1.SystemService).ListRoleOption(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListRoleOptionArgs() interface{} {
	return v1.NewSystemServiceListRoleOptionArgs()
}

func newSystemServiceListRoleOptionResult() interface{} {
	return v1.NewSystemServiceListRoleOptionResult()
}

func allocatedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceAllocatedListArgs)
	realResult := result.(*v1.SystemServiceAllocatedListResult)
	success, err := handler.(v1.SystemService).AllocatedList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceAllocatedListArgs() interface{} {
	return v1.NewSystemServiceAllocatedListArgs()
}

func newSystemServiceAllocatedListResult() interface{} {
	return v1.NewSystemServiceAllocatedListResult()
}

func unallocatedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUnallocatedListArgs)
	realResult := result.(*v1.SystemServiceUnallocatedListResult)
	success, err := handler.(v1.SystemService).UnallocatedList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUnallocatedListArgs() interface{} {
	return v1.NewSystemServiceUnallocatedListArgs()
}

func newSystemServiceUnallocatedListResult() interface{} {
	return v1.NewSystemServiceUnallocatedListResult()
}

func cancelAuthUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCancelAuthUserArgs)
	realResult := result.(*v1.SystemServiceCancelAuthUserResult)
	success, err := handler.(v1.SystemService).CancelAuthUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCancelAuthUserArgs() interface{} {
	return v1.NewSystemServiceCancelAuthUserArgs()
}

func newSystemServiceCancelAuthUserResult() interface{} {
	return v1.NewSystemServiceCancelAuthUserResult()
}

func cancelAuthUserAllHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCancelAuthUserAllArgs)
	realResult := result.(*v1.SystemServiceCancelAuthUserAllResult)
	success, err := handler.(v1.SystemService).CancelAuthUserAll(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCancelAuthUserAllArgs() interface{} {
	return v1.NewSystemServiceCancelAuthUserAllArgs()
}

func newSystemServiceCancelAuthUserAllResult() interface{} {
	return v1.NewSystemServiceCancelAuthUserAllResult()
}

func selectAuthUserAllHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceSelectAuthUserAllArgs)
	realResult := result.(*v1.SystemServiceSelectAuthUserAllResult)
	success, err := handler.(v1.SystemService).SelectAuthUserAll(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceSelectAuthUserAllArgs() interface{} {
	return v1.NewSystemServiceSelectAuthUserAllArgs()
}

func newSystemServiceSelectAuthUserAllResult() interface{} {
	return v1.NewSystemServiceSelectAuthUserAllResult()
}

func deptTreeByRoleIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeptTreeByRoleIdArgs)
	realResult := result.(*v1.SystemServiceDeptTreeByRoleIdResult)
	success, err := handler.(v1.SystemService).DeptTreeByRoleId(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeptTreeByRoleIdArgs() interface{} {
	return v1.NewSystemServiceDeptTreeByRoleIdArgs()
}

func newSystemServiceDeptTreeByRoleIdResult() interface{} {
	return v1.NewSystemServiceDeptTreeByRoleIdResult()
}

func listSysUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListSysUsersArgs)
	realResult := result.(*v1.SystemServiceListSysUsersResult)
	success, err := handler.(v1.SystemService).ListSysUsers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListSysUsersArgs() interface{} {
	return v1.NewSystemServiceListSysUsersArgs()
}

func newSystemServiceListSysUsersResult() interface{} {
	return v1.NewSystemServiceListSysUsersResult()
}

func exportSysUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceExportSysUserArgs)
	realResult := result.(*v1.SystemServiceExportSysUserResult)
	success, err := handler.(v1.SystemService).ExportSysUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceExportSysUserArgs() interface{} {
	return v1.NewSystemServiceExportSysUserArgs()
}

func newSystemServiceExportSysUserResult() interface{} {
	return v1.NewSystemServiceExportSysUserResult()
}

func importUserDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceImportUserDataArgs)
	realResult := result.(*v1.SystemServiceImportUserDataResult)
	success, err := handler.(v1.SystemService).ImportUserData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceImportUserDataArgs() interface{} {
	return v1.NewSystemServiceImportUserDataArgs()
}

func newSystemServiceImportUserDataResult() interface{} {
	return v1.NewSystemServiceImportUserDataResult()
}

func getUserInfoByNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetUserInfoByNameArgs)
	realResult := result.(*v1.SystemServiceGetUserInfoByNameResult)
	success, err := handler.(v1.SystemService).GetUserInfoByName(ctx, realArg.Name)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetUserInfoByNameArgs() interface{} {
	return v1.NewSystemServiceGetUserInfoByNameArgs()
}

func newSystemServiceGetUserInfoByNameResult() interface{} {
	return v1.NewSystemServiceGetUserInfoByNameResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetUserInfoArgs)
	realResult := result.(*v1.SystemServiceGetUserInfoResult)
	success, err := handler.(v1.SystemService).GetUserInfo(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetUserInfoArgs() interface{} {
	return v1.NewSystemServiceGetUserInfoArgs()
}

func newSystemServiceGetUserInfoResult() interface{} {
	return v1.NewSystemServiceGetUserInfoResult()
}

func registerSysUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceRegisterSysUserArgs)
	realResult := result.(*v1.SystemServiceRegisterSysUserResult)
	success, err := handler.(v1.SystemService).RegisterSysUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceRegisterSysUserArgs() interface{} {
	return v1.NewSystemServiceRegisterSysUserArgs()
}

func newSystemServiceRegisterSysUserResult() interface{} {
	return v1.NewSystemServiceRegisterSysUserResult()
}

func getUserInfoByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetUserInfoByIdArgs)
	realResult := result.(*v1.SystemServiceGetUserInfoByIdResult)
	success, err := handler.(v1.SystemService).GetUserInfoById(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetUserInfoByIdArgs() interface{} {
	return v1.NewSystemServiceGetUserInfoByIdArgs()
}

func newSystemServiceGetUserInfoByIdResult() interface{} {
	return v1.NewSystemServiceGetUserInfoByIdResult()
}

func createSysUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceCreateSysUserArgs)
	realResult := result.(*v1.SystemServiceCreateSysUserResult)
	success, err := handler.(v1.SystemService).CreateSysUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateSysUserArgs() interface{} {
	return v1.NewSystemServiceCreateSysUserArgs()
}

func newSystemServiceCreateSysUserResult() interface{} {
	return v1.NewSystemServiceCreateSysUserResult()
}

func updateSysUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceUpdateSysUserArgs)
	realResult := result.(*v1.SystemServiceUpdateSysUserResult)
	success, err := handler.(v1.SystemService).UpdateSysUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateSysUserArgs() interface{} {
	return v1.NewSystemServiceUpdateSysUserArgs()
}

func newSystemServiceUpdateSysUserResult() interface{} {
	return v1.NewSystemServiceUpdateSysUserResult()
}

func deleteSysUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceDeleteSysUserArgs)
	realResult := result.(*v1.SystemServiceDeleteSysUserResult)
	success, err := handler.(v1.SystemService).DeleteSysUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteSysUserArgs() interface{} {
	return v1.NewSystemServiceDeleteSysUserArgs()
}

func newSystemServiceDeleteSysUserResult() interface{} {
	return v1.NewSystemServiceDeleteSysUserResult()
}

func resetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceResetPasswordArgs)
	realResult := result.(*v1.SystemServiceResetPasswordResult)
	success, err := handler.(v1.SystemService).ResetPassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceResetPasswordArgs() interface{} {
	return v1.NewSystemServiceResetPasswordArgs()
}

func newSystemServiceResetPasswordResult() interface{} {
	return v1.NewSystemServiceResetPasswordResult()
}

func changeSysUserStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceChangeSysUserStatusArgs)
	realResult := result.(*v1.SystemServiceChangeSysUserStatusResult)
	success, err := handler.(v1.SystemService).ChangeSysUserStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceChangeSysUserStatusArgs() interface{} {
	return v1.NewSystemServiceChangeSysUserStatusArgs()
}

func newSystemServiceChangeSysUserStatusResult() interface{} {
	return v1.NewSystemServiceChangeSysUserStatusResult()
}

func getAuthRoleByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceGetAuthRoleByIdArgs)
	realResult := result.(*v1.SystemServiceGetAuthRoleByIdResult)
	success, err := handler.(v1.SystemService).GetAuthRoleById(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetAuthRoleByIdArgs() interface{} {
	return v1.NewSystemServiceGetAuthRoleByIdArgs()
}

func newSystemServiceGetAuthRoleByIdResult() interface{} {
	return v1.NewSystemServiceGetAuthRoleByIdResult()
}

func authRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceAuthRoleArgs)
	realResult := result.(*v1.SystemServiceAuthRoleResult)
	success, err := handler.(v1.SystemService).AuthRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceAuthRoleArgs() interface{} {
	return v1.NewSystemServiceAuthRoleArgs()
}

func newSystemServiceAuthRoleResult() interface{} {
	return v1.NewSystemServiceAuthRoleResult()
}

func listDeptsTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListDeptsTreeArgs)
	realResult := result.(*v1.SystemServiceListDeptsTreeResult)
	success, err := handler.(v1.SystemService).ListDeptsTree(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListDeptsTreeArgs() interface{} {
	return v1.NewSystemServiceListDeptsTreeArgs()
}

func newSystemServiceListDeptsTreeResult() interface{} {
	return v1.NewSystemServiceListDeptsTreeResult()
}

func listSysUserOnlinesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceListSysUserOnlinesArgs)
	realResult := result.(*v1.SystemServiceListSysUserOnlinesResult)
	success, err := handler.(v1.SystemService).ListSysUserOnlines(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceListSysUserOnlinesArgs() interface{} {
	return v1.NewSystemServiceListSysUserOnlinesArgs()
}

func newSystemServiceListSysUserOnlinesResult() interface{} {
	return v1.NewSystemServiceListSysUserOnlinesResult()
}

func forceLogoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.SystemServiceForceLogoutArgs)
	realResult := result.(*v1.SystemServiceForceLogoutResult)
	success, err := handler.(v1.SystemService).ForceLogout(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceForceLogoutArgs() interface{} {
	return v1.NewSystemServiceForceLogoutArgs()
}

func newSystemServiceForceLogoutResult() interface{} {
	return v1.NewSystemServiceForceLogoutResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ListConfigs(ctx context.Context, req *v1.ListConfigsRequest) (r *v1.ListConfigsResponse, err error) {
	var _args v1.SystemServiceListConfigsArgs
	_args.Req = req
	var _result v1.SystemServiceListConfigsResult
	if err = p.c.Call(ctx, "ListConfigs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportConfig(ctx context.Context, req *v1.ExportConfigRequest) (r *v1.ExportConfigResponse, err error) {
	var _args v1.SystemServiceExportConfigArgs
	_args.Req = req
	var _result v1.SystemServiceExportConfigResult
	if err = p.c.Call(ctx, "ExportConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetConfigById(ctx context.Context, id int64) (r *v1.ConfigResponse, err error) {
	var _args v1.SystemServiceGetConfigByIdArgs
	_args.Id = id
	var _result v1.SystemServiceGetConfigByIdResult
	if err = p.c.Call(ctx, "GetConfigById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetConfigByKey(ctx context.Context, key string) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceGetConfigByKeyArgs
	_args.Key = key
	var _result v1.SystemServiceGetConfigByKeyResult
	if err = p.c.Call(ctx, "GetConfigByKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateConfig(ctx context.Context, req *v1.CreateConfigRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateConfigArgs
	_args.Req = req
	var _result v1.SystemServiceCreateConfigResult
	if err = p.c.Call(ctx, "CreateConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateConfig(ctx context.Context, req *v1.UpdateConfigReqeust) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateConfigArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateConfigResult
	if err = p.c.Call(ctx, "UpdateConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteConfig(ctx context.Context, req *v1.DeleteConfigReqeust) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteConfigArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteConfigResult
	if err = p.c.Call(ctx, "DeleteConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefreshConfig(ctx context.Context) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceRefreshConfigArgs
	var _result v1.SystemServiceRefreshConfigResult
	if err = p.c.Call(ctx, "RefreshConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDepts(ctx context.Context, req *v1.ListDeptsRequest) (r *v1.ListDeptsResponse, err error) {
	var _args v1.SystemServiceListDeptsArgs
	_args.Req = req
	var _result v1.SystemServiceListDeptsResult
	if err = p.c.Call(ctx, "ListDepts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDeptsExcludeChild(ctx context.Context, id int64) (r *v1.ListDeptsResponse, err error) {
	var _args v1.SystemServiceListDeptsExcludeChildArgs
	_args.Id = id
	var _result v1.SystemServiceListDeptsExcludeChildResult
	if err = p.c.Call(ctx, "ListDeptsExcludeChild", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDeptById(ctx context.Context, req *v1.GetDeptByIdReq) (r *v1.DeptResponse, err error) {
	var _args v1.SystemServiceGetDeptByIdArgs
	_args.Req = req
	var _result v1.SystemServiceGetDeptByIdResult
	if err = p.c.Call(ctx, "GetDeptById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDept(ctx context.Context, req *v1.CreateDeptRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateDeptArgs
	_args.Req = req
	var _result v1.SystemServiceCreateDeptResult
	if err = p.c.Call(ctx, "CreateDept", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDept(ctx context.Context, req *v1.UpdateDeptRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateDeptArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateDeptResult
	if err = p.c.Call(ctx, "UpdateDept", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDept(ctx context.Context, req *v1.DeleteDeptRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteDeptArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteDeptResult
	if err = p.c.Call(ctx, "DeleteDept", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDictDatas(ctx context.Context, req *v1.ListDictDatasRequest) (r *v1.ListDictDatasResponse, err error) {
	var _args v1.SystemServiceListDictDatasArgs
	_args.Req = req
	var _result v1.SystemServiceListDictDatasResult
	if err = p.c.Call(ctx, "ListDictDatas", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportDictData(ctx context.Context, req *v1.ExportDictDataRequest) (r *v1.ExportDictDataResponse, err error) {
	var _args v1.SystemServiceExportDictDataArgs
	_args.Req = req
	var _result v1.SystemServiceExportDictDataResult
	if err = p.c.Call(ctx, "ExportDictData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDictDataByCode(ctx context.Context, code int64) (r *v1.DictDataResponse, err error) {
	var _args v1.SystemServiceGetDictDataByCodeArgs
	_args.Code = code
	var _result v1.SystemServiceGetDictDataByCodeResult
	if err = p.c.Call(ctx, "GetDictDataByCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDictDataByType(ctx context.Context, dictType string) (r *v1.ListDictDatasResponse, err error) {
	var _args v1.SystemServiceListDictDataByTypeArgs
	_args.DictType = dictType
	var _result v1.SystemServiceListDictDataByTypeResult
	if err = p.c.Call(ctx, "ListDictDataByType", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDictData(ctx context.Context, req *v1.CreateDictDataRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateDictDataArgs
	_args.Req = req
	var _result v1.SystemServiceCreateDictDataResult
	if err = p.c.Call(ctx, "CreateDictData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDictData(ctx context.Context, req *v1.UpdateDictDataRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateDictDataArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateDictDataResult
	if err = p.c.Call(ctx, "UpdateDictData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDictData(ctx context.Context, req *v1.DeleteDictDataRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteDictDataArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteDictDataResult
	if err = p.c.Call(ctx, "DeleteDictData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDictTypes(ctx context.Context, req *v1.ListDictTypesRequest) (r *v1.ListDictTypesResponse, err error) {
	var _args v1.SystemServiceListDictTypesArgs
	_args.Req = req
	var _result v1.SystemServiceListDictTypesResult
	if err = p.c.Call(ctx, "ListDictTypes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportDictType(ctx context.Context, req *v1.ExportDictTypeRequest) (r *v1.ExportDictTypeResponse, err error) {
	var _args v1.SystemServiceExportDictTypeArgs
	_args.Req = req
	var _result v1.SystemServiceExportDictTypeResult
	if err = p.c.Call(ctx, "ExportDictType", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDictTypeById(ctx context.Context, id int64) (r *v1.DictTypeResponse, err error) {
	var _args v1.SystemServiceGetDictTypeByIdArgs
	_args.Id = id
	var _result v1.SystemServiceGetDictTypeByIdResult
	if err = p.c.Call(ctx, "GetDictTypeById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDictType(ctx context.Context, req *v1.CreateDictTypeRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateDictTypeArgs
	_args.Req = req
	var _result v1.SystemServiceCreateDictTypeResult
	if err = p.c.Call(ctx, "CreateDictType", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDictType(ctx context.Context, req *v1.UpdateDictTypeRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateDictTypeArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateDictTypeResult
	if err = p.c.Call(ctx, "UpdateDictType", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDictType(ctx context.Context, req *v1.DeleteDictTypeRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteDictTypeArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteDictTypeResult
	if err = p.c.Call(ctx, "DeleteDictType", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefreshDictType(ctx context.Context) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceRefreshDictTypeArgs
	var _result v1.SystemServiceRefreshDictTypeResult
	if err = p.c.Call(ctx, "RefreshDictType", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DictTypeOptionSelect(ctx context.Context) (r *v1.DictTypeOptionSelectResponse, err error) {
	var _args v1.SystemServiceDictTypeOptionSelectArgs
	var _result v1.SystemServiceDictTypeOptionSelectResult
	if err = p.c.Call(ctx, "DictTypeOptionSelect", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSysLogininfos(ctx context.Context, req *v1.ListSysLogininfosRequest) (r *v1.ListSysLogininfosResponse, err error) {
	var _args v1.SystemServiceListSysLogininfosArgs
	_args.Req = req
	var _result v1.SystemServiceListSysLogininfosResult
	if err = p.c.Call(ctx, "ListSysLogininfos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportLogininfo(ctx context.Context, req *v1.ExportLogininfoRequest) (r *v1.ExportLogininfoResponse, err error) {
	var _args v1.SystemServiceExportLogininfoArgs
	_args.Req = req
	var _result v1.SystemServiceExportLogininfoResult
	if err = p.c.Call(ctx, "ExportLogininfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveSysLogininfosById(ctx context.Context, req *v1.RemoveSysLogininfosByIdRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceRemoveSysLogininfosByIdArgs
	_args.Req = req
	var _result v1.SystemServiceRemoveSysLogininfosByIdResult
	if err = p.c.Call(ctx, "RemoveSysLogininfosById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LogininfoClean(ctx context.Context) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceLogininfoCleanArgs
	var _result v1.SystemServiceLogininfoCleanResult
	if err = p.c.Call(ctx, "LogininfoClean", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnlockByUserName(ctx context.Context, username string) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUnlockByUserNameArgs
	_args.Username = username
	var _result v1.SystemServiceUnlockByUserNameResult
	if err = p.c.Call(ctx, "UnlockByUserName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSysLogininfo(ctx context.Context, req *v1.CreateSysLogininfoRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateSysLogininfoArgs
	_args.Req = req
	var _result v1.SystemServiceCreateSysLogininfoResult
	if err = p.c.Call(ctx, "CreateSysLogininfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSysMenus(ctx context.Context, req *v1.ListSysMenusRequest) (r *v1.ListSysMenusResponse, err error) {
	var _args v1.SystemServiceListSysMenusArgs
	_args.Req = req
	var _result v1.SystemServiceListSysMenusResult
	if err = p.c.Call(ctx, "ListSysMenus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSysMenuById(ctx context.Context, id int64) (r *v1.SysMenuResponse, err error) {
	var _args v1.SystemServiceGetSysMenuByIdArgs
	_args.Id = id
	var _result v1.SystemServiceGetSysMenuByIdResult
	if err = p.c.Call(ctx, "GetSysMenuById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTreeMenu(ctx context.Context, req *v1.ListTreeMenuRequest) (r *v1.ListSysMenusResponse, err error) {
	var _args v1.SystemServiceListTreeMenuArgs
	_args.Req = req
	var _result v1.SystemServiceListTreeMenuResult
	if err = p.c.Call(ctx, "ListTreeMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTreeMenuByRoleid(ctx context.Context, req *v1.ListTreeMenuByRoleidRequest) (r *v1.RoleMenuResponse, err error) {
	var _args v1.SystemServiceListTreeMenuByRoleidArgs
	_args.Req = req
	var _result v1.SystemServiceListTreeMenuByRoleidResult
	if err = p.c.Call(ctx, "ListTreeMenuByRoleid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenu(ctx context.Context, req *v1.CreateMenuRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateMenuArgs
	_args.Req = req
	var _result v1.SystemServiceCreateMenuResult
	if err = p.c.Call(ctx, "CreateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMenu(ctx context.Context, req *v1.UpdateMenuRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateMenuArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateMenuResult
	if err = p.c.Call(ctx, "UpdateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMenu(ctx context.Context, req *v1.DeleteMenuRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteMenuArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteMenuResult
	if err = p.c.Call(ctx, "DeleteMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRouters(ctx context.Context, req *v1.GetRoutersRequest) (r *v1.RoutersResonse, err error) {
	var _args v1.SystemServiceGetRoutersArgs
	_args.Req = req
	var _result v1.SystemServiceGetRoutersResult
	if err = p.c.Call(ctx, "GetRouters", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSysNotices(ctx context.Context, req *v1.ListSysNoticesRequest) (r *v1.ListSysNoticesResponse, err error) {
	var _args v1.SystemServiceListSysNoticesArgs
	_args.Req = req
	var _result v1.SystemServiceListSysNoticesResult
	if err = p.c.Call(ctx, "ListSysNotices", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSysNoticeById(ctx context.Context, id int64) (r *v1.SysNoticeResponse, err error) {
	var _args v1.SystemServiceGetSysNoticeByIdArgs
	_args.Id = id
	var _result v1.SystemServiceGetSysNoticeByIdResult
	if err = p.c.Call(ctx, "GetSysNoticeById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSysNotice(ctx context.Context, req *v1.CreateSysNoticeRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateSysNoticeArgs
	_args.Req = req
	var _result v1.SystemServiceCreateSysNoticeResult
	if err = p.c.Call(ctx, "CreateSysNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSysNotice(ctx context.Context, req *v1.DeleteSysNoticeRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteSysNoticeArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteSysNoticeResult
	if err = p.c.Call(ctx, "DeleteSysNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSysNotice(ctx context.Context, req *v1.UpdateSysNoticeRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateSysNoticeArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateSysNoticeResult
	if err = p.c.Call(ctx, "UpdateSysNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSysOperLogs(ctx context.Context, req *v1.ListSysOperLogsRequest) (r *v1.ListSysOperLogsResponse, err error) {
	var _args v1.SystemServiceListSysOperLogsArgs
	_args.Req = req
	var _result v1.SystemServiceListSysOperLogsResult
	if err = p.c.Call(ctx, "ListSysOperLogs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportSysOperLog(ctx context.Context, req *v1.ExportSysOperLogRequest) (r *v1.ExportSysOperLogResponse, err error) {
	var _args v1.SystemServiceExportSysOperLogArgs
	_args.Req = req
	var _result v1.SystemServiceExportSysOperLogResult
	if err = p.c.Call(ctx, "ExportSysOperLog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSysOperLog(ctx context.Context, req *v1.DeleteSysOperLogRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteSysOperLogArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteSysOperLogResult
	if err = p.c.Call(ctx, "DeleteSysOperLog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OperLogClean(ctx context.Context) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceOperLogCleanArgs
	var _result v1.SystemServiceOperLogCleanResult
	if err = p.c.Call(ctx, "OperLogClean", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSysOperLog(ctx context.Context, req *v1.CreateSysOperLogRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateSysOperLogArgs
	_args.Req = req
	var _result v1.SystemServiceCreateSysOperLogResult
	if err = p.c.Call(ctx, "CreateSysOperLog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSysPosts(ctx context.Context, req *v1.ListSysPostsRequest) (r *v1.ListSysPostsResponse, err error) {
	var _args v1.SystemServiceListSysPostsArgs
	_args.Req = req
	var _result v1.SystemServiceListSysPostsResult
	if err = p.c.Call(ctx, "ListSysPosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportSysPost(ctx context.Context, req *v1.ExportSysPostRequest) (r *v1.ExportSysPostResponse, err error) {
	var _args v1.SystemServiceExportSysPostArgs
	_args.Req = req
	var _result v1.SystemServiceExportSysPostResult
	if err = p.c.Call(ctx, "ExportSysPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSysPostById(ctx context.Context, id int64) (r *v1.SysPostResponse, err error) {
	var _args v1.SystemServiceGetSysPostByIdArgs
	_args.Id = id
	var _result v1.SystemServiceGetSysPostByIdResult
	if err = p.c.Call(ctx, "GetSysPostById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSysPost(ctx context.Context, req *v1.CreateSysPostRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateSysPostArgs
	_args.Req = req
	var _result v1.SystemServiceCreateSysPostResult
	if err = p.c.Call(ctx, "CreateSysPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSysPost(ctx context.Context, req *v1.UpdateSysPostRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateSysPostArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateSysPostResult
	if err = p.c.Call(ctx, "UpdateSysPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSysPost(ctx context.Context, req *v1.DeleteSysPostRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteSysPostArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteSysPostResult
	if err = p.c.Call(ctx, "DeleteSysPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PostOptionSelect(ctx context.Context) (r *v1.PostOptionSelectResponse, err error) {
	var _args v1.SystemServicePostOptionSelectArgs
	var _result v1.SystemServicePostOptionSelectResult
	if err = p.c.Call(ctx, "PostOptionSelect", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Profile(ctx context.Context, req *v1.ProfileRequest) (r *v1.ProfileResponse, err error) {
	var _args v1.SystemServiceProfileArgs
	_args.Req = req
	var _result v1.SystemServiceProfileResult
	if err = p.c.Call(ctx, "Profile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProfile(ctx context.Context, req *v1.UpdateProfileRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateProfileArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateProfileResult
	if err = p.c.Call(ctx, "UpdateProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePassword(ctx context.Context, req *v1.UpdatePasswordRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdatePasswordArgs
	_args.Req = req
	var _result v1.SystemServiceUpdatePasswordResult
	if err = p.c.Call(ctx, "UpdatePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSysRole(ctx context.Context, req *v1.ListSysRolesRequest) (r *v1.ListSysRolesResponse, err error) {
	var _args v1.SystemServiceListSysRoleArgs
	_args.Req = req
	var _result v1.SystemServiceListSysRoleResult
	if err = p.c.Call(ctx, "ListSysRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportSysRole(ctx context.Context, req *v1.ExportSysRoleRequest) (r *v1.ExportSysRoleResponse, err error) {
	var _args v1.SystemServiceExportSysRoleArgs
	_args.Req = req
	var _result v1.SystemServiceExportSysRoleResult
	if err = p.c.Call(ctx, "ExportSysRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSysRoleByid(ctx context.Context, id int64) (r *v1.SysRoleResponse, err error) {
	var _args v1.SystemServiceGetSysRoleByidArgs
	_args.Id = id
	var _result v1.SystemServiceGetSysRoleByidResult
	if err = p.c.Call(ctx, "GetSysRoleByid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSysRole(ctx context.Context, req *v1.CreateSysRoleRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateSysRoleArgs
	_args.Req = req
	var _result v1.SystemServiceCreateSysRoleResult
	if err = p.c.Call(ctx, "CreateSysRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSysRole(ctx context.Context, req *v1.UpdateSysRoleRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateSysRoleArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateSysRoleResult
	if err = p.c.Call(ctx, "UpdateSysRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DataScope(ctx context.Context, req *v1.DataScopeRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDataScopeArgs
	_args.Req = req
	var _result v1.SystemServiceDataScopeResult
	if err = p.c.Call(ctx, "DataScope", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeSysRoleStatus(ctx context.Context, req *v1.ChangeSysRoleStatusRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceChangeSysRoleStatusArgs
	_args.Req = req
	var _result v1.SystemServiceChangeSysRoleStatusResult
	if err = p.c.Call(ctx, "ChangeSysRoleStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSysRole(ctx context.Context, req *v1.DeleteSysRoleRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteSysRoleArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteSysRoleResult
	if err = p.c.Call(ctx, "DeleteSysRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListRoleOption(ctx context.Context) (r *v1.ListSysRolesResponse, err error) {
	var _args v1.SystemServiceListRoleOptionArgs
	var _result v1.SystemServiceListRoleOptionResult
	if err = p.c.Call(ctx, "ListRoleOption", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AllocatedList(ctx context.Context, req *v1.AllocatedListRequest) (r *v1.ListSysUsersResponse, err error) {
	var _args v1.SystemServiceAllocatedListArgs
	_args.Req = req
	var _result v1.SystemServiceAllocatedListResult
	if err = p.c.Call(ctx, "AllocatedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnallocatedList(ctx context.Context, req *v1.UnallocatedListRequest) (r *v1.ListSysUsersResponse, err error) {
	var _args v1.SystemServiceUnallocatedListArgs
	_args.Req = req
	var _result v1.SystemServiceUnallocatedListResult
	if err = p.c.Call(ctx, "UnallocatedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelAuthUser(ctx context.Context, req *v1.CancelAuthUserRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCancelAuthUserArgs
	_args.Req = req
	var _result v1.SystemServiceCancelAuthUserResult
	if err = p.c.Call(ctx, "CancelAuthUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelAuthUserAll(ctx context.Context, req *v1.CancelAuthUserAllRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCancelAuthUserAllArgs
	_args.Req = req
	var _result v1.SystemServiceCancelAuthUserAllResult
	if err = p.c.Call(ctx, "CancelAuthUserAll", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectAuthUserAll(ctx context.Context, req *v1.SelectAuthUserAllRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceSelectAuthUserAllArgs
	_args.Req = req
	var _result v1.SystemServiceSelectAuthUserAllResult
	if err = p.c.Call(ctx, "SelectAuthUserAll", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeptTreeByRoleId(ctx context.Context, id int64) (r *v1.DeptTreeByRoleIdResponse, err error) {
	var _args v1.SystemServiceDeptTreeByRoleIdArgs
	_args.Id = id
	var _result v1.SystemServiceDeptTreeByRoleIdResult
	if err = p.c.Call(ctx, "DeptTreeByRoleId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSysUsers(ctx context.Context, req *v1.ListSysUsersRequest) (r *v1.ListSysUsersResponse, err error) {
	var _args v1.SystemServiceListSysUsersArgs
	_args.Req = req
	var _result v1.SystemServiceListSysUsersResult
	if err = p.c.Call(ctx, "ListSysUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportSysUser(ctx context.Context, req *v1.ExportSysUserRequest) (r *v1.ExportSysUserResponse, err error) {
	var _args v1.SystemServiceExportSysUserArgs
	_args.Req = req
	var _result v1.SystemServiceExportSysUserResult
	if err = p.c.Call(ctx, "ExportSysUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportUserData(ctx context.Context, req *v1.ImportUserDataRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceImportUserDataArgs
	_args.Req = req
	var _result v1.SystemServiceImportUserDataResult
	if err = p.c.Call(ctx, "ImportUserData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfoByName(ctx context.Context, name string) (r *v1.UserInfoResponse, err error) {
	var _args v1.SystemServiceGetUserInfoByNameArgs
	_args.Name = name
	var _result v1.SystemServiceGetUserInfoByNameResult
	if err = p.c.Call(ctx, "GetUserInfoByName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, id int64) (r *v1.UserInfoResponse, err error) {
	var _args v1.SystemServiceGetUserInfoArgs
	_args.Id = id
	var _result v1.SystemServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterSysUser(ctx context.Context, req *v1.RegisterSysUserRequest) (r *v1.RegisterSysUserResponse, err error) {
	var _args v1.SystemServiceRegisterSysUserArgs
	_args.Req = req
	var _result v1.SystemServiceRegisterSysUserResult
	if err = p.c.Call(ctx, "RegisterSysUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfoById(ctx context.Context, id int64) (r *v1.UserInfoByIdResponse, err error) {
	var _args v1.SystemServiceGetUserInfoByIdArgs
	_args.Id = id
	var _result v1.SystemServiceGetUserInfoByIdResult
	if err = p.c.Call(ctx, "GetUserInfoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSysUser(ctx context.Context, req *v1.CreateSysUserRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceCreateSysUserArgs
	_args.Req = req
	var _result v1.SystemServiceCreateSysUserResult
	if err = p.c.Call(ctx, "CreateSysUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSysUser(ctx context.Context, req *v1.UpdateSysUserRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceUpdateSysUserArgs
	_args.Req = req
	var _result v1.SystemServiceUpdateSysUserResult
	if err = p.c.Call(ctx, "UpdateSysUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSysUser(ctx context.Context, req *v1.DeleteSysUserRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceDeleteSysUserArgs
	_args.Req = req
	var _result v1.SystemServiceDeleteSysUserResult
	if err = p.c.Call(ctx, "DeleteSysUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetPassword(ctx context.Context, req *v1.ResetPasswordRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceResetPasswordArgs
	_args.Req = req
	var _result v1.SystemServiceResetPasswordResult
	if err = p.c.Call(ctx, "ResetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeSysUserStatus(ctx context.Context, req *v1.ChangeSysUserStatus) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceChangeSysUserStatusArgs
	_args.Req = req
	var _result v1.SystemServiceChangeSysUserStatusResult
	if err = p.c.Call(ctx, "ChangeSysUserStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAuthRoleById(ctx context.Context, id int64) (r *v1.AuthRoleInfoResponse, err error) {
	var _args v1.SystemServiceGetAuthRoleByIdArgs
	_args.Id = id
	var _result v1.SystemServiceGetAuthRoleByIdResult
	if err = p.c.Call(ctx, "GetAuthRoleById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AuthRole(ctx context.Context, req *v1.AuthRoleRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceAuthRoleArgs
	_args.Req = req
	var _result v1.SystemServiceAuthRoleResult
	if err = p.c.Call(ctx, "AuthRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDeptsTree(ctx context.Context, req *v1.ListDeptsTreeRequest) (r *v1.ListDeptsTreeResponse, err error) {
	var _args v1.SystemServiceListDeptsTreeArgs
	_args.Req = req
	var _result v1.SystemServiceListDeptsTreeResult
	if err = p.c.Call(ctx, "ListDeptsTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSysUserOnlines(ctx context.Context, req *v1.ListSysUserOnlinesRequest) (r *v1.ListSysUserOnline, err error) {
	var _args v1.SystemServiceListSysUserOnlinesArgs
	_args.Req = req
	var _result v1.SystemServiceListSysUserOnlinesResult
	if err = p.c.Call(ctx, "ListSysUserOnlines", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ForceLogout(ctx context.Context, req *v1.ForceLogoutRequest) (r *v1.BaseResp, err error) {
	var _args v1.SystemServiceForceLogoutArgs
	_args.Req = req
	var _result v1.SystemServiceForceLogoutResult
	if err = p.c.Call(ctx, "ForceLogout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
